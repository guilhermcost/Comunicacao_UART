
comm_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08006110  08006110  00016110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006218  08006218  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006218  08006218  00016218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006220  08006220  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006220  08006220  00016220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006224  08006224  00016224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b48  20000074  0800629c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bbc  0800629c  00024bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a33a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003558  00000000  00000000  0003a3de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  0003d938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  0003eda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000346a  00000000  00000000  000400f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165cc  00000000  00000000  0004355a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097024  00000000  00000000  00059b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0b4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005924  00000000  00000000  000f0b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080060f8 	.word	0x080060f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080060f8 	.word	0x080060f8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004e8:	4b04      	ldr	r3, [pc, #16]	; (80004fc <__NVIC_GetPriorityGrouping+0x18>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	0a1b      	lsrs	r3, r3, #8
 80004ee:	f003 0307 	and.w	r3, r3, #7
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	e000ed00 	.word	0xe000ed00

08000500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800050a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050e:	2b00      	cmp	r3, #0
 8000510:	db0b      	blt.n	800052a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	f003 021f 	and.w	r2, r3, #31
 8000518:	4907      	ldr	r1, [pc, #28]	; (8000538 <__NVIC_EnableIRQ+0x38>)
 800051a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051e:	095b      	lsrs	r3, r3, #5
 8000520:	2001      	movs	r0, #1
 8000522:	fa00 f202 	lsl.w	r2, r0, r2
 8000526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	e000e100 	.word	0xe000e100

0800053c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	6039      	str	r1, [r7, #0]
 8000546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054c:	2b00      	cmp	r3, #0
 800054e:	db0a      	blt.n	8000566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	b2da      	uxtb	r2, r3
 8000554:	490c      	ldr	r1, [pc, #48]	; (8000588 <__NVIC_SetPriority+0x4c>)
 8000556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055a:	0112      	lsls	r2, r2, #4
 800055c:	b2d2      	uxtb	r2, r2
 800055e:	440b      	add	r3, r1
 8000560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000564:	e00a      	b.n	800057c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4908      	ldr	r1, [pc, #32]	; (800058c <__NVIC_SetPriority+0x50>)
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	f003 030f 	and.w	r3, r3, #15
 8000572:	3b04      	subs	r3, #4
 8000574:	0112      	lsls	r2, r2, #4
 8000576:	b2d2      	uxtb	r2, r2
 8000578:	440b      	add	r3, r1
 800057a:	761a      	strb	r2, [r3, #24]
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	e000e100 	.word	0xe000e100
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000590:	b480      	push	{r7}
 8000592:	b089      	sub	sp, #36	; 0x24
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f003 0307 	and.w	r3, r3, #7
 80005a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a4:	69fb      	ldr	r3, [r7, #28]
 80005a6:	f1c3 0307 	rsb	r3, r3, #7
 80005aa:	2b04      	cmp	r3, #4
 80005ac:	bf28      	it	cs
 80005ae:	2304      	movcs	r3, #4
 80005b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	3304      	adds	r3, #4
 80005b6:	2b06      	cmp	r3, #6
 80005b8:	d902      	bls.n	80005c0 <NVIC_EncodePriority+0x30>
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	3b03      	subs	r3, #3
 80005be:	e000      	b.n	80005c2 <NVIC_EncodePriority+0x32>
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c4:	f04f 32ff 	mov.w	r2, #4294967295
 80005c8:	69bb      	ldr	r3, [r7, #24]
 80005ca:	fa02 f303 	lsl.w	r3, r2, r3
 80005ce:	43da      	mvns	r2, r3
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	401a      	ands	r2, r3
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005d8:	f04f 31ff 	mov.w	r1, #4294967295
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	fa01 f303 	lsl.w	r3, r1, r3
 80005e2:	43d9      	mvns	r1, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e8:	4313      	orrs	r3, r2
         );
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3724      	adds	r7, #36	; 0x24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
	...

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f000 fb24 	bl	8000c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f826 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 f8be 	bl	8000784 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000608:	f000 f882 	bl	8000710 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  start_rtos();
 800060c:	f000 f93a 	bl	8000884 <start_rtos>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000610:	f002 fdd0 	bl	80031b4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8000614:	4a09      	ldr	r2, [pc, #36]	; (800063c <main+0x44>)
 8000616:	2102      	movs	r1, #2
 8000618:	2010      	movs	r0, #16
 800061a:	f002 fec2 	bl	80033a2 <osMessageQueueNew>
 800061e:	4603      	mov	r3, r0
 8000620:	4a07      	ldr	r2, [pc, #28]	; (8000640 <main+0x48>)
 8000622:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000624:	4a07      	ldr	r2, [pc, #28]	; (8000644 <main+0x4c>)
 8000626:	2100      	movs	r1, #0
 8000628:	4807      	ldr	r0, [pc, #28]	; (8000648 <main+0x50>)
 800062a:	f002 fe0d 	bl	8003248 <osThreadNew>
 800062e:	4603      	mov	r3, r0
 8000630:	4a06      	ldr	r2, [pc, #24]	; (800064c <main+0x54>)
 8000632:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000634:	f002 fde2 	bl	80031fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000638:	e7fe      	b.n	8000638 <main+0x40>
 800063a:	bf00      	nop
 800063c:	08006188 	.word	0x08006188
 8000640:	200000d8 	.word	0x200000d8
 8000644:	08006164 	.word	0x08006164
 8000648:	08000845 	.word	0x08000845
 800064c:	200000d4 	.word	0x200000d4

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fc80 	bl	8005f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b23      	ldr	r3, [pc, #140]	; (8000708 <SystemClock_Config+0xb8>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a22      	ldr	r2, [pc, #136]	; (8000708 <SystemClock_Config+0xb8>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b20      	ldr	r3, [pc, #128]	; (8000708 <SystemClock_Config+0xb8>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <SystemClock_Config+0xbc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800069c:	4a1b      	ldr	r2, [pc, #108]	; (800070c <SystemClock_Config+0xbc>)
 800069e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <SystemClock_Config+0xbc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006bc:	2300      	movs	r3, #0
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fe13 	bl	80012f0 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006d0:	f000 f8d2 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 f876 	bl	80017e0 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006fa:	f000 f8bd 	bl	8000878 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	; 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <MX_USART1_UART_Init+0x68>)
 8000716:	4a19      	ldr	r2, [pc, #100]	; (800077c <MX_USART1_UART_Init+0x6c>)
 8000718:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 576000;
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_USART1_UART_Init+0x68>)
 800071c:	4a18      	ldr	r2, [pc, #96]	; (8000780 <MX_USART1_UART_Init+0x70>)
 800071e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_USART1_UART_Init+0x68>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_USART1_UART_Init+0x68>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_USART1_UART_Init+0x68>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_USART1_UART_Init+0x68>)
 8000734:	220c      	movs	r2, #12
 8000736:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_USART1_UART_Init+0x68>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_USART1_UART_Init+0x68>)
 8000740:	2200      	movs	r2, #0
 8000742:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000744:	480c      	ldr	r0, [pc, #48]	; (8000778 <MX_USART1_UART_Init+0x68>)
 8000746:	f001 fcdd 	bl	8002104 <HAL_UART_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8000750:	f000 f892 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000754:	f7ff fec6 	bl	80004e4 <__NVIC_GetPriorityGrouping>
 8000758:	4603      	mov	r3, r0
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff16 	bl	8000590 <NVIC_EncodePriority>
 8000764:	4603      	mov	r3, r0
 8000766:	4619      	mov	r1, r3
 8000768:	2025      	movs	r0, #37	; 0x25
 800076a:	f7ff fee7 	bl	800053c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800076e:	2025      	movs	r0, #37	; 0x25
 8000770:	f7ff fec6 	bl	8000500 <__NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000090 	.word	0x20000090
 800077c:	40011000 	.word	0x40011000
 8000780:	0008ca00 	.word	0x0008ca00

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	4b26      	ldr	r3, [pc, #152]	; (8000838 <MX_GPIO_Init+0xb4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a25      	ldr	r2, [pc, #148]	; (8000838 <MX_GPIO_Init+0xb4>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b23      	ldr	r3, [pc, #140]	; (8000838 <MX_GPIO_Init+0xb4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <MX_GPIO_Init+0xb4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a1e      	ldr	r2, [pc, #120]	; (8000838 <MX_GPIO_Init+0xb4>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <MX_GPIO_Init+0xb4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_GPIO_Init+0xb4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a17      	ldr	r2, [pc, #92]	; (8000838 <MX_GPIO_Init+0xb4>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_GPIO_Init+0xb4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f4:	4811      	ldr	r0, [pc, #68]	; (800083c <MX_GPIO_Init+0xb8>)
 80007f6:	f000 fd61 	bl	80012bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	4619      	mov	r1, r3
 8000812:	480a      	ldr	r0, [pc, #40]	; (800083c <MX_GPIO_Init+0xb8>)
 8000814:	f000 fbce 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000818:	2301      	movs	r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000820:	2301      	movs	r3, #1
 8000822:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_GPIO_Init+0xbc>)
 800082c:	f000 fbc2 	bl	8000fb4 <HAL_GPIO_Init>

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40020800 	.word	0x40020800
 8000840:	40020000 	.word	0x40020000

08000844 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800084c:	2001      	movs	r0, #1
 800084e:	f002 fd8d 	bl	800336c <osDelay>
 8000852:	e7fb      	b.n	800084c <StartDefaultTask+0x8>

08000854 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a04      	ldr	r2, [pc, #16]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d101      	bne.n	800086a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000866:	f000 fa11 	bl	8000c8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40000c00 	.word	0x40000c00

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <start_rtos>:
QueueHandle_t queueHandler01;

HAL_StatusTypeDef UART_state;
uint8_t UART_data;

void start_rtos(void) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af02      	add	r7, sp, #8
	queueHandler01 = xQueueCreate(10, sizeof(uint8_t));
 800088a:	2200      	movs	r2, #0
 800088c:	2101      	movs	r1, #1
 800088e:	200a      	movs	r0, #10
 8000890:	f002 ffc2 	bl	8003818 <xQueueGenericCreate>
 8000894:	4603      	mov	r3, r0
 8000896:	4a0c      	ldr	r2, [pc, #48]	; (80008c8 <start_rtos+0x44>)
 8000898:	6013      	str	r3, [r2, #0]

	xTaskCreate(
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <start_rtos+0x48>)
 800089c:	9301      	str	r3, [sp, #4]
 800089e:	2301      	movs	r3, #1
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	2300      	movs	r3, #0
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	490a      	ldr	r1, [pc, #40]	; (80008d0 <start_rtos+0x4c>)
 80008a8:	480a      	ldr	r0, [pc, #40]	; (80008d4 <start_rtos+0x50>)
 80008aa:	f003 fc58 	bl	800415e <xTaskCreate>
		NULL, 		//parametro
		1,			//prioridade
		&hLedTask
	);

	xTaskCreate(
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <start_rtos+0x54>)
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	2301      	movs	r3, #1
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2300      	movs	r3, #0
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	4908      	ldr	r1, [pc, #32]	; (80008dc <start_rtos+0x58>)
 80008bc:	4808      	ldr	r0, [pc, #32]	; (80008e0 <start_rtos+0x5c>)
 80008be:	f003 fc4e 	bl	800415e <xTaskCreate>
		NULL,
		1,
		&hReciveDataTask
	);

	vTaskStartScheduler();
 80008c2:	f003 fe59 	bl	8004578 <vTaskStartScheduler>

	while(1);
 80008c6:	e7fe      	b.n	80008c6 <start_rtos+0x42>
 80008c8:	20000154 	.word	0x20000154
 80008cc:	2000014c 	.word	0x2000014c
 80008d0:	08006128 	.word	0x08006128
 80008d4:	080008e5 	.word	0x080008e5
 80008d8:	20000150 	.word	0x20000150
 80008dc:	08006130 	.word	0x08006130
 80008e0:	08000985 	.word	0x08000985

080008e4 <dataGenerator>:
}

void dataGenerator(void *arg) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	uint8_t pinState = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t sampleData[10] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'};
 80008f2:	4a21      	ldr	r2, [pc, #132]	; (8000978 <dataGenerator+0x94>)
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80008fa:	c303      	stmia	r3!, {r0, r1}
 80008fc:	801a      	strh	r2, [r3, #0]
	BaseType_t queueStatus;
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(100);
 80008fe:	2364      	movs	r3, #100	; 0x64
 8000900:	61fb      	str	r3, [r7, #28]


	while(1) {
		pinState = !pinState;
 8000902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000906:	2b00      	cmp	r3, #0
 8000908:	bf0c      	ite	eq
 800090a:	2301      	moveq	r3, #1
 800090c:	2300      	movne	r3, #0
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, pinState);
 8000914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000918:	461a      	mov	r2, r3
 800091a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800091e:	4817      	ldr	r0, [pc, #92]	; (800097c <dataGenerator+0x98>)
 8000920:	f000 fccc 	bl	80012bc <HAL_GPIO_WritePin>

		for(int i = 0; i < sizeof(sampleData); i++) {
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
 8000928:	e021      	b.n	800096e <dataGenerator+0x8a>
			sampleData[i] ^= 0x20;
 800092a:	f107 020c 	add.w	r2, r7, #12
 800092e:	6a3b      	ldr	r3, [r7, #32]
 8000930:	4413      	add	r3, r2
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	f083 0320 	eor.w	r3, r3, #32
 8000938:	b2d9      	uxtb	r1, r3
 800093a:	f107 020c 	add.w	r2, r7, #12
 800093e:	6a3b      	ldr	r3, [r7, #32]
 8000940:	4413      	add	r3, r2
 8000942:	460a      	mov	r2, r1
 8000944:	701a      	strb	r2, [r3, #0]
			queueStatus = xQueueSend(queueHandler01, (void*)(sampleData + i), xFrequency);
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <dataGenerator+0x9c>)
 8000948:	6818      	ldr	r0, [r3, #0]
 800094a:	6a3b      	ldr	r3, [r7, #32]
 800094c:	f107 020c 	add.w	r2, r7, #12
 8000950:	18d1      	adds	r1, r2, r3
 8000952:	2300      	movs	r3, #0
 8000954:	69fa      	ldr	r2, [r7, #28]
 8000956:	f002 ffbd 	bl	80038d4 <xQueueGenericSend>
 800095a:	61b8      	str	r0, [r7, #24]
			vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	69f9      	ldr	r1, [r7, #28]
 8000962:	4618      	mov	r0, r3
 8000964:	f003 fd56 	bl	8004414 <vTaskDelayUntil>
		for(int i = 0; i < sizeof(sampleData); i++) {
 8000968:	6a3b      	ldr	r3, [r7, #32]
 800096a:	3301      	adds	r3, #1
 800096c:	623b      	str	r3, [r7, #32]
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	2b09      	cmp	r3, #9
 8000972:	d9da      	bls.n	800092a <dataGenerator+0x46>
		pinState = !pinState;
 8000974:	e7c5      	b.n	8000902 <dataGenerator+0x1e>
 8000976:	bf00      	nop
 8000978:	08006140 	.word	0x08006140
 800097c:	40020800 	.word	0x40020800
 8000980:	20000154 	.word	0x20000154

08000984 <reciveDataTask>:
//	if(UART_state == HAL_OK) {
//		HAL_UART_Transmit(&huart1, &UART_data, 1, 1);
//	}
//}

void reciveDataTask(void *arg) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	uint8_t recivedData;
	BaseType_t queueStatus;
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(100);
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	617b      	str	r3, [r7, #20]

	xLastWakeTime = xTaskGetTickCount();
 8000990:	f003 ff0e 	bl	80047b0 <xTaskGetTickCount>
 8000994:	4603      	mov	r3, r0
 8000996:	60bb      	str	r3, [r7, #8]

	while(1) {
		queueStatus = xQueueReceive(queueHandler01, (void*)(&recivedData), xFrequency);
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <reciveDataTask+0x48>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f107 010f 	add.w	r1, r7, #15
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f003 f930 	bl	8003c08 <xQueueReceive>
 80009a8:	6138      	str	r0, [r7, #16]
		if(queueStatus == pdPASS) {
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d106      	bne.n	80009be <reciveDataTask+0x3a>
			HAL_UART_Transmit(&huart1, &recivedData, 1, 1);
 80009b0:	f107 010f 	add.w	r1, r7, #15
 80009b4:	2301      	movs	r3, #1
 80009b6:	2201      	movs	r2, #1
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <reciveDataTask+0x4c>)
 80009ba:	f001 fbf0 	bl	800219e <HAL_UART_Transmit>
		}
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	6979      	ldr	r1, [r7, #20]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f003 fd25 	bl	8004414 <vTaskDelayUntil>
		queueStatus = xQueueReceive(queueHandler01, (void*)(&recivedData), xFrequency);
 80009ca:	e7e5      	b.n	8000998 <reciveDataTask+0x14>
 80009cc:	20000154 	.word	0x20000154
 80009d0:	20000090 	.word	0x20000090

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_MspInit+0x54>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	4a11      	ldr	r2, [pc, #68]	; (8000a28 <HAL_MspInit+0x54>)
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <HAL_MspInit+0x54>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_MspInit+0x54>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <HAL_MspInit+0x54>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_MspInit+0x54>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	210f      	movs	r1, #15
 8000a16:	f06f 0001 	mvn.w	r0, #1
 8000a1a:	f000 fa0f 	bl	8000e3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <HAL_UART_MspInit+0x94>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d134      	bne.n	8000ab8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	4a1b      	ldr	r2, [pc, #108]	; (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a58:	f043 0310 	orr.w	r3, r3, #16
 8000a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5e:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	f003 0310 	and.w	r3, r3, #16
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a14      	ldr	r2, [pc, #80]	; (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a98:	2307      	movs	r3, #7
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <HAL_UART_MspInit+0x9c>)
 8000aa4:	f000 fa86 	bl	8000fb4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2105      	movs	r1, #5
 8000aac:	2025      	movs	r0, #37	; 0x25
 8000aae:	f000 f9c5 	bl	8000e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ab2:	2025      	movs	r0, #37	; 0x25
 8000ab4:	f000 f9de 	bl	8000e74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ab8:	bf00      	nop
 8000aba:	3728      	adds	r7, #40	; 0x28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40011000 	.word	0x40011000
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020000 	.word	0x40020000

08000acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	; 0x30
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	2032      	movs	r0, #50	; 0x32
 8000ae2:	f000 f9ab 	bl	8000e3c <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000ae6:	2032      	movs	r0, #50	; 0x32
 8000ae8:	f000 f9c4 	bl	8000e74 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <HAL_InitTick+0xa0>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	4a1d      	ldr	r2, [pc, #116]	; (8000b6c <HAL_InitTick+0xa0>)
 8000af6:	f043 0308 	orr.w	r3, r3, #8
 8000afa:	6413      	str	r3, [r2, #64]	; 0x40
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <HAL_InitTick+0xa0>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	f003 0308 	and.w	r3, r3, #8
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b08:	f107 0210 	add.w	r2, r7, #16
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4611      	mov	r1, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 f844 	bl	8001ba0 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b18:	f001 f81a 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 8000b1c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b20:	4a13      	ldr	r2, [pc, #76]	; (8000b70 <HAL_InitTick+0xa4>)
 8000b22:	fba2 2303 	umull	r2, r3, r2, r3
 8000b26:	0c9b      	lsrs	r3, r3, #18
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <HAL_InitTick+0xa8>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <HAL_InitTick+0xac>)
 8000b30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <HAL_InitTick+0xa8>)
 8000b34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b38:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b3a:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <HAL_InitTick+0xa8>)
 8000b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_InitTick+0xa8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <HAL_InitTick+0xa8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000b4c:	4809      	ldr	r0, [pc, #36]	; (8000b74 <HAL_InitTick+0xa8>)
 8000b4e:	f001 f859 	bl	8001c04 <HAL_TIM_Base_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d104      	bne.n	8000b62 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000b58:	4806      	ldr	r0, [pc, #24]	; (8000b74 <HAL_InitTick+0xa8>)
 8000b5a:	f001 f8ad 	bl	8001cb8 <HAL_TIM_Base_Start_IT>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	e000      	b.n	8000b64 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3730      	adds	r7, #48	; 0x30
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	431bde83 	.word	0x431bde83
 8000b74:	20000158 	.word	0x20000158
 8000b78:	40000c00 	.word	0x40000c00

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <NMI_Handler+0x4>

08000b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <MemManage_Handler+0x4>

08000b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <USART1_IRQHandler+0x10>)
 8000bae:	f001 fb89 	bl	80022c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000090 	.word	0x20000090

08000bbc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <TIM5_IRQHandler+0x10>)
 8000bc2:	f001 f8db 	bl	8001d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000158 	.word	0x20000158

08000bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bfa:	490e      	ldr	r1, [pc, #56]	; (8000c34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c10:	4c0b      	ldr	r4, [pc, #44]	; (8000c40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c1e:	f7ff ffd7 	bl	8000bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c22:	f005 f96b 	bl	8005efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c26:	f7ff fce7 	bl	80005f8 <main>
  bx  lr    
 8000c2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c2c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c38:	08006228 	.word	0x08006228
  ldr r2, =_sbss
 8000c3c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c40:	20004bbc 	.word	0x20004bbc

08000c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC_IRQHandler>
	...

08000c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0d      	ldr	r2, [pc, #52]	; (8000c88 <HAL_Init+0x40>)
 8000c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_Init+0x40>)
 8000c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <HAL_Init+0x40>)
 8000c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 f8d8 	bl	8000e26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c76:	200f      	movs	r0, #15
 8000c78:	f7ff ff28 	bl	8000acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7c:	f7ff feaa 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023c00 	.word	0x40023c00

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	200001a0 	.word	0x200001a0

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	200001a0 	.word	0x200001a0

08000ccc <__NVIC_SetPriorityGrouping>:
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfe:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	60d3      	str	r3, [r2, #12]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_GetPriorityGrouping>:
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <__NVIC_GetPriorityGrouping+0x18>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	f003 0307 	and.w	r3, r3, #7
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_EnableIRQ>:
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	db0b      	blt.n	8000d5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f003 021f 	and.w	r2, r3, #31
 8000d48:	4907      	ldr	r1, [pc, #28]	; (8000d68 <__NVIC_EnableIRQ+0x38>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	095b      	lsrs	r3, r3, #5
 8000d50:	2001      	movs	r0, #1
 8000d52:	fa00 f202 	lsl.w	r2, r0, r2
 8000d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	; (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	; (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	; 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	; 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ff4c 	bl	8000ccc <__NVIC_SetPriorityGrouping>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4e:	f7ff ff61 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	68b9      	ldr	r1, [r7, #8]
 8000e58:	6978      	ldr	r0, [r7, #20]
 8000e5a:	f7ff ffb1 	bl	8000dc0 <NVIC_EncodePriority>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff80 	bl	8000d6c <__NVIC_SetPriority>
}
 8000e6c:	bf00      	nop
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff54 	bl	8000d30 <__NVIC_EnableIRQ>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e9e:	f7ff ff09 	bl	8000cb4 <HAL_GetTick>
 8000ea2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d008      	beq.n	8000ec2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e052      	b.n	8000f68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f022 0216 	bic.w	r2, r2, #22
 8000ed0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	695a      	ldr	r2, [r3, #20]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ee0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d103      	bne.n	8000ef2 <HAL_DMA_Abort+0x62>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d007      	beq.n	8000f02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0208 	bic.w	r2, r2, #8
 8000f00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f022 0201 	bic.w	r2, r2, #1
 8000f10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f12:	e013      	b.n	8000f3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f14:	f7ff fece 	bl	8000cb4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b05      	cmp	r3, #5
 8000f20:	d90c      	bls.n	8000f3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2220      	movs	r2, #32
 8000f26:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e015      	b.n	8000f68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1e4      	bne.n	8000f14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f4e:	223f      	movs	r2, #63	; 0x3f
 8000f50:	409a      	lsls	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d004      	beq.n	8000f8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00c      	b.n	8000fa8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2205      	movs	r2, #5
 8000f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 0201 	bic.w	r2, r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
 8000fce:	e159      	b.n	8001284 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f040 8148 	bne.w	800127e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d005      	beq.n	8001006 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001002:	2b02      	cmp	r3, #2
 8001004:	d130      	bne.n	8001068 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	68da      	ldr	r2, [r3, #12]
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800103c:	2201      	movs	r2, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	091b      	lsrs	r3, r3, #4
 8001052:	f003 0201 	and.w	r2, r3, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b03      	cmp	r3, #3
 8001072:	d017      	beq.n	80010a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d123      	bne.n	80010f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	08da      	lsrs	r2, r3, #3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3208      	adds	r2, #8
 80010b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	220f      	movs	r2, #15
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	691a      	ldr	r2, [r3, #16]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	08da      	lsrs	r2, r3, #3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3208      	adds	r2, #8
 80010f2:	69b9      	ldr	r1, [r7, #24]
 80010f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0203 	and.w	r2, r3, #3
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 80a2 	beq.w	800127e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b57      	ldr	r3, [pc, #348]	; (800129c <HAL_GPIO_Init+0x2e8>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a56      	ldr	r2, [pc, #344]	; (800129c <HAL_GPIO_Init+0x2e8>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b54      	ldr	r3, [pc, #336]	; (800129c <HAL_GPIO_Init+0x2e8>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001156:	4a52      	ldr	r2, [pc, #328]	; (80012a0 <HAL_GPIO_Init+0x2ec>)
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3302      	adds	r3, #2
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	220f      	movs	r2, #15
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a49      	ldr	r2, [pc, #292]	; (80012a4 <HAL_GPIO_Init+0x2f0>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d019      	beq.n	80011b6 <HAL_GPIO_Init+0x202>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a48      	ldr	r2, [pc, #288]	; (80012a8 <HAL_GPIO_Init+0x2f4>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d013      	beq.n	80011b2 <HAL_GPIO_Init+0x1fe>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a47      	ldr	r2, [pc, #284]	; (80012ac <HAL_GPIO_Init+0x2f8>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00d      	beq.n	80011ae <HAL_GPIO_Init+0x1fa>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a46      	ldr	r2, [pc, #280]	; (80012b0 <HAL_GPIO_Init+0x2fc>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d007      	beq.n	80011aa <HAL_GPIO_Init+0x1f6>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a45      	ldr	r2, [pc, #276]	; (80012b4 <HAL_GPIO_Init+0x300>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <HAL_GPIO_Init+0x1f2>
 80011a2:	2304      	movs	r3, #4
 80011a4:	e008      	b.n	80011b8 <HAL_GPIO_Init+0x204>
 80011a6:	2307      	movs	r3, #7
 80011a8:	e006      	b.n	80011b8 <HAL_GPIO_Init+0x204>
 80011aa:	2303      	movs	r3, #3
 80011ac:	e004      	b.n	80011b8 <HAL_GPIO_Init+0x204>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e002      	b.n	80011b8 <HAL_GPIO_Init+0x204>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <HAL_GPIO_Init+0x204>
 80011b6:	2300      	movs	r3, #0
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	f002 0203 	and.w	r2, r2, #3
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	4093      	lsls	r3, r2
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c8:	4935      	ldr	r1, [pc, #212]	; (80012a0 <HAL_GPIO_Init+0x2ec>)
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d6:	4b38      	ldr	r3, [pc, #224]	; (80012b8 <HAL_GPIO_Init+0x304>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011fa:	4a2f      	ldr	r2, [pc, #188]	; (80012b8 <HAL_GPIO_Init+0x304>)
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001200:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <HAL_GPIO_Init+0x304>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001224:	4a24      	ldr	r2, [pc, #144]	; (80012b8 <HAL_GPIO_Init+0x304>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800122a:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <HAL_GPIO_Init+0x304>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800124e:	4a1a      	ldr	r2, [pc, #104]	; (80012b8 <HAL_GPIO_Init+0x304>)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <HAL_GPIO_Init+0x304>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001278:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <HAL_GPIO_Init+0x304>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3301      	adds	r3, #1
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	f67f aea2 	bls.w	8000fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	40013800 	.word	0x40013800
 80012a4:	40020000 	.word	0x40020000
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020c00 	.word	0x40020c00
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40013c00 	.word	0x40013c00

080012bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
 80012c8:	4613      	mov	r3, r2
 80012ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012cc:	787b      	ldrb	r3, [r7, #1]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012d8:	e003      	b.n	80012e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	041a      	lsls	r2, r3, #16
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	619a      	str	r2, [r3, #24]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e267      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d075      	beq.n	80013fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800130e:	4b88      	ldr	r3, [pc, #544]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b04      	cmp	r3, #4
 8001318:	d00c      	beq.n	8001334 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800131a:	4b85      	ldr	r3, [pc, #532]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001322:	2b08      	cmp	r3, #8
 8001324:	d112      	bne.n	800134c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001326:	4b82      	ldr	r3, [pc, #520]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800132e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001332:	d10b      	bne.n	800134c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001334:	4b7e      	ldr	r3, [pc, #504]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d05b      	beq.n	80013f8 <HAL_RCC_OscConfig+0x108>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d157      	bne.n	80013f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e242      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001354:	d106      	bne.n	8001364 <HAL_RCC_OscConfig+0x74>
 8001356:	4b76      	ldr	r3, [pc, #472]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a75      	ldr	r2, [pc, #468]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e01d      	b.n	80013a0 <HAL_RCC_OscConfig+0xb0>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800136c:	d10c      	bne.n	8001388 <HAL_RCC_OscConfig+0x98>
 800136e:	4b70      	ldr	r3, [pc, #448]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a6f      	ldr	r2, [pc, #444]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	4b6d      	ldr	r3, [pc, #436]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a6c      	ldr	r2, [pc, #432]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e00b      	b.n	80013a0 <HAL_RCC_OscConfig+0xb0>
 8001388:	4b69      	ldr	r3, [pc, #420]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a68      	ldr	r2, [pc, #416]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 800138e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b66      	ldr	r3, [pc, #408]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a65      	ldr	r2, [pc, #404]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 800139a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d013      	beq.n	80013d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fc84 	bl	8000cb4 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff fc80 	bl	8000cb4 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	; 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e207      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c2:	4b5b      	ldr	r3, [pc, #364]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0xc0>
 80013ce:	e014      	b.n	80013fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fc70 	bl	8000cb4 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fc6c 	bl	8000cb4 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	; 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e1f3      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ea:	4b51      	ldr	r3, [pc, #324]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0xe8>
 80013f6:	e000      	b.n	80013fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d063      	beq.n	80014ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001406:	4b4a      	ldr	r3, [pc, #296]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00b      	beq.n	800142a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001412:	4b47      	ldr	r3, [pc, #284]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800141a:	2b08      	cmp	r3, #8
 800141c:	d11c      	bne.n	8001458 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800141e:	4b44      	ldr	r3, [pc, #272]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d116      	bne.n	8001458 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	4b41      	ldr	r3, [pc, #260]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d005      	beq.n	8001442 <HAL_RCC_OscConfig+0x152>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d001      	beq.n	8001442 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e1c7      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001442:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4937      	ldr	r1, [pc, #220]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001452:	4313      	orrs	r3, r2
 8001454:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001456:	e03a      	b.n	80014ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d020      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001460:	4b34      	ldr	r3, [pc, #208]	; (8001534 <HAL_RCC_OscConfig+0x244>)
 8001462:	2201      	movs	r2, #1
 8001464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001466:	f7ff fc25 	bl	8000cb4 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800146e:	f7ff fc21 	bl	8000cb4 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e1a8      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001480:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148c:	4b28      	ldr	r3, [pc, #160]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	4925      	ldr	r1, [pc, #148]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 800149c:	4313      	orrs	r3, r2
 800149e:	600b      	str	r3, [r1, #0]
 80014a0:	e015      	b.n	80014ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a2:	4b24      	ldr	r3, [pc, #144]	; (8001534 <HAL_RCC_OscConfig+0x244>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff fc04 	bl	8000cb4 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b0:	f7ff fc00 	bl	8000cb4 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e187      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c2:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d036      	beq.n	8001548 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d016      	beq.n	8001510 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <HAL_RCC_OscConfig+0x248>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e8:	f7ff fbe4 	bl	8000cb4 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f0:	f7ff fbe0 	bl	8000cb4 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e167      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0x200>
 800150e:	e01b      	b.n	8001548 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_RCC_OscConfig+0x248>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001516:	f7ff fbcd 	bl	8000cb4 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151c:	e00e      	b.n	800153c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800151e:	f7ff fbc9 	bl	8000cb4 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d907      	bls.n	800153c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e150      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
 8001530:	40023800 	.word	0x40023800
 8001534:	42470000 	.word	0x42470000
 8001538:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153c:	4b88      	ldr	r3, [pc, #544]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 800153e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1ea      	bne.n	800151e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 8097 	beq.w	8001684 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155a:	4b81      	ldr	r3, [pc, #516]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10f      	bne.n	8001586 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b7d      	ldr	r3, [pc, #500]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a7c      	ldr	r2, [pc, #496]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b7a      	ldr	r3, [pc, #488]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001582:	2301      	movs	r3, #1
 8001584:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001586:	4b77      	ldr	r3, [pc, #476]	; (8001764 <HAL_RCC_OscConfig+0x474>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158e:	2b00      	cmp	r3, #0
 8001590:	d118      	bne.n	80015c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001592:	4b74      	ldr	r3, [pc, #464]	; (8001764 <HAL_RCC_OscConfig+0x474>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a73      	ldr	r2, [pc, #460]	; (8001764 <HAL_RCC_OscConfig+0x474>)
 8001598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800159e:	f7ff fb89 	bl	8000cb4 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a6:	f7ff fb85 	bl	8000cb4 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e10c      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b8:	4b6a      	ldr	r3, [pc, #424]	; (8001764 <HAL_RCC_OscConfig+0x474>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d106      	bne.n	80015da <HAL_RCC_OscConfig+0x2ea>
 80015cc:	4b64      	ldr	r3, [pc, #400]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 80015ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d0:	4a63      	ldr	r2, [pc, #396]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6713      	str	r3, [r2, #112]	; 0x70
 80015d8:	e01c      	b.n	8001614 <HAL_RCC_OscConfig+0x324>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b05      	cmp	r3, #5
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0x30c>
 80015e2:	4b5f      	ldr	r3, [pc, #380]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 80015e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e6:	4a5e      	ldr	r2, [pc, #376]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6713      	str	r3, [r2, #112]	; 0x70
 80015ee:	4b5c      	ldr	r3, [pc, #368]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f2:	4a5b      	ldr	r2, [pc, #364]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6713      	str	r3, [r2, #112]	; 0x70
 80015fa:	e00b      	b.n	8001614 <HAL_RCC_OscConfig+0x324>
 80015fc:	4b58      	ldr	r3, [pc, #352]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 80015fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001600:	4a57      	ldr	r2, [pc, #348]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	6713      	str	r3, [r2, #112]	; 0x70
 8001608:	4b55      	ldr	r3, [pc, #340]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 800160a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160c:	4a54      	ldr	r2, [pc, #336]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 800160e:	f023 0304 	bic.w	r3, r3, #4
 8001612:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d015      	beq.n	8001648 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161c:	f7ff fb4a 	bl	8000cb4 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001622:	e00a      	b.n	800163a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001624:	f7ff fb46 	bl	8000cb4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e0cb      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800163a:	4b49      	ldr	r3, [pc, #292]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0ee      	beq.n	8001624 <HAL_RCC_OscConfig+0x334>
 8001646:	e014      	b.n	8001672 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001648:	f7ff fb34 	bl	8000cb4 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164e:	e00a      	b.n	8001666 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001650:	f7ff fb30 	bl	8000cb4 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f241 3288 	movw	r2, #5000	; 0x1388
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e0b5      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001666:	4b3e      	ldr	r3, [pc, #248]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 8001668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1ee      	bne.n	8001650 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001672:	7dfb      	ldrb	r3, [r7, #23]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d105      	bne.n	8001684 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001678:	4b39      	ldr	r3, [pc, #228]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	4a38      	ldr	r2, [pc, #224]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 800167e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001682:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80a1 	beq.w	80017d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800168e:	4b34      	ldr	r3, [pc, #208]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b08      	cmp	r3, #8
 8001698:	d05c      	beq.n	8001754 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d141      	bne.n	8001726 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a2:	4b31      	ldr	r3, [pc, #196]	; (8001768 <HAL_RCC_OscConfig+0x478>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fb04 	bl	8000cb4 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b0:	f7ff fb00 	bl	8000cb4 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e087      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c2:	4b27      	ldr	r3, [pc, #156]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69da      	ldr	r2, [r3, #28]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	019b      	lsls	r3, r3, #6
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	085b      	lsrs	r3, r3, #1
 80016e6:	3b01      	subs	r3, #1
 80016e8:	041b      	lsls	r3, r3, #16
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	061b      	lsls	r3, r3, #24
 80016f2:	491b      	ldr	r1, [pc, #108]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <HAL_RCC_OscConfig+0x478>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fe:	f7ff fad9 	bl	8000cb4 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001706:	f7ff fad5 	bl	8000cb4 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e05c      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x416>
 8001724:	e054      	b.n	80017d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <HAL_RCC_OscConfig+0x478>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fac2 	bl	8000cb4 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff fabe 	bl	8000cb4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e045      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x444>
 8001752:	e03d      	b.n	80017d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d107      	bne.n	800176c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e038      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
 8001760:	40023800 	.word	0x40023800
 8001764:	40007000 	.word	0x40007000
 8001768:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <HAL_RCC_OscConfig+0x4ec>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d028      	beq.n	80017cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d121      	bne.n	80017cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001792:	429a      	cmp	r2, r3
 8001794:	d11a      	bne.n	80017cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800179c:	4013      	ands	r3, r2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d111      	bne.n	80017cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b2:	085b      	lsrs	r3, r3, #1
 80017b4:	3b01      	subs	r3, #1
 80017b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d107      	bne.n	80017cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800

080017e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0cc      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f4:	4b68      	ldr	r3, [pc, #416]	; (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d90c      	bls.n	800181c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b65      	ldr	r3, [pc, #404]	; (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180a:	4b63      	ldr	r3, [pc, #396]	; (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d001      	beq.n	800181c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0b8      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d020      	beq.n	800186a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001834:	4b59      	ldr	r3, [pc, #356]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	4a58      	ldr	r2, [pc, #352]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800183e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800184c:	4b53      	ldr	r3, [pc, #332]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4a52      	ldr	r2, [pc, #328]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001856:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001858:	4b50      	ldr	r3, [pc, #320]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	494d      	ldr	r1, [pc, #308]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	4313      	orrs	r3, r2
 8001868:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d044      	beq.n	8001900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	4b47      	ldr	r3, [pc, #284]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d119      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e07f      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d003      	beq.n	800189e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800189a:	2b03      	cmp	r3, #3
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189e:	4b3f      	ldr	r3, [pc, #252]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e06f      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ae:	4b3b      	ldr	r3, [pc, #236]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e067      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018be:	4b37      	ldr	r3, [pc, #220]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f023 0203 	bic.w	r2, r3, #3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4934      	ldr	r1, [pc, #208]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d0:	f7ff f9f0 	bl	8000cb4 <HAL_GetTick>
 80018d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d6:	e00a      	b.n	80018ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d8:	f7ff f9ec 	bl	8000cb4 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e04f      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	4b2b      	ldr	r3, [pc, #172]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 020c 	and.w	r2, r3, #12
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d1eb      	bne.n	80018d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001900:	4b25      	ldr	r3, [pc, #148]	; (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d20c      	bcs.n	8001928 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190e:	4b22      	ldr	r3, [pc, #136]	; (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001916:	4b20      	ldr	r3, [pc, #128]	; (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d001      	beq.n	8001928 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e032      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d008      	beq.n	8001946 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	4916      	ldr	r1, [pc, #88]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d009      	beq.n	8001966 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	490e      	ldr	r1, [pc, #56]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001966:	f000 f821 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 800196a:	4602      	mov	r2, r0
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	490a      	ldr	r1, [pc, #40]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	5ccb      	ldrb	r3, [r1, r3]
 800197a:	fa22 f303 	lsr.w	r3, r2, r3
 800197e:	4a09      	ldr	r2, [pc, #36]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff f8a0 	bl	8000acc <HAL_InitTick>

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023c00 	.word	0x40023c00
 800199c:	40023800 	.word	0x40023800
 80019a0:	080061a0 	.word	0x080061a0
 80019a4:	20000000 	.word	0x20000000
 80019a8:	20000004 	.word	0x20000004

080019ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b0:	b090      	sub	sp, #64	; 0x40
 80019b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	637b      	str	r3, [r7, #52]	; 0x34
 80019b8:	2300      	movs	r3, #0
 80019ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019bc:	2300      	movs	r3, #0
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019c4:	4b59      	ldr	r3, [pc, #356]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d00d      	beq.n	80019ec <HAL_RCC_GetSysClockFreq+0x40>
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	f200 80a1 	bhi.w	8001b18 <HAL_RCC_GetSysClockFreq+0x16c>
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x34>
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d003      	beq.n	80019e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80019de:	e09b      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019e0:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x184>)
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80019e4:	e09b      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019e6:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x188>)
 80019e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019ea:	e098      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019ec:	4b4f      	ldr	r3, [pc, #316]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019f6:	4b4d      	ldr	r3, [pc, #308]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d028      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a02:	4b4a      	ldr	r3, [pc, #296]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	099b      	lsrs	r3, r3, #6
 8001a08:	2200      	movs	r2, #0
 8001a0a:	623b      	str	r3, [r7, #32]
 8001a0c:	627a      	str	r2, [r7, #36]	; 0x24
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a14:	2100      	movs	r1, #0
 8001a16:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a18:	fb03 f201 	mul.w	r2, r3, r1
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	fb00 f303 	mul.w	r3, r0, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	4a43      	ldr	r2, [pc, #268]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a26:	fba0 1202 	umull	r1, r2, r0, r2
 8001a2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a2c:	460a      	mov	r2, r1
 8001a2e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a32:	4413      	add	r3, r2
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a38:	2200      	movs	r2, #0
 8001a3a:	61bb      	str	r3, [r7, #24]
 8001a3c:	61fa      	str	r2, [r7, #28]
 8001a3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a46:	f7fe fbcb 	bl	80001e0 <__aeabi_uldivmod>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4613      	mov	r3, r2
 8001a50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a52:	e053      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a54:	4b35      	ldr	r3, [pc, #212]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	099b      	lsrs	r3, r3, #6
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	617a      	str	r2, [r7, #20]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a66:	f04f 0b00 	mov.w	fp, #0
 8001a6a:	4652      	mov	r2, sl
 8001a6c:	465b      	mov	r3, fp
 8001a6e:	f04f 0000 	mov.w	r0, #0
 8001a72:	f04f 0100 	mov.w	r1, #0
 8001a76:	0159      	lsls	r1, r3, #5
 8001a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a7c:	0150      	lsls	r0, r2, #5
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	ebb2 080a 	subs.w	r8, r2, sl
 8001a86:	eb63 090b 	sbc.w	r9, r3, fp
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a9e:	ebb2 0408 	subs.w	r4, r2, r8
 8001aa2:	eb63 0509 	sbc.w	r5, r3, r9
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	00eb      	lsls	r3, r5, #3
 8001ab0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ab4:	00e2      	lsls	r2, r4, #3
 8001ab6:	4614      	mov	r4, r2
 8001ab8:	461d      	mov	r5, r3
 8001aba:	eb14 030a 	adds.w	r3, r4, sl
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	eb45 030b 	adc.w	r3, r5, fp
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ad2:	4629      	mov	r1, r5
 8001ad4:	028b      	lsls	r3, r1, #10
 8001ad6:	4621      	mov	r1, r4
 8001ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001adc:	4621      	mov	r1, r4
 8001ade:	028a      	lsls	r2, r1, #10
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	60fa      	str	r2, [r7, #12]
 8001aec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001af0:	f7fe fb76 	bl	80001e0 <__aeabi_uldivmod>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4613      	mov	r3, r2
 8001afa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	0c1b      	lsrs	r3, r3, #16
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	3301      	adds	r3, #1
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001b0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b16:	e002      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b1a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3740      	adds	r7, #64	; 0x40
 8001b24:	46bd      	mov	sp, r7
 8001b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	00f42400 	.word	0x00f42400
 8001b34:	017d7840 	.word	0x017d7840

08001b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000000 	.word	0x20000000

08001b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b54:	f7ff fff0 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	0a9b      	lsrs	r3, r3, #10
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	4903      	ldr	r1, [pc, #12]	; (8001b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b66:	5ccb      	ldrb	r3, [r1, r3]
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40023800 	.word	0x40023800
 8001b74:	080061b0 	.word	0x080061b0

08001b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b7c:	f7ff ffdc 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	0b5b      	lsrs	r3, r3, #13
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	4903      	ldr	r1, [pc, #12]	; (8001b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b8e:	5ccb      	ldrb	r3, [r1, r3]
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	080061b0 	.word	0x080061b0

08001ba0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	220f      	movs	r2, #15
 8001bae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 0203 	and.w	r2, r3, #3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	08db      	lsrs	r3, r3, #3
 8001bda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <HAL_RCC_GetClockConfig+0x60>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0207 	and.w	r2, r3, #7
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	601a      	str	r2, [r3, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40023c00 	.word	0x40023c00

08001c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e041      	b.n	8001c9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d106      	bne.n	8001c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f839 	bl	8001ca2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	4619      	mov	r1, r3
 8001c42:	4610      	mov	r0, r2
 8001c44:	f000 f9ca 	bl	8001fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d001      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e044      	b.n	8001d5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1e      	ldr	r2, [pc, #120]	; (8001d68 <HAL_TIM_Base_Start_IT+0xb0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d018      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x6c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cfa:	d013      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x6c>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a1a      	ldr	r2, [pc, #104]	; (8001d6c <HAL_TIM_Base_Start_IT+0xb4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00e      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x6c>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d009      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x6c>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d004      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x6c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <HAL_TIM_Base_Start_IT+0xc0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d111      	bne.n	8001d48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d010      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 0201 	orr.w	r2, r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d46:	e007      	b.n	8001d58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40010000 	.word	0x40010000
 8001d6c:	40000400 	.word	0x40000400
 8001d70:	40000800 	.word	0x40000800
 8001d74:	40000c00 	.word	0x40000c00
 8001d78:	40014000 	.word	0x40014000

08001d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d122      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d11b      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0202 	mvn.w	r2, #2
 8001da8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f8ee 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001dc4:	e005      	b.n	8001dd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8e0 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f8f1 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d122      	bne.n	8001e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d11b      	bne.n	8001e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0204 	mvn.w	r2, #4
 8001dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2202      	movs	r2, #2
 8001e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f8c4 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001e18:	e005      	b.n	8001e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f8b6 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f8c7 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d122      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d11b      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0208 	mvn.w	r2, #8
 8001e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2204      	movs	r2, #4
 8001e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f89a 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001e6c:	e005      	b.n	8001e7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f88c 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f89d 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b10      	cmp	r3, #16
 8001e8c:	d122      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b10      	cmp	r3, #16
 8001e9a:	d11b      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0210 	mvn.w	r2, #16
 8001ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f870 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001ec0:	e005      	b.n	8001ece <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f862 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f873 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d10e      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d107      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0201 	mvn.w	r2, #1
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe fcaa 	bl	8000854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0a:	2b80      	cmp	r3, #128	; 0x80
 8001f0c:	d10e      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f18:	2b80      	cmp	r3, #128	; 0x80
 8001f1a:	d107      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f8e2 	bl	80020f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f36:	2b40      	cmp	r3, #64	; 0x40
 8001f38:	d10e      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f44:	2b40      	cmp	r3, #64	; 0x40
 8001f46:	d107      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f838 	bl	8001fc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	2b20      	cmp	r3, #32
 8001f64:	d10e      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	2b20      	cmp	r3, #32
 8001f72:	d107      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0220 	mvn.w	r2, #32
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8ac 	bl	80020dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a34      	ldr	r2, [pc, #208]	; (80020c0 <TIM_Base_SetConfig+0xe4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d00f      	beq.n	8002014 <TIM_Base_SetConfig+0x38>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ffa:	d00b      	beq.n	8002014 <TIM_Base_SetConfig+0x38>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a31      	ldr	r2, [pc, #196]	; (80020c4 <TIM_Base_SetConfig+0xe8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d007      	beq.n	8002014 <TIM_Base_SetConfig+0x38>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a30      	ldr	r2, [pc, #192]	; (80020c8 <TIM_Base_SetConfig+0xec>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d003      	beq.n	8002014 <TIM_Base_SetConfig+0x38>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a2f      	ldr	r2, [pc, #188]	; (80020cc <TIM_Base_SetConfig+0xf0>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d108      	bne.n	8002026 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800201a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a25      	ldr	r2, [pc, #148]	; (80020c0 <TIM_Base_SetConfig+0xe4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d01b      	beq.n	8002066 <TIM_Base_SetConfig+0x8a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002034:	d017      	beq.n	8002066 <TIM_Base_SetConfig+0x8a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a22      	ldr	r2, [pc, #136]	; (80020c4 <TIM_Base_SetConfig+0xe8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d013      	beq.n	8002066 <TIM_Base_SetConfig+0x8a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a21      	ldr	r2, [pc, #132]	; (80020c8 <TIM_Base_SetConfig+0xec>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00f      	beq.n	8002066 <TIM_Base_SetConfig+0x8a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a20      	ldr	r2, [pc, #128]	; (80020cc <TIM_Base_SetConfig+0xf0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00b      	beq.n	8002066 <TIM_Base_SetConfig+0x8a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a1f      	ldr	r2, [pc, #124]	; (80020d0 <TIM_Base_SetConfig+0xf4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <TIM_Base_SetConfig+0x8a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a1e      	ldr	r2, [pc, #120]	; (80020d4 <TIM_Base_SetConfig+0xf8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d003      	beq.n	8002066 <TIM_Base_SetConfig+0x8a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a1d      	ldr	r2, [pc, #116]	; (80020d8 <TIM_Base_SetConfig+0xfc>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d108      	bne.n	8002078 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800206c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4313      	orrs	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	4313      	orrs	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a08      	ldr	r2, [pc, #32]	; (80020c0 <TIM_Base_SetConfig+0xe4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d103      	bne.n	80020ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	615a      	str	r2, [r3, #20]
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40010000 	.word	0x40010000
 80020c4:	40000400 	.word	0x40000400
 80020c8:	40000800 	.word	0x40000800
 80020cc:	40000c00 	.word	0x40000c00
 80020d0:	40014000 	.word	0x40014000
 80020d4:	40014400 	.word	0x40014400
 80020d8:	40014800 	.word	0x40014800

080020dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e03f      	b.n	8002196 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe fc7e 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2224      	movs	r2, #36	; 0x24
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002146:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 fd7b 	bl	8002c44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800215c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695a      	ldr	r2, [r3, #20]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800216c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800217c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b08a      	sub	sp, #40	; 0x28
 80021a2:	af02      	add	r7, sp, #8
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	4613      	mov	r3, r2
 80021ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b20      	cmp	r3, #32
 80021bc:	d17c      	bne.n	80022b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <HAL_UART_Transmit+0x2c>
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e075      	b.n	80022ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_UART_Transmit+0x3e>
 80021d8:	2302      	movs	r3, #2
 80021da:	e06e      	b.n	80022ba <HAL_UART_Transmit+0x11c>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2221      	movs	r2, #33	; 0x21
 80021ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021f2:	f7fe fd5f 	bl	8000cb4 <HAL_GetTick>
 80021f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	88fa      	ldrh	r2, [r7, #6]
 80021fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	88fa      	ldrh	r2, [r7, #6]
 8002202:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800220c:	d108      	bne.n	8002220 <HAL_UART_Transmit+0x82>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d104      	bne.n	8002220 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	61bb      	str	r3, [r7, #24]
 800221e:	e003      	b.n	8002228 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002230:	e02a      	b.n	8002288 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2200      	movs	r2, #0
 800223a:	2180      	movs	r1, #128	; 0x80
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 faf9 	bl	8002834 <UART_WaitOnFlagUntilTimeout>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e036      	b.n	80022ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10b      	bne.n	800226a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002260:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	3302      	adds	r3, #2
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	e007      	b.n	800227a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	781a      	ldrb	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	3301      	adds	r3, #1
 8002278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1cf      	bne.n	8002232 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2200      	movs	r2, #0
 800229a:	2140      	movs	r1, #64	; 0x40
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 fac9 	bl	8002834 <UART_WaitOnFlagUntilTimeout>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e006      	b.n	80022ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	e000      	b.n	80022ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022b8:	2302      	movs	r3, #2
  }
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3720      	adds	r7, #32
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b0ba      	sub	sp, #232	; 0xe8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10f      	bne.n	800232a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800230a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800230e:	f003 0320 	and.w	r3, r3, #32
 8002312:	2b00      	cmp	r3, #0
 8002314:	d009      	beq.n	800232a <HAL_UART_IRQHandler+0x66>
 8002316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800231a:	f003 0320 	and.w	r3, r3, #32
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fbd3 	bl	8002ace <UART_Receive_IT>
      return;
 8002328:	e256      	b.n	80027d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800232a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 80de 	beq.w	80024f0 <HAL_UART_IRQHandler+0x22c>
 8002334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d106      	bne.n	800234e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002344:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80d1 	beq.w	80024f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800234e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00b      	beq.n	8002372 <HAL_UART_IRQHandler+0xae>
 800235a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f043 0201 	orr.w	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00b      	beq.n	8002396 <HAL_UART_IRQHandler+0xd2>
 800237e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f043 0202 	orr.w	r2, r3, #2
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00b      	beq.n	80023ba <HAL_UART_IRQHandler+0xf6>
 80023a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f043 0204 	orr.w	r2, r3, #4
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80023ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d011      	beq.n	80023ea <HAL_UART_IRQHandler+0x126>
 80023c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023ca:	f003 0320 	and.w	r3, r3, #32
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d105      	bne.n	80023de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80023d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f043 0208 	orr.w	r2, r3, #8
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 81ed 	beq.w	80027ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_UART_IRQHandler+0x14e>
 8002400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 fb5e 	bl	8002ace <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241c:	2b40      	cmp	r3, #64	; 0x40
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d103      	bne.n	800243e <HAL_UART_IRQHandler+0x17a>
 8002436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800243a:	2b00      	cmp	r3, #0
 800243c:	d04f      	beq.n	80024de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fa66 	bl	8002910 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244e:	2b40      	cmp	r3, #64	; 0x40
 8002450:	d141      	bne.n	80024d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	3314      	adds	r3, #20
 8002458:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800245c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002460:	e853 3f00 	ldrex	r3, [r3]
 8002464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002468:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800246c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002470:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	3314      	adds	r3, #20
 800247a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800247e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002482:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002486:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800248a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800248e:	e841 2300 	strex	r3, r2, [r1]
 8002492:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1d9      	bne.n	8002452 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d013      	beq.n	80024ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024aa:	4a7d      	ldr	r2, [pc, #500]	; (80026a0 <HAL_UART_IRQHandler+0x3dc>)
 80024ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe fd5c 	bl	8000f70 <HAL_DMA_Abort_IT>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d016      	beq.n	80024ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024c8:	4610      	mov	r0, r2
 80024ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024cc:	e00e      	b.n	80024ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f99a 	bl	8002808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d4:	e00a      	b.n	80024ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f996 	bl	8002808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024dc:	e006      	b.n	80024ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f992 	bl	8002808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80024ea:	e170      	b.n	80027ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ec:	bf00      	nop
    return;
 80024ee:	e16e      	b.n	80027ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	f040 814a 	bne.w	800278e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80024fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 8143 	beq.w	800278e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 813c 	beq.w	800278e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002536:	2b40      	cmp	r3, #64	; 0x40
 8002538:	f040 80b4 	bne.w	80026a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002548:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8140 	beq.w	80027d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800255a:	429a      	cmp	r2, r3
 800255c:	f080 8139 	bcs.w	80027d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002566:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002572:	f000 8088 	beq.w	8002686 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	330c      	adds	r3, #12
 800257c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002580:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002584:	e853 3f00 	ldrex	r3, [r3]
 8002588:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800258c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	330c      	adds	r3, #12
 800259e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80025a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80025a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80025ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025b2:	e841 2300 	strex	r3, r2, [r1]
 80025b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80025ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1d9      	bne.n	8002576 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	3314      	adds	r3, #20
 80025c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025cc:	e853 3f00 	ldrex	r3, [r3]
 80025d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80025d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025d4:	f023 0301 	bic.w	r3, r3, #1
 80025d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	3314      	adds	r3, #20
 80025e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80025ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80025ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80025f2:	e841 2300 	strex	r3, r2, [r1]
 80025f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80025f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1e1      	bne.n	80025c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	3314      	adds	r3, #20
 8002604:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002608:	e853 3f00 	ldrex	r3, [r3]
 800260c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800260e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	3314      	adds	r3, #20
 800261e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002622:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002624:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002626:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002628:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800262a:	e841 2300 	strex	r3, r2, [r1]
 800262e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1e3      	bne.n	80025fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	330c      	adds	r3, #12
 800264a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800264c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800264e:	e853 3f00 	ldrex	r3, [r3]
 8002652:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002656:	f023 0310 	bic.w	r3, r3, #16
 800265a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	330c      	adds	r3, #12
 8002664:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002668:	65ba      	str	r2, [r7, #88]	; 0x58
 800266a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800266e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002670:	e841 2300 	strex	r3, r2, [r1]
 8002674:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1e3      	bne.n	8002644 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fc05 	bl	8000e90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800268e:	b29b      	uxth	r3, r3
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	b29b      	uxth	r3, r3
 8002694:	4619      	mov	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f8c0 	bl	800281c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800269c:	e099      	b.n	80027d2 <HAL_UART_IRQHandler+0x50e>
 800269e:	bf00      	nop
 80026a0:	080029d7 	.word	0x080029d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 808b 	beq.w	80027d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80026c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 8086 	beq.w	80027d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	330c      	adds	r3, #12
 80026d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d4:	e853 3f00 	ldrex	r3, [r3]
 80026d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80026da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	330c      	adds	r3, #12
 80026ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80026ee:	647a      	str	r2, [r7, #68]	; 0x44
 80026f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026f6:	e841 2300 	strex	r3, r2, [r1]
 80026fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80026fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1e3      	bne.n	80026ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	3314      	adds	r3, #20
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	e853 3f00 	ldrex	r3, [r3]
 8002710:	623b      	str	r3, [r7, #32]
   return(result);
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	3314      	adds	r3, #20
 8002722:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002726:	633a      	str	r2, [r7, #48]	; 0x30
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800272c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800272e:	e841 2300 	strex	r3, r2, [r1]
 8002732:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1e3      	bne.n	8002702 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	330c      	adds	r3, #12
 800274e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	e853 3f00 	ldrex	r3, [r3]
 8002756:	60fb      	str	r3, [r7, #12]
   return(result);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f023 0310 	bic.w	r3, r3, #16
 800275e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	330c      	adds	r3, #12
 8002768:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800276c:	61fa      	str	r2, [r7, #28]
 800276e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002770:	69b9      	ldr	r1, [r7, #24]
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	e841 2300 	strex	r3, r2, [r1]
 8002778:	617b      	str	r3, [r7, #20]
   return(result);
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1e3      	bne.n	8002748 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002780:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002784:	4619      	mov	r1, r3
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f848 	bl	800281c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800278c:	e023      	b.n	80027d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800278e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <HAL_UART_IRQHandler+0x4ea>
 800279a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800279e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f929 	bl	80029fe <UART_Transmit_IT>
    return;
 80027ac:	e014      	b.n	80027d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00e      	beq.n	80027d8 <HAL_UART_IRQHandler+0x514>
 80027ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f969 	bl	8002a9e <UART_EndTransmit_IT>
    return;
 80027cc:	e004      	b.n	80027d8 <HAL_UART_IRQHandler+0x514>
    return;
 80027ce:	bf00      	nop
 80027d0:	e002      	b.n	80027d8 <HAL_UART_IRQHandler+0x514>
      return;
 80027d2:	bf00      	nop
 80027d4:	e000      	b.n	80027d8 <HAL_UART_IRQHandler+0x514>
      return;
 80027d6:	bf00      	nop
  }
}
 80027d8:	37e8      	adds	r7, #232	; 0xe8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop

080027e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b090      	sub	sp, #64	; 0x40
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	4613      	mov	r3, r2
 8002842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002844:	e050      	b.n	80028e8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284c:	d04c      	beq.n	80028e8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800284e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002850:	2b00      	cmp	r3, #0
 8002852:	d007      	beq.n	8002864 <UART_WaitOnFlagUntilTimeout+0x30>
 8002854:	f7fe fa2e 	bl	8000cb4 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002860:	429a      	cmp	r2, r3
 8002862:	d241      	bcs.n	80028e8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	330c      	adds	r3, #12
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286e:	e853 3f00 	ldrex	r3, [r3]
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800287a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	330c      	adds	r3, #12
 8002882:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002884:	637a      	str	r2, [r7, #52]	; 0x34
 8002886:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002888:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800288a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800288c:	e841 2300 	strex	r3, r2, [r1]
 8002890:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1e5      	bne.n	8002864 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3314      	adds	r3, #20
 800289e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	e853 3f00 	ldrex	r3, [r3]
 80028a6:	613b      	str	r3, [r7, #16]
   return(result);
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	f023 0301 	bic.w	r3, r3, #1
 80028ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	3314      	adds	r3, #20
 80028b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028b8:	623a      	str	r2, [r7, #32]
 80028ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028bc:	69f9      	ldr	r1, [r7, #28]
 80028be:	6a3a      	ldr	r2, [r7, #32]
 80028c0:	e841 2300 	strex	r3, r2, [r1]
 80028c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1e5      	bne.n	8002898 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e00f      	b.n	8002908 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	4013      	ands	r3, r2
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	461a      	mov	r2, r3
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	429a      	cmp	r2, r3
 8002904:	d09f      	beq.n	8002846 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3740      	adds	r7, #64	; 0x40
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002910:	b480      	push	{r7}
 8002912:	b095      	sub	sp, #84	; 0x54
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	330c      	adds	r3, #12
 800291e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002922:	e853 3f00 	ldrex	r3, [r3]
 8002926:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800292e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	330c      	adds	r3, #12
 8002936:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002938:	643a      	str	r2, [r7, #64]	; 0x40
 800293a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800293e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002940:	e841 2300 	strex	r3, r2, [r1]
 8002944:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1e5      	bne.n	8002918 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3314      	adds	r3, #20
 8002952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	e853 3f00 	ldrex	r3, [r3]
 800295a:	61fb      	str	r3, [r7, #28]
   return(result);
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f023 0301 	bic.w	r3, r3, #1
 8002962:	64bb      	str	r3, [r7, #72]	; 0x48
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3314      	adds	r3, #20
 800296a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800296c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002974:	e841 2300 	strex	r3, r2, [r1]
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1e5      	bne.n	800294c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	2b01      	cmp	r3, #1
 8002986:	d119      	bne.n	80029bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	330c      	adds	r3, #12
 800298e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	e853 3f00 	ldrex	r3, [r3]
 8002996:	60bb      	str	r3, [r7, #8]
   return(result);
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f023 0310 	bic.w	r3, r3, #16
 800299e:	647b      	str	r3, [r7, #68]	; 0x44
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	330c      	adds	r3, #12
 80029a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029a8:	61ba      	str	r2, [r7, #24]
 80029aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ac:	6979      	ldr	r1, [r7, #20]
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	e841 2300 	strex	r3, r2, [r1]
 80029b4:	613b      	str	r3, [r7, #16]
   return(result);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1e5      	bne.n	8002988 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80029ca:	bf00      	nop
 80029cc:	3754      	adds	r7, #84	; 0x54
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b084      	sub	sp, #16
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f7ff ff09 	bl	8002808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b21      	cmp	r3, #33	; 0x21
 8002a10:	d13e      	bne.n	8002a90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1a:	d114      	bne.n	8002a46 <UART_Transmit_IT+0x48>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d110      	bne.n	8002a46 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	1c9a      	adds	r2, r3, #2
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	621a      	str	r2, [r3, #32]
 8002a44:	e008      	b.n	8002a58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	1c59      	adds	r1, r3, #1
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6211      	str	r1, [r2, #32]
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	4619      	mov	r1, r3
 8002a66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10f      	bne.n	8002a8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	e000      	b.n	8002a92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a90:	2302      	movs	r3, #2
  }
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ab4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff fe8e 	bl	80027e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b08c      	sub	sp, #48	; 0x30
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b22      	cmp	r3, #34	; 0x22
 8002ae0:	f040 80ab 	bne.w	8002c3a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aec:	d117      	bne.n	8002b1e <UART_Receive_IT+0x50>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d113      	bne.n	8002b1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	1c9a      	adds	r2, r3, #2
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b1c:	e026      	b.n	8002b6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b30:	d007      	beq.n	8002b42 <UART_Receive_IT+0x74>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10a      	bne.n	8002b50 <UART_Receive_IT+0x82>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	e008      	b.n	8002b62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d15a      	bne.n	8002c36 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0220 	bic.w	r2, r2, #32
 8002b8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d135      	bne.n	8002c2c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	330c      	adds	r3, #12
 8002bcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	e853 3f00 	ldrex	r3, [r3]
 8002bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f023 0310 	bic.w	r3, r3, #16
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	330c      	adds	r3, #12
 8002be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be6:	623a      	str	r2, [r7, #32]
 8002be8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bea:	69f9      	ldr	r1, [r7, #28]
 8002bec:	6a3a      	ldr	r2, [r7, #32]
 8002bee:	e841 2300 	strex	r3, r2, [r1]
 8002bf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1e5      	bne.n	8002bc6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b10      	cmp	r3, #16
 8002c06:	d10a      	bne.n	8002c1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c22:	4619      	mov	r1, r3
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff fdf9 	bl	800281c <HAL_UARTEx_RxEventCallback>
 8002c2a:	e002      	b.n	8002c32 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff fde1 	bl	80027f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e002      	b.n	8002c3c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e000      	b.n	8002c3c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002c3a:	2302      	movs	r3, #2
  }
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3730      	adds	r7, #48	; 0x30
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c48:	b0c0      	sub	sp, #256	; 0x100
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c60:	68d9      	ldr	r1, [r3, #12]
 8002c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	ea40 0301 	orr.w	r3, r0, r1
 8002c6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c9c:	f021 010c 	bic.w	r1, r1, #12
 8002ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002caa:	430b      	orrs	r3, r1
 8002cac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cbe:	6999      	ldr	r1, [r3, #24]
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	ea40 0301 	orr.w	r3, r0, r1
 8002cca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	4b8f      	ldr	r3, [pc, #572]	; (8002f10 <UART_SetConfig+0x2cc>)
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d005      	beq.n	8002ce4 <UART_SetConfig+0xa0>
 8002cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	4b8d      	ldr	r3, [pc, #564]	; (8002f14 <UART_SetConfig+0x2d0>)
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d104      	bne.n	8002cee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ce4:	f7fe ff48 	bl	8001b78 <HAL_RCC_GetPCLK2Freq>
 8002ce8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002cec:	e003      	b.n	8002cf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cee:	f7fe ff2f 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 8002cf2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d00:	f040 810c 	bne.w	8002f1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d16:	4622      	mov	r2, r4
 8002d18:	462b      	mov	r3, r5
 8002d1a:	1891      	adds	r1, r2, r2
 8002d1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d1e:	415b      	adcs	r3, r3
 8002d20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d26:	4621      	mov	r1, r4
 8002d28:	eb12 0801 	adds.w	r8, r2, r1
 8002d2c:	4629      	mov	r1, r5
 8002d2e:	eb43 0901 	adc.w	r9, r3, r1
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d46:	4690      	mov	r8, r2
 8002d48:	4699      	mov	r9, r3
 8002d4a:	4623      	mov	r3, r4
 8002d4c:	eb18 0303 	adds.w	r3, r8, r3
 8002d50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d54:	462b      	mov	r3, r5
 8002d56:	eb49 0303 	adc.w	r3, r9, r3
 8002d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d72:	460b      	mov	r3, r1
 8002d74:	18db      	adds	r3, r3, r3
 8002d76:	653b      	str	r3, [r7, #80]	; 0x50
 8002d78:	4613      	mov	r3, r2
 8002d7a:	eb42 0303 	adc.w	r3, r2, r3
 8002d7e:	657b      	str	r3, [r7, #84]	; 0x54
 8002d80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d88:	f7fd fa2a 	bl	80001e0 <__aeabi_uldivmod>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4b61      	ldr	r3, [pc, #388]	; (8002f18 <UART_SetConfig+0x2d4>)
 8002d92:	fba3 2302 	umull	r2, r3, r3, r2
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	011c      	lsls	r4, r3, #4
 8002d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002da4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002da8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002dac:	4642      	mov	r2, r8
 8002dae:	464b      	mov	r3, r9
 8002db0:	1891      	adds	r1, r2, r2
 8002db2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002db4:	415b      	adcs	r3, r3
 8002db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002db8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002dbc:	4641      	mov	r1, r8
 8002dbe:	eb12 0a01 	adds.w	sl, r2, r1
 8002dc2:	4649      	mov	r1, r9
 8002dc4:	eb43 0b01 	adc.w	fp, r3, r1
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ddc:	4692      	mov	sl, r2
 8002dde:	469b      	mov	fp, r3
 8002de0:	4643      	mov	r3, r8
 8002de2:	eb1a 0303 	adds.w	r3, sl, r3
 8002de6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dea:	464b      	mov	r3, r9
 8002dec:	eb4b 0303 	adc.w	r3, fp, r3
 8002df0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	18db      	adds	r3, r3, r3
 8002e0c:	643b      	str	r3, [r7, #64]	; 0x40
 8002e0e:	4613      	mov	r3, r2
 8002e10:	eb42 0303 	adc.w	r3, r2, r3
 8002e14:	647b      	str	r3, [r7, #68]	; 0x44
 8002e16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e1e:	f7fd f9df 	bl	80001e0 <__aeabi_uldivmod>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4611      	mov	r1, r2
 8002e28:	4b3b      	ldr	r3, [pc, #236]	; (8002f18 <UART_SetConfig+0x2d4>)
 8002e2a:	fba3 2301 	umull	r2, r3, r3, r1
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	2264      	movs	r2, #100	; 0x64
 8002e32:	fb02 f303 	mul.w	r3, r2, r3
 8002e36:	1acb      	subs	r3, r1, r3
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e3e:	4b36      	ldr	r3, [pc, #216]	; (8002f18 <UART_SetConfig+0x2d4>)
 8002e40:	fba3 2302 	umull	r2, r3, r3, r2
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e4c:	441c      	add	r4, r3
 8002e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e52:	2200      	movs	r2, #0
 8002e54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e60:	4642      	mov	r2, r8
 8002e62:	464b      	mov	r3, r9
 8002e64:	1891      	adds	r1, r2, r2
 8002e66:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e68:	415b      	adcs	r3, r3
 8002e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e70:	4641      	mov	r1, r8
 8002e72:	1851      	adds	r1, r2, r1
 8002e74:	6339      	str	r1, [r7, #48]	; 0x30
 8002e76:	4649      	mov	r1, r9
 8002e78:	414b      	adcs	r3, r1
 8002e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e88:	4659      	mov	r1, fp
 8002e8a:	00cb      	lsls	r3, r1, #3
 8002e8c:	4651      	mov	r1, sl
 8002e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e92:	4651      	mov	r1, sl
 8002e94:	00ca      	lsls	r2, r1, #3
 8002e96:	4610      	mov	r0, r2
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4642      	mov	r2, r8
 8002e9e:	189b      	adds	r3, r3, r2
 8002ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ea4:	464b      	mov	r3, r9
 8002ea6:	460a      	mov	r2, r1
 8002ea8:	eb42 0303 	adc.w	r3, r2, r3
 8002eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ebc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ec0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	18db      	adds	r3, r3, r3
 8002ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eca:	4613      	mov	r3, r2
 8002ecc:	eb42 0303 	adc.w	r3, r2, r3
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ed2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ed6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002eda:	f7fd f981 	bl	80001e0 <__aeabi_uldivmod>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <UART_SetConfig+0x2d4>)
 8002ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	2164      	movs	r1, #100	; 0x64
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	3332      	adds	r3, #50	; 0x32
 8002ef6:	4a08      	ldr	r2, [pc, #32]	; (8002f18 <UART_SetConfig+0x2d4>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	f003 0207 	and.w	r2, r3, #7
 8002f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4422      	add	r2, r4
 8002f0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f0c:	e105      	b.n	800311a <UART_SetConfig+0x4d6>
 8002f0e:	bf00      	nop
 8002f10:	40011000 	.word	0x40011000
 8002f14:	40011400 	.word	0x40011400
 8002f18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f20:	2200      	movs	r2, #0
 8002f22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f2e:	4642      	mov	r2, r8
 8002f30:	464b      	mov	r3, r9
 8002f32:	1891      	adds	r1, r2, r2
 8002f34:	6239      	str	r1, [r7, #32]
 8002f36:	415b      	adcs	r3, r3
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f3e:	4641      	mov	r1, r8
 8002f40:	1854      	adds	r4, r2, r1
 8002f42:	4649      	mov	r1, r9
 8002f44:	eb43 0501 	adc.w	r5, r3, r1
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	00eb      	lsls	r3, r5, #3
 8002f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f56:	00e2      	lsls	r2, r4, #3
 8002f58:	4614      	mov	r4, r2
 8002f5a:	461d      	mov	r5, r3
 8002f5c:	4643      	mov	r3, r8
 8002f5e:	18e3      	adds	r3, r4, r3
 8002f60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f64:	464b      	mov	r3, r9
 8002f66:	eb45 0303 	adc.w	r3, r5, r3
 8002f6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f8a:	4629      	mov	r1, r5
 8002f8c:	008b      	lsls	r3, r1, #2
 8002f8e:	4621      	mov	r1, r4
 8002f90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f94:	4621      	mov	r1, r4
 8002f96:	008a      	lsls	r2, r1, #2
 8002f98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f9c:	f7fd f920 	bl	80001e0 <__aeabi_uldivmod>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4b60      	ldr	r3, [pc, #384]	; (8003128 <UART_SetConfig+0x4e4>)
 8002fa6:	fba3 2302 	umull	r2, r3, r3, r2
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	011c      	lsls	r4, r3, #4
 8002fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002fc0:	4642      	mov	r2, r8
 8002fc2:	464b      	mov	r3, r9
 8002fc4:	1891      	adds	r1, r2, r2
 8002fc6:	61b9      	str	r1, [r7, #24]
 8002fc8:	415b      	adcs	r3, r3
 8002fca:	61fb      	str	r3, [r7, #28]
 8002fcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fd0:	4641      	mov	r1, r8
 8002fd2:	1851      	adds	r1, r2, r1
 8002fd4:	6139      	str	r1, [r7, #16]
 8002fd6:	4649      	mov	r1, r9
 8002fd8:	414b      	adcs	r3, r1
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fe8:	4659      	mov	r1, fp
 8002fea:	00cb      	lsls	r3, r1, #3
 8002fec:	4651      	mov	r1, sl
 8002fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ff2:	4651      	mov	r1, sl
 8002ff4:	00ca      	lsls	r2, r1, #3
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4642      	mov	r2, r8
 8002ffe:	189b      	adds	r3, r3, r2
 8003000:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003004:	464b      	mov	r3, r9
 8003006:	460a      	mov	r2, r1
 8003008:	eb42 0303 	adc.w	r3, r2, r3
 800300c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	67bb      	str	r3, [r7, #120]	; 0x78
 800301a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003028:	4649      	mov	r1, r9
 800302a:	008b      	lsls	r3, r1, #2
 800302c:	4641      	mov	r1, r8
 800302e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003032:	4641      	mov	r1, r8
 8003034:	008a      	lsls	r2, r1, #2
 8003036:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800303a:	f7fd f8d1 	bl	80001e0 <__aeabi_uldivmod>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4b39      	ldr	r3, [pc, #228]	; (8003128 <UART_SetConfig+0x4e4>)
 8003044:	fba3 1302 	umull	r1, r3, r3, r2
 8003048:	095b      	lsrs	r3, r3, #5
 800304a:	2164      	movs	r1, #100	; 0x64
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	3332      	adds	r3, #50	; 0x32
 8003056:	4a34      	ldr	r2, [pc, #208]	; (8003128 <UART_SetConfig+0x4e4>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	095b      	lsrs	r3, r3, #5
 800305e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003062:	441c      	add	r4, r3
 8003064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003068:	2200      	movs	r2, #0
 800306a:	673b      	str	r3, [r7, #112]	; 0x70
 800306c:	677a      	str	r2, [r7, #116]	; 0x74
 800306e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003072:	4642      	mov	r2, r8
 8003074:	464b      	mov	r3, r9
 8003076:	1891      	adds	r1, r2, r2
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	415b      	adcs	r3, r3
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003082:	4641      	mov	r1, r8
 8003084:	1851      	adds	r1, r2, r1
 8003086:	6039      	str	r1, [r7, #0]
 8003088:	4649      	mov	r1, r9
 800308a:	414b      	adcs	r3, r1
 800308c:	607b      	str	r3, [r7, #4]
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800309a:	4659      	mov	r1, fp
 800309c:	00cb      	lsls	r3, r1, #3
 800309e:	4651      	mov	r1, sl
 80030a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030a4:	4651      	mov	r1, sl
 80030a6:	00ca      	lsls	r2, r1, #3
 80030a8:	4610      	mov	r0, r2
 80030aa:	4619      	mov	r1, r3
 80030ac:	4603      	mov	r3, r0
 80030ae:	4642      	mov	r2, r8
 80030b0:	189b      	adds	r3, r3, r2
 80030b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80030b4:	464b      	mov	r3, r9
 80030b6:	460a      	mov	r2, r1
 80030b8:	eb42 0303 	adc.w	r3, r2, r3
 80030bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	663b      	str	r3, [r7, #96]	; 0x60
 80030c8:	667a      	str	r2, [r7, #100]	; 0x64
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030d6:	4649      	mov	r1, r9
 80030d8:	008b      	lsls	r3, r1, #2
 80030da:	4641      	mov	r1, r8
 80030dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030e0:	4641      	mov	r1, r8
 80030e2:	008a      	lsls	r2, r1, #2
 80030e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030e8:	f7fd f87a 	bl	80001e0 <__aeabi_uldivmod>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <UART_SetConfig+0x4e4>)
 80030f2:	fba3 1302 	umull	r1, r3, r3, r2
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	2164      	movs	r1, #100	; 0x64
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	3332      	adds	r3, #50	; 0x32
 8003104:	4a08      	ldr	r2, [pc, #32]	; (8003128 <UART_SetConfig+0x4e4>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	f003 020f 	and.w	r2, r3, #15
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4422      	add	r2, r4
 8003118:	609a      	str	r2, [r3, #8]
}
 800311a:	bf00      	nop
 800311c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003120:	46bd      	mov	sp, r7
 8003122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003126:	bf00      	nop
 8003128:	51eb851f 	.word	0x51eb851f

0800312c <__NVIC_SetPriority>:
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	6039      	str	r1, [r7, #0]
 8003136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313c:	2b00      	cmp	r3, #0
 800313e:	db0a      	blt.n	8003156 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	b2da      	uxtb	r2, r3
 8003144:	490c      	ldr	r1, [pc, #48]	; (8003178 <__NVIC_SetPriority+0x4c>)
 8003146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314a:	0112      	lsls	r2, r2, #4
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	440b      	add	r3, r1
 8003150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003154:	e00a      	b.n	800316c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4908      	ldr	r1, [pc, #32]	; (800317c <__NVIC_SetPriority+0x50>)
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	3b04      	subs	r3, #4
 8003164:	0112      	lsls	r2, r2, #4
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	440b      	add	r3, r1
 800316a:	761a      	strb	r2, [r3, #24]
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000e100 	.word	0xe000e100
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <SysTick_Handler+0x1c>)
 8003186:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003188:	f001 fe52 	bl	8004e30 <xTaskGetSchedulerState>
 800318c:	4603      	mov	r3, r0
 800318e:	2b01      	cmp	r3, #1
 8003190:	d001      	beq.n	8003196 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003192:	f002 fc39 	bl	8005a08 <xPortSysTickHandler>
  }
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	e000e010 	.word	0xe000e010

080031a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80031a4:	2100      	movs	r1, #0
 80031a6:	f06f 0004 	mvn.w	r0, #4
 80031aa:	f7ff ffbf 	bl	800312c <__NVIC_SetPriority>
#endif
}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031ba:	f3ef 8305 	mrs	r3, IPSR
 80031be:	603b      	str	r3, [r7, #0]
  return(result);
 80031c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80031c6:	f06f 0305 	mvn.w	r3, #5
 80031ca:	607b      	str	r3, [r7, #4]
 80031cc:	e00c      	b.n	80031e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <osKernelInitialize+0x44>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d105      	bne.n	80031e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80031d6:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <osKernelInitialize+0x44>)
 80031d8:	2201      	movs	r2, #1
 80031da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80031dc:	2300      	movs	r3, #0
 80031de:	607b      	str	r3, [r7, #4]
 80031e0:	e002      	b.n	80031e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80031e2:	f04f 33ff 	mov.w	r3, #4294967295
 80031e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80031e8:	687b      	ldr	r3, [r7, #4]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	200001a4 	.word	0x200001a4

080031fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003202:	f3ef 8305 	mrs	r3, IPSR
 8003206:	603b      	str	r3, [r7, #0]
  return(result);
 8003208:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <osKernelStart+0x1a>
    stat = osErrorISR;
 800320e:	f06f 0305 	mvn.w	r3, #5
 8003212:	607b      	str	r3, [r7, #4]
 8003214:	e010      	b.n	8003238 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <osKernelStart+0x48>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d109      	bne.n	8003232 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800321e:	f7ff ffbf 	bl	80031a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <osKernelStart+0x48>)
 8003224:	2202      	movs	r2, #2
 8003226:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003228:	f001 f9a6 	bl	8004578 <vTaskStartScheduler>
      stat = osOK;
 800322c:	2300      	movs	r3, #0
 800322e:	607b      	str	r3, [r7, #4]
 8003230:	e002      	b.n	8003238 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003232:	f04f 33ff 	mov.w	r3, #4294967295
 8003236:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003238:	687b      	ldr	r3, [r7, #4]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	200001a4 	.word	0x200001a4

08003248 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003248:	b580      	push	{r7, lr}
 800324a:	b08e      	sub	sp, #56	; 0x38
 800324c:	af04      	add	r7, sp, #16
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003254:	2300      	movs	r3, #0
 8003256:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003258:	f3ef 8305 	mrs	r3, IPSR
 800325c:	617b      	str	r3, [r7, #20]
  return(result);
 800325e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003260:	2b00      	cmp	r3, #0
 8003262:	d17e      	bne.n	8003362 <osThreadNew+0x11a>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d07b      	beq.n	8003362 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800326e:	2318      	movs	r3, #24
 8003270:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003272:	2300      	movs	r3, #0
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003276:	f04f 33ff 	mov.w	r3, #4294967295
 800327a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d045      	beq.n	800330e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <osThreadNew+0x48>
        name = attr->name;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <osThreadNew+0x6e>
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	2b38      	cmp	r3, #56	; 0x38
 80032a8:	d805      	bhi.n	80032b6 <osThreadNew+0x6e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <osThreadNew+0x72>
        return (NULL);
 80032b6:	2300      	movs	r3, #0
 80032b8:	e054      	b.n	8003364 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	089b      	lsrs	r3, r3, #2
 80032c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00e      	beq.n	80032f0 <osThreadNew+0xa8>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2bbb      	cmp	r3, #187	; 0xbb
 80032d8:	d90a      	bls.n	80032f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d006      	beq.n	80032f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <osThreadNew+0xa8>
        mem = 1;
 80032ea:	2301      	movs	r3, #1
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	e010      	b.n	8003312 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10c      	bne.n	8003312 <osThreadNew+0xca>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d108      	bne.n	8003312 <osThreadNew+0xca>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d104      	bne.n	8003312 <osThreadNew+0xca>
          mem = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	e001      	b.n	8003312 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d110      	bne.n	800333a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003320:	9202      	str	r2, [sp, #8]
 8003322:	9301      	str	r3, [sp, #4]
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	6a3a      	ldr	r2, [r7, #32]
 800332c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 feb8 	bl	80040a4 <xTaskCreateStatic>
 8003334:	4603      	mov	r3, r0
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	e013      	b.n	8003362 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d110      	bne.n	8003362 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	b29a      	uxth	r2, r3
 8003344:	f107 0310 	add.w	r3, r7, #16
 8003348:	9301      	str	r3, [sp, #4]
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 ff03 	bl	800415e <xTaskCreate>
 8003358:	4603      	mov	r3, r0
 800335a:	2b01      	cmp	r3, #1
 800335c:	d001      	beq.n	8003362 <osThreadNew+0x11a>
            hTask = NULL;
 800335e:	2300      	movs	r3, #0
 8003360:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003362:	693b      	ldr	r3, [r7, #16]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3728      	adds	r7, #40	; 0x28
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003374:	f3ef 8305 	mrs	r3, IPSR
 8003378:	60bb      	str	r3, [r7, #8]
  return(result);
 800337a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <osDelay+0x1c>
    stat = osErrorISR;
 8003380:	f06f 0305 	mvn.w	r3, #5
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	e007      	b.n	8003398 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f001 f8bc 	bl	8004510 <vTaskDelay>
    }
  }

  return (stat);
 8003398:	68fb      	ldr	r3, [r7, #12]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b08a      	sub	sp, #40	; 0x28
 80033a6:	af02      	add	r7, sp, #8
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033b2:	f3ef 8305 	mrs	r3, IPSR
 80033b6:	613b      	str	r3, [r7, #16]
  return(result);
 80033b8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d15f      	bne.n	800347e <osMessageQueueNew+0xdc>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d05c      	beq.n	800347e <osMessageQueueNew+0xdc>
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d059      	beq.n	800347e <osMessageQueueNew+0xdc>
    mem = -1;
 80033ca:	f04f 33ff 	mov.w	r3, #4294967295
 80033ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d029      	beq.n	800342a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d012      	beq.n	8003404 <osMessageQueueNew+0x62>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	2b4f      	cmp	r3, #79	; 0x4f
 80033e4:	d90e      	bls.n	8003404 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	68b9      	ldr	r1, [r7, #8]
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d302      	bcc.n	8003404 <osMessageQueueNew+0x62>
        mem = 1;
 80033fe:	2301      	movs	r3, #1
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	e014      	b.n	800342e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d110      	bne.n	800342e <osMessageQueueNew+0x8c>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10c      	bne.n	800342e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003418:	2b00      	cmp	r3, #0
 800341a:	d108      	bne.n	800342e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d104      	bne.n	800342e <osMessageQueueNew+0x8c>
          mem = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	61bb      	str	r3, [r7, #24]
 8003428:	e001      	b.n	800342e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d10b      	bne.n	800344c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2100      	movs	r1, #0
 800343e:	9100      	str	r1, [sp, #0]
 8003440:	68b9      	ldr	r1, [r7, #8]
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f970 	bl	8003728 <xQueueGenericCreateStatic>
 8003448:	61f8      	str	r0, [r7, #28]
 800344a:	e008      	b.n	800345e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d105      	bne.n	800345e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003452:	2200      	movs	r2, #0
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f9de 	bl	8003818 <xQueueGenericCreate>
 800345c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00c      	beq.n	800347e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <osMessageQueueNew+0xd0>
        name = attr->name;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	e001      	b.n	8003476 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003476:	6979      	ldr	r1, [r7, #20]
 8003478:	69f8      	ldr	r0, [r7, #28]
 800347a:	f000 fdb5 	bl	8003fe8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800347e:	69fb      	ldr	r3, [r7, #28]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3720      	adds	r7, #32
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a07      	ldr	r2, [pc, #28]	; (80034b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003498:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	4a06      	ldr	r2, [pc, #24]	; (80034b8 <vApplicationGetIdleTaskMemory+0x30>)
 800349e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2280      	movs	r2, #128	; 0x80
 80034a4:	601a      	str	r2, [r3, #0]
}
 80034a6:	bf00      	nop
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	200001a8 	.word	0x200001a8
 80034b8:	20000264 	.word	0x20000264

080034bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4a07      	ldr	r2, [pc, #28]	; (80034e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80034cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	4a06      	ldr	r2, [pc, #24]	; (80034ec <vApplicationGetTimerTaskMemory+0x30>)
 80034d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034da:	601a      	str	r2, [r3, #0]
}
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	20000464 	.word	0x20000464
 80034ec:	20000520 	.word	0x20000520

080034f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f103 0208 	add.w	r2, r3, #8
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f04f 32ff 	mov.w	r2, #4294967295
 8003508:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f103 0208 	add.w	r2, r3, #8
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f103 0208 	add.w	r2, r3, #8
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800354a:	b480      	push	{r7}
 800354c:	b085      	sub	sp, #20
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	601a      	str	r2, [r3, #0]
}
 8003586:	bf00      	nop
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003592:	b480      	push	{r7}
 8003594:	b085      	sub	sp, #20
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a8:	d103      	bne.n	80035b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	e00c      	b.n	80035cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3308      	adds	r3, #8
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	e002      	b.n	80035c0 <vListInsert+0x2e>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d2f6      	bcs.n	80035ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	601a      	str	r2, [r3, #0]
}
 80035f8:	bf00      	nop
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6892      	ldr	r2, [r2, #8]
 800361a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6852      	ldr	r2, [r2, #4]
 8003624:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	429a      	cmp	r2, r3
 800362e:	d103      	bne.n	8003638 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	1e5a      	subs	r2, r3, #1
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10a      	bne.n	8003682 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800366c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003670:	f383 8811 	msr	BASEPRI, r3
 8003674:	f3bf 8f6f 	isb	sy
 8003678:	f3bf 8f4f 	dsb	sy
 800367c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800367e:	bf00      	nop
 8003680:	e7fe      	b.n	8003680 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003682:	f002 f92f 	bl	80058e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368e:	68f9      	ldr	r1, [r7, #12]
 8003690:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	441a      	add	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	3b01      	subs	r3, #1
 80036b4:	68f9      	ldr	r1, [r7, #12]
 80036b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	441a      	add	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	22ff      	movs	r2, #255	; 0xff
 80036c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	22ff      	movs	r2, #255	; 0xff
 80036ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d114      	bne.n	8003702 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d01a      	beq.n	8003716 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	3310      	adds	r3, #16
 80036e4:	4618      	mov	r0, r3
 80036e6:	f001 f9e1 	bl	8004aac <xTaskRemoveFromEventList>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d012      	beq.n	8003716 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036f0:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <xQueueGenericReset+0xcc>)
 80036f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	e009      	b.n	8003716 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	3310      	adds	r3, #16
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff fef2 	bl	80034f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	3324      	adds	r3, #36	; 0x24
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff feed 	bl	80034f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003716:	f002 f915 	bl	8005944 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800371a:	2301      	movs	r3, #1
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	e000ed04 	.word	0xe000ed04

08003728 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08e      	sub	sp, #56	; 0x38
 800372c:	af02      	add	r7, sp, #8
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
 8003734:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10a      	bne.n	8003752 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800373c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800374e:	bf00      	nop
 8003750:	e7fe      	b.n	8003750 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
}
 800376a:	bf00      	nop
 800376c:	e7fe      	b.n	800376c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <xQueueGenericCreateStatic+0x52>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <xQueueGenericCreateStatic+0x56>
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <xQueueGenericCreateStatic+0x58>
 800377e:	2300      	movs	r3, #0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	623b      	str	r3, [r7, #32]
}
 8003796:	bf00      	nop
 8003798:	e7fe      	b.n	8003798 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d102      	bne.n	80037a6 <xQueueGenericCreateStatic+0x7e>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <xQueueGenericCreateStatic+0x82>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <xQueueGenericCreateStatic+0x84>
 80037aa:	2300      	movs	r3, #0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80037b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	61fb      	str	r3, [r7, #28]
}
 80037c2:	bf00      	nop
 80037c4:	e7fe      	b.n	80037c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037c6:	2350      	movs	r3, #80	; 0x50
 80037c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b50      	cmp	r3, #80	; 0x50
 80037ce:	d00a      	beq.n	80037e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80037d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d4:	f383 8811 	msr	BASEPRI, r3
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	61bb      	str	r3, [r7, #24]
}
 80037e2:	bf00      	nop
 80037e4:	e7fe      	b.n	80037e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80037e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80037ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00d      	beq.n	800380e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80037fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	4613      	mov	r3, r2
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	68b9      	ldr	r1, [r7, #8]
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 f83f 	bl	800388c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003810:	4618      	mov	r0, r3
 8003812:	3730      	adds	r7, #48	; 0x30
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	; 0x28
 800381c:	af02      	add	r7, sp, #8
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	4613      	mov	r3, r2
 8003824:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10a      	bne.n	8003842 <xQueueGenericCreate+0x2a>
	__asm volatile
 800382c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003830:	f383 8811 	msr	BASEPRI, r3
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	613b      	str	r3, [r7, #16]
}
 800383e:	bf00      	nop
 8003840:	e7fe      	b.n	8003840 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	fb02 f303 	mul.w	r3, r2, r3
 800384a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	3350      	adds	r3, #80	; 0x50
 8003850:	4618      	mov	r0, r3
 8003852:	f002 f969 	bl	8005b28 <pvPortMalloc>
 8003856:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d011      	beq.n	8003882 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	3350      	adds	r3, #80	; 0x50
 8003866:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003870:	79fa      	ldrb	r2, [r7, #7]
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	4613      	mov	r3, r2
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	68b9      	ldr	r1, [r7, #8]
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f805 	bl	800388c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003882:	69bb      	ldr	r3, [r7, #24]
	}
 8003884:	4618      	mov	r0, r3
 8003886:	3720      	adds	r7, #32
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d103      	bne.n	80038a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	e002      	b.n	80038ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038ba:	2101      	movs	r1, #1
 80038bc:	69b8      	ldr	r0, [r7, #24]
 80038be:	f7ff fecb 	bl	8003658 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	78fa      	ldrb	r2, [r7, #3]
 80038c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038ca:	bf00      	nop
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08e      	sub	sp, #56	; 0x38
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038e2:	2300      	movs	r3, #0
 80038e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10a      	bne.n	8003906 <xQueueGenericSend+0x32>
	__asm volatile
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003902:	bf00      	nop
 8003904:	e7fe      	b.n	8003904 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d103      	bne.n	8003914 <xQueueGenericSend+0x40>
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <xQueueGenericSend+0x44>
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <xQueueGenericSend+0x46>
 8003918:	2300      	movs	r3, #0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10a      	bne.n	8003934 <xQueueGenericSend+0x60>
	__asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003930:	bf00      	nop
 8003932:	e7fe      	b.n	8003932 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d103      	bne.n	8003942 <xQueueGenericSend+0x6e>
 800393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <xQueueGenericSend+0x72>
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <xQueueGenericSend+0x74>
 8003946:	2300      	movs	r3, #0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10a      	bne.n	8003962 <xQueueGenericSend+0x8e>
	__asm volatile
 800394c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003950:	f383 8811 	msr	BASEPRI, r3
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	623b      	str	r3, [r7, #32]
}
 800395e:	bf00      	nop
 8003960:	e7fe      	b.n	8003960 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003962:	f001 fa65 	bl	8004e30 <xTaskGetSchedulerState>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d102      	bne.n	8003972 <xQueueGenericSend+0x9e>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <xQueueGenericSend+0xa2>
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <xQueueGenericSend+0xa4>
 8003976:	2300      	movs	r3, #0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <xQueueGenericSend+0xbe>
	__asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	61fb      	str	r3, [r7, #28]
}
 800398e:	bf00      	nop
 8003990:	e7fe      	b.n	8003990 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003992:	f001 ffa7 	bl	80058e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399e:	429a      	cmp	r2, r3
 80039a0:	d302      	bcc.n	80039a8 <xQueueGenericSend+0xd4>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d129      	bne.n	80039fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039ae:	f000 fa0b 	bl	8003dc8 <prvCopyDataToQueue>
 80039b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d010      	beq.n	80039de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039be:	3324      	adds	r3, #36	; 0x24
 80039c0:	4618      	mov	r0, r3
 80039c2:	f001 f873 	bl	8004aac <xTaskRemoveFromEventList>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d013      	beq.n	80039f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039cc:	4b3f      	ldr	r3, [pc, #252]	; (8003acc <xQueueGenericSend+0x1f8>)
 80039ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	e00a      	b.n	80039f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d007      	beq.n	80039f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039e4:	4b39      	ldr	r3, [pc, #228]	; (8003acc <xQueueGenericSend+0x1f8>)
 80039e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039f4:	f001 ffa6 	bl	8005944 <vPortExitCritical>
				return pdPASS;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e063      	b.n	8003ac4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d103      	bne.n	8003a0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a02:	f001 ff9f 	bl	8005944 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	e05c      	b.n	8003ac4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d106      	bne.n	8003a1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a10:	f107 0314 	add.w	r3, r7, #20
 8003a14:	4618      	mov	r0, r3
 8003a16:	f001 f8ad 	bl	8004b74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a1e:	f001 ff91 	bl	8005944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a22:	f000 fe19 	bl	8004658 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a26:	f001 ff5d 	bl	80058e4 <vPortEnterCritical>
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a30:	b25b      	sxtb	r3, r3
 8003a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a36:	d103      	bne.n	8003a40 <xQueueGenericSend+0x16c>
 8003a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a46:	b25b      	sxtb	r3, r3
 8003a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4c:	d103      	bne.n	8003a56 <xQueueGenericSend+0x182>
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a56:	f001 ff75 	bl	8005944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a5a:	1d3a      	adds	r2, r7, #4
 8003a5c:	f107 0314 	add.w	r3, r7, #20
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f001 f89c 	bl	8004ba0 <xTaskCheckForTimeOut>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d124      	bne.n	8003ab8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a70:	f000 faa2 	bl	8003fb8 <prvIsQueueFull>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d018      	beq.n	8003aac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	3310      	adds	r3, #16
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	4611      	mov	r1, r2
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 ffc2 	bl	8004a0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a8a:	f000 fa2d 	bl	8003ee8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a8e:	f000 fdf1 	bl	8004674 <xTaskResumeAll>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f47f af7c 	bne.w	8003992 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003a9a:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <xQueueGenericSend+0x1f8>)
 8003a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	f3bf 8f4f 	dsb	sy
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	e772      	b.n	8003992 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aae:	f000 fa1b 	bl	8003ee8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ab2:	f000 fddf 	bl	8004674 <xTaskResumeAll>
 8003ab6:	e76c      	b.n	8003992 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aba:	f000 fa15 	bl	8003ee8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003abe:	f000 fdd9 	bl	8004674 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ac2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3738      	adds	r7, #56	; 0x38
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	e000ed04 	.word	0xe000ed04

08003ad0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b090      	sub	sp, #64	; 0x40
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10a      	bne.n	8003afe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003afa:	bf00      	nop
 8003afc:	e7fe      	b.n	8003afc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d103      	bne.n	8003b0c <xQueueGenericSendFromISR+0x3c>
 8003b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <xQueueGenericSendFromISR+0x40>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <xQueueGenericSendFromISR+0x42>
 8003b10:	2300      	movs	r3, #0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10a      	bne.n	8003b2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b28:	bf00      	nop
 8003b2a:	e7fe      	b.n	8003b2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d103      	bne.n	8003b3a <xQueueGenericSendFromISR+0x6a>
 8003b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <xQueueGenericSendFromISR+0x6e>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <xQueueGenericSendFromISR+0x70>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10a      	bne.n	8003b5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	623b      	str	r3, [r7, #32]
}
 8003b56:	bf00      	nop
 8003b58:	e7fe      	b.n	8003b58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b5a:	f001 ffa5 	bl	8005aa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b5e:	f3ef 8211 	mrs	r2, BASEPRI
 8003b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b66:	f383 8811 	msr	BASEPRI, r3
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	61fa      	str	r2, [r7, #28]
 8003b74:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b76:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b78:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d302      	bcc.n	8003b8c <xQueueGenericSendFromISR+0xbc>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d12f      	bne.n	8003bec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ba2:	f000 f911 	bl	8003dc8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ba6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bae:	d112      	bne.n	8003bd6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d016      	beq.n	8003be6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bba:	3324      	adds	r3, #36	; 0x24
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 ff75 	bl	8004aac <xTaskRemoveFromEventList>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00e      	beq.n	8003be6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00b      	beq.n	8003be6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	e007      	b.n	8003be6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003bda:	3301      	adds	r3, #1
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	b25a      	sxtb	r2, r3
 8003be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003be6:	2301      	movs	r3, #1
 8003be8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003bea:	e001      	b.n	8003bf0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003bec:	2300      	movs	r3, #0
 8003bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003bfa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3740      	adds	r7, #64	; 0x40
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08c      	sub	sp, #48	; 0x30
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c14:	2300      	movs	r3, #0
 8003c16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10a      	bne.n	8003c38 <xQueueReceive+0x30>
	__asm volatile
 8003c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	623b      	str	r3, [r7, #32]
}
 8003c34:	bf00      	nop
 8003c36:	e7fe      	b.n	8003c36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d103      	bne.n	8003c46 <xQueueReceive+0x3e>
 8003c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <xQueueReceive+0x42>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <xQueueReceive+0x44>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10a      	bne.n	8003c66 <xQueueReceive+0x5e>
	__asm volatile
 8003c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	61fb      	str	r3, [r7, #28]
}
 8003c62:	bf00      	nop
 8003c64:	e7fe      	b.n	8003c64 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c66:	f001 f8e3 	bl	8004e30 <xTaskGetSchedulerState>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d102      	bne.n	8003c76 <xQueueReceive+0x6e>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <xQueueReceive+0x72>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <xQueueReceive+0x74>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10a      	bne.n	8003c96 <xQueueReceive+0x8e>
	__asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	61bb      	str	r3, [r7, #24]
}
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c96:	f001 fe25 	bl	80058e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d01f      	beq.n	8003ce6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ca6:	68b9      	ldr	r1, [r7, #8]
 8003ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003caa:	f000 f8f7 	bl	8003e9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	1e5a      	subs	r2, r3, #1
 8003cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00f      	beq.n	8003cde <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc0:	3310      	adds	r3, #16
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fef2 	bl	8004aac <xTaskRemoveFromEventList>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d007      	beq.n	8003cde <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cce:	4b3d      	ldr	r3, [pc, #244]	; (8003dc4 <xQueueReceive+0x1bc>)
 8003cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cde:	f001 fe31 	bl	8005944 <vPortExitCritical>
				return pdPASS;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e069      	b.n	8003dba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d103      	bne.n	8003cf4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cec:	f001 fe2a 	bl	8005944 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e062      	b.n	8003dba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cfa:	f107 0310 	add.w	r3, r7, #16
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 ff38 	bl	8004b74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d04:	2301      	movs	r3, #1
 8003d06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d08:	f001 fe1c 	bl	8005944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d0c:	f000 fca4 	bl	8004658 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d10:	f001 fde8 	bl	80058e4 <vPortEnterCritical>
 8003d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d1a:	b25b      	sxtb	r3, r3
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d103      	bne.n	8003d2a <xQueueReceive+0x122>
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d30:	b25b      	sxtb	r3, r3
 8003d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d36:	d103      	bne.n	8003d40 <xQueueReceive+0x138>
 8003d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d40:	f001 fe00 	bl	8005944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d44:	1d3a      	adds	r2, r7, #4
 8003d46:	f107 0310 	add.w	r3, r7, #16
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 ff27 	bl	8004ba0 <xTaskCheckForTimeOut>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d123      	bne.n	8003da0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d5a:	f000 f917 	bl	8003f8c <prvIsQueueEmpty>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d017      	beq.n	8003d94 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d66:	3324      	adds	r3, #36	; 0x24
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fe4d 	bl	8004a0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d74:	f000 f8b8 	bl	8003ee8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d78:	f000 fc7c 	bl	8004674 <xTaskResumeAll>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d189      	bne.n	8003c96 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d82:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <xQueueReceive+0x1bc>)
 8003d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	e780      	b.n	8003c96 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d96:	f000 f8a7 	bl	8003ee8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d9a:	f000 fc6b 	bl	8004674 <xTaskResumeAll>
 8003d9e:	e77a      	b.n	8003c96 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003da2:	f000 f8a1 	bl	8003ee8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003da6:	f000 fc65 	bl	8004674 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dac:	f000 f8ee 	bl	8003f8c <prvIsQueueEmpty>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f43f af6f 	beq.w	8003c96 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003db8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3730      	adds	r7, #48	; 0x30
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	e000ed04 	.word	0xe000ed04

08003dc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10d      	bne.n	8003e02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d14d      	bne.n	8003e8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f001 f83a 	bl	8004e6c <xTaskPriorityDisinherit>
 8003df8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	609a      	str	r2, [r3, #8]
 8003e00:	e043      	b.n	8003e8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d119      	bne.n	8003e3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6858      	ldr	r0, [r3, #4]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	461a      	mov	r2, r3
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	f002 f898 	bl	8005f48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	441a      	add	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d32b      	bcc.n	8003e8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	605a      	str	r2, [r3, #4]
 8003e3a:	e026      	b.n	8003e8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	68d8      	ldr	r0, [r3, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	461a      	mov	r2, r3
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	f002 f87e 	bl	8005f48 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	425b      	negs	r3, r3
 8003e56:	441a      	add	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d207      	bcs.n	8003e78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	425b      	negs	r3, r3
 8003e72:	441a      	add	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d105      	bne.n	8003e8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e92:	697b      	ldr	r3, [r7, #20]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d018      	beq.n	8003ee0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	441a      	add	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d303      	bcc.n	8003ed0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68d9      	ldr	r1, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6838      	ldr	r0, [r7, #0]
 8003edc:	f002 f834 	bl	8005f48 <memcpy>
	}
}
 8003ee0:	bf00      	nop
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ef0:	f001 fcf8 	bl	80058e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003efa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003efc:	e011      	b.n	8003f22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d012      	beq.n	8003f2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3324      	adds	r3, #36	; 0x24
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fdce 	bl	8004aac <xTaskRemoveFromEventList>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f16:	f000 fea5 	bl	8004c64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	dce9      	bgt.n	8003efe <prvUnlockQueue+0x16>
 8003f2a:	e000      	b.n	8003f2e <prvUnlockQueue+0x46>
					break;
 8003f2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	22ff      	movs	r2, #255	; 0xff
 8003f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f36:	f001 fd05 	bl	8005944 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f3a:	f001 fcd3 	bl	80058e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f46:	e011      	b.n	8003f6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d012      	beq.n	8003f76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3310      	adds	r3, #16
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fda9 	bl	8004aac <xTaskRemoveFromEventList>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f60:	f000 fe80 	bl	8004c64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f64:	7bbb      	ldrb	r3, [r7, #14]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	dce9      	bgt.n	8003f48 <prvUnlockQueue+0x60>
 8003f74:	e000      	b.n	8003f78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	22ff      	movs	r2, #255	; 0xff
 8003f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f80:	f001 fce0 	bl	8005944 <vPortExitCritical>
}
 8003f84:	bf00      	nop
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f94:	f001 fca6 	bl	80058e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d102      	bne.n	8003fa6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	e001      	b.n	8003faa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003faa:	f001 fccb 	bl	8005944 <vPortExitCritical>

	return xReturn;
 8003fae:	68fb      	ldr	r3, [r7, #12]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fc0:	f001 fc90 	bl	80058e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d102      	bne.n	8003fd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	e001      	b.n	8003fda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fda:	f001 fcb3 	bl	8005944 <vPortExitCritical>

	return xReturn;
 8003fde:	68fb      	ldr	r3, [r7, #12]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	e014      	b.n	8004022 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ff8:	4a0f      	ldr	r2, [pc, #60]	; (8004038 <vQueueAddToRegistry+0x50>)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10b      	bne.n	800401c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004004:	490c      	ldr	r1, [pc, #48]	; (8004038 <vQueueAddToRegistry+0x50>)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800400e:	4a0a      	ldr	r2, [pc, #40]	; (8004038 <vQueueAddToRegistry+0x50>)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	4413      	add	r3, r2
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800401a:	e006      	b.n	800402a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3301      	adds	r3, #1
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b07      	cmp	r3, #7
 8004026:	d9e7      	bls.n	8003ff8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004028:	bf00      	nop
 800402a:	bf00      	nop
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	20000920 	.word	0x20000920

0800403c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800404c:	f001 fc4a 	bl	80058e4 <vPortEnterCritical>
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004056:	b25b      	sxtb	r3, r3
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405c:	d103      	bne.n	8004066 <vQueueWaitForMessageRestricted+0x2a>
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800406c:	b25b      	sxtb	r3, r3
 800406e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004072:	d103      	bne.n	800407c <vQueueWaitForMessageRestricted+0x40>
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800407c:	f001 fc62 	bl	8005944 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004084:	2b00      	cmp	r3, #0
 8004086:	d106      	bne.n	8004096 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	3324      	adds	r3, #36	; 0x24
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	4618      	mov	r0, r3
 8004092:	f000 fcdf 	bl	8004a54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004096:	6978      	ldr	r0, [r7, #20]
 8004098:	f7ff ff26 	bl	8003ee8 <prvUnlockQueue>
	}
 800409c:	bf00      	nop
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08e      	sub	sp, #56	; 0x38
 80040a8:	af04      	add	r7, sp, #16
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10a      	bne.n	80040ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	623b      	str	r3, [r7, #32]
}
 80040ca:	bf00      	nop
 80040cc:	e7fe      	b.n	80040cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <xTaskCreateStatic+0x46>
	__asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	61fb      	str	r3, [r7, #28]
}
 80040e6:	bf00      	nop
 80040e8:	e7fe      	b.n	80040e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040ea:	23bc      	movs	r3, #188	; 0xbc
 80040ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2bbc      	cmp	r3, #188	; 0xbc
 80040f2:	d00a      	beq.n	800410a <xTaskCreateStatic+0x66>
	__asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	61bb      	str	r3, [r7, #24]
}
 8004106:	bf00      	nop
 8004108:	e7fe      	b.n	8004108 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800410a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800410c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410e:	2b00      	cmp	r3, #0
 8004110:	d01e      	beq.n	8004150 <xTaskCreateStatic+0xac>
 8004112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004114:	2b00      	cmp	r3, #0
 8004116:	d01b      	beq.n	8004150 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004120:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	2202      	movs	r2, #2
 8004126:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800412a:	2300      	movs	r3, #0
 800412c:	9303      	str	r3, [sp, #12]
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	9302      	str	r3, [sp, #8]
 8004132:	f107 0314 	add.w	r3, r7, #20
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f850 	bl	80041e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800414a:	f000 f8f3 	bl	8004334 <prvAddNewTaskToReadyList>
 800414e:	e001      	b.n	8004154 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004154:	697b      	ldr	r3, [r7, #20]
	}
 8004156:	4618      	mov	r0, r3
 8004158:	3728      	adds	r7, #40	; 0x28
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800415e:	b580      	push	{r7, lr}
 8004160:	b08c      	sub	sp, #48	; 0x30
 8004162:	af04      	add	r7, sp, #16
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	603b      	str	r3, [r7, #0]
 800416a:	4613      	mov	r3, r2
 800416c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4618      	mov	r0, r3
 8004174:	f001 fcd8 	bl	8005b28 <pvPortMalloc>
 8004178:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00e      	beq.n	800419e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004180:	20bc      	movs	r0, #188	; 0xbc
 8004182:	f001 fcd1 	bl	8005b28 <pvPortMalloc>
 8004186:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	631a      	str	r2, [r3, #48]	; 0x30
 8004194:	e005      	b.n	80041a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004196:	6978      	ldr	r0, [r7, #20]
 8004198:	f001 fd92 	bl	8005cc0 <vPortFree>
 800419c:	e001      	b.n	80041a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d017      	beq.n	80041d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041b0:	88fa      	ldrh	r2, [r7, #6]
 80041b2:	2300      	movs	r3, #0
 80041b4:	9303      	str	r3, [sp, #12]
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	9302      	str	r3, [sp, #8]
 80041ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041bc:	9301      	str	r3, [sp, #4]
 80041be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f80e 	bl	80041e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041cc:	69f8      	ldr	r0, [r7, #28]
 80041ce:	f000 f8b1 	bl	8004334 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041d2:	2301      	movs	r3, #1
 80041d4:	61bb      	str	r3, [r7, #24]
 80041d6:	e002      	b.n	80041de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041d8:	f04f 33ff 	mov.w	r3, #4294967295
 80041dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041de:	69bb      	ldr	r3, [r7, #24]
	}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3720      	adds	r7, #32
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	461a      	mov	r2, r3
 8004200:	21a5      	movs	r1, #165	; 0xa5
 8004202:	f001 feaf 	bl	8005f64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004210:	3b01      	subs	r3, #1
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	f023 0307 	bic.w	r3, r3, #7
 800421e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <prvInitialiseNewTask+0x58>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	617b      	str	r3, [r7, #20]
}
 800423c:	bf00      	nop
 800423e:	e7fe      	b.n	800423e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d01f      	beq.n	8004286 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004246:	2300      	movs	r3, #0
 8004248:	61fb      	str	r3, [r7, #28]
 800424a:	e012      	b.n	8004272 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	4413      	add	r3, r2
 8004252:	7819      	ldrb	r1, [r3, #0]
 8004254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	4413      	add	r3, r2
 800425a:	3334      	adds	r3, #52	; 0x34
 800425c:	460a      	mov	r2, r1
 800425e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	4413      	add	r3, r2
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d006      	beq.n	800427a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	3301      	adds	r3, #1
 8004270:	61fb      	str	r3, [r7, #28]
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	2b0f      	cmp	r3, #15
 8004276:	d9e9      	bls.n	800424c <prvInitialiseNewTask+0x64>
 8004278:	e000      	b.n	800427c <prvInitialiseNewTask+0x94>
			{
				break;
 800427a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004284:	e003      	b.n	800428e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800428e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004290:	2b37      	cmp	r3, #55	; 0x37
 8004292:	d901      	bls.n	8004298 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004294:	2337      	movs	r3, #55	; 0x37
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800429c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80042a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a6:	2200      	movs	r2, #0
 80042a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	3304      	adds	r3, #4
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff f93e 	bl	8003530 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	3318      	adds	r3, #24
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff f939 	bl	8003530 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80042e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e6:	3354      	adds	r3, #84	; 0x54
 80042e8:	2260      	movs	r2, #96	; 0x60
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f001 fe39 	bl	8005f64 <memset>
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	4a0c      	ldr	r2, [pc, #48]	; (8004328 <prvInitialiseNewTask+0x140>)
 80042f6:	659a      	str	r2, [r3, #88]	; 0x58
 80042f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fa:	4a0c      	ldr	r2, [pc, #48]	; (800432c <prvInitialiseNewTask+0x144>)
 80042fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	4a0b      	ldr	r2, [pc, #44]	; (8004330 <prvInitialiseNewTask+0x148>)
 8004302:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	68f9      	ldr	r1, [r7, #12]
 8004308:	69b8      	ldr	r0, [r7, #24]
 800430a:	f001 f9bf 	bl	800568c <pxPortInitialiseStack>
 800430e:	4602      	mov	r2, r0
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004312:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800431e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004320:	bf00      	nop
 8004322:	3720      	adds	r7, #32
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	080061d8 	.word	0x080061d8
 800432c:	080061f8 	.word	0x080061f8
 8004330:	080061b8 	.word	0x080061b8

08004334 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800433c:	f001 fad2 	bl	80058e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004340:	4b2d      	ldr	r3, [pc, #180]	; (80043f8 <prvAddNewTaskToReadyList+0xc4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3301      	adds	r3, #1
 8004346:	4a2c      	ldr	r2, [pc, #176]	; (80043f8 <prvAddNewTaskToReadyList+0xc4>)
 8004348:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800434a:	4b2c      	ldr	r3, [pc, #176]	; (80043fc <prvAddNewTaskToReadyList+0xc8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004352:	4a2a      	ldr	r2, [pc, #168]	; (80043fc <prvAddNewTaskToReadyList+0xc8>)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004358:	4b27      	ldr	r3, [pc, #156]	; (80043f8 <prvAddNewTaskToReadyList+0xc4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d110      	bne.n	8004382 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004360:	f000 fca4 	bl	8004cac <prvInitialiseTaskLists>
 8004364:	e00d      	b.n	8004382 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004366:	4b26      	ldr	r3, [pc, #152]	; (8004400 <prvAddNewTaskToReadyList+0xcc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800436e:	4b23      	ldr	r3, [pc, #140]	; (80043fc <prvAddNewTaskToReadyList+0xc8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	429a      	cmp	r2, r3
 800437a:	d802      	bhi.n	8004382 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800437c:	4a1f      	ldr	r2, [pc, #124]	; (80043fc <prvAddNewTaskToReadyList+0xc8>)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004382:	4b20      	ldr	r3, [pc, #128]	; (8004404 <prvAddNewTaskToReadyList+0xd0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3301      	adds	r3, #1
 8004388:	4a1e      	ldr	r2, [pc, #120]	; (8004404 <prvAddNewTaskToReadyList+0xd0>)
 800438a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800438c:	4b1d      	ldr	r3, [pc, #116]	; (8004404 <prvAddNewTaskToReadyList+0xd0>)
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004398:	4b1b      	ldr	r3, [pc, #108]	; (8004408 <prvAddNewTaskToReadyList+0xd4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d903      	bls.n	80043a8 <prvAddNewTaskToReadyList+0x74>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	4a18      	ldr	r2, [pc, #96]	; (8004408 <prvAddNewTaskToReadyList+0xd4>)
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4a15      	ldr	r2, [pc, #84]	; (800440c <prvAddNewTaskToReadyList+0xd8>)
 80043b6:	441a      	add	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3304      	adds	r3, #4
 80043bc:	4619      	mov	r1, r3
 80043be:	4610      	mov	r0, r2
 80043c0:	f7ff f8c3 	bl	800354a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043c4:	f001 fabe 	bl	8005944 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043c8:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <prvAddNewTaskToReadyList+0xcc>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00e      	beq.n	80043ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043d0:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <prvAddNewTaskToReadyList+0xc8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043da:	429a      	cmp	r2, r3
 80043dc:	d207      	bcs.n	80043ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043de:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <prvAddNewTaskToReadyList+0xdc>)
 80043e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20000e34 	.word	0x20000e34
 80043fc:	20000960 	.word	0x20000960
 8004400:	20000e40 	.word	0x20000e40
 8004404:	20000e50 	.word	0x20000e50
 8004408:	20000e3c 	.word	0x20000e3c
 800440c:	20000964 	.word	0x20000964
 8004410:	e000ed04 	.word	0xe000ed04

08004414 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08a      	sub	sp, #40	; 0x28
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800441e:	2300      	movs	r3, #0
 8004420:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10a      	bne.n	800443e <vTaskDelayUntil+0x2a>
	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	617b      	str	r3, [r7, #20]
}
 800443a:	bf00      	nop
 800443c:	e7fe      	b.n	800443c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10a      	bne.n	800445a <vTaskDelayUntil+0x46>
	__asm volatile
 8004444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	613b      	str	r3, [r7, #16]
}
 8004456:	bf00      	nop
 8004458:	e7fe      	b.n	8004458 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800445a:	4b2a      	ldr	r3, [pc, #168]	; (8004504 <vTaskDelayUntil+0xf0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <vTaskDelayUntil+0x64>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	60fb      	str	r3, [r7, #12]
}
 8004474:	bf00      	nop
 8004476:	e7fe      	b.n	8004476 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004478:	f000 f8ee 	bl	8004658 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800447c:	4b22      	ldr	r3, [pc, #136]	; (8004508 <vTaskDelayUntil+0xf4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	4413      	add	r3, r2
 800448a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6a3a      	ldr	r2, [r7, #32]
 8004492:	429a      	cmp	r2, r3
 8004494:	d20b      	bcs.n	80044ae <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	429a      	cmp	r2, r3
 800449e:	d211      	bcs.n	80044c4 <vTaskDelayUntil+0xb0>
 80044a0:	69fa      	ldr	r2, [r7, #28]
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d90d      	bls.n	80044c4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80044a8:	2301      	movs	r3, #1
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
 80044ac:	e00a      	b.n	80044c4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d303      	bcc.n	80044c0 <vTaskDelayUntil+0xac>
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d901      	bls.n	80044c4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80044c0:	2301      	movs	r3, #1
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d006      	beq.n	80044de <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80044d0:	69fa      	ldr	r2, [r7, #28]
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2100      	movs	r1, #0
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fd35 	bl	8004f48 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80044de:	f000 f8c9 	bl	8004674 <xTaskResumeAll>
 80044e2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d107      	bne.n	80044fa <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80044ea:	4b08      	ldr	r3, [pc, #32]	; (800450c <vTaskDelayUntil+0xf8>)
 80044ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044fa:	bf00      	nop
 80044fc:	3728      	adds	r7, #40	; 0x28
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000e5c 	.word	0x20000e5c
 8004508:	20000e38 	.word	0x20000e38
 800450c:	e000ed04 	.word	0xe000ed04

08004510 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d017      	beq.n	8004552 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004522:	4b13      	ldr	r3, [pc, #76]	; (8004570 <vTaskDelay+0x60>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <vTaskDelay+0x30>
	__asm volatile
 800452a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	60bb      	str	r3, [r7, #8]
}
 800453c:	bf00      	nop
 800453e:	e7fe      	b.n	800453e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004540:	f000 f88a 	bl	8004658 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004544:	2100      	movs	r1, #0
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fcfe 	bl	8004f48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800454c:	f000 f892 	bl	8004674 <xTaskResumeAll>
 8004550:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d107      	bne.n	8004568 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004558:	4b06      	ldr	r3, [pc, #24]	; (8004574 <vTaskDelay+0x64>)
 800455a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004568:	bf00      	nop
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20000e5c 	.word	0x20000e5c
 8004574:	e000ed04 	.word	0xe000ed04

08004578 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800457e:	2300      	movs	r3, #0
 8004580:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004582:	2300      	movs	r3, #0
 8004584:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004586:	463a      	mov	r2, r7
 8004588:	1d39      	adds	r1, r7, #4
 800458a:	f107 0308 	add.w	r3, r7, #8
 800458e:	4618      	mov	r0, r3
 8004590:	f7fe ff7a 	bl	8003488 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004594:	6839      	ldr	r1, [r7, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	9202      	str	r2, [sp, #8]
 800459c:	9301      	str	r3, [sp, #4]
 800459e:	2300      	movs	r3, #0
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	2300      	movs	r3, #0
 80045a4:	460a      	mov	r2, r1
 80045a6:	4924      	ldr	r1, [pc, #144]	; (8004638 <vTaskStartScheduler+0xc0>)
 80045a8:	4824      	ldr	r0, [pc, #144]	; (800463c <vTaskStartScheduler+0xc4>)
 80045aa:	f7ff fd7b 	bl	80040a4 <xTaskCreateStatic>
 80045ae:	4603      	mov	r3, r0
 80045b0:	4a23      	ldr	r2, [pc, #140]	; (8004640 <vTaskStartScheduler+0xc8>)
 80045b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045b4:	4b22      	ldr	r3, [pc, #136]	; (8004640 <vTaskStartScheduler+0xc8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80045bc:	2301      	movs	r3, #1
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	e001      	b.n	80045c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d102      	bne.n	80045d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80045cc:	f000 fd10 	bl	8004ff0 <xTimerCreateTimerTask>
 80045d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d11b      	bne.n	8004610 <vTaskStartScheduler+0x98>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	613b      	str	r3, [r7, #16]
}
 80045ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80045ec:	4b15      	ldr	r3, [pc, #84]	; (8004644 <vTaskStartScheduler+0xcc>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3354      	adds	r3, #84	; 0x54
 80045f2:	4a15      	ldr	r2, [pc, #84]	; (8004648 <vTaskStartScheduler+0xd0>)
 80045f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045f6:	4b15      	ldr	r3, [pc, #84]	; (800464c <vTaskStartScheduler+0xd4>)
 80045f8:	f04f 32ff 	mov.w	r2, #4294967295
 80045fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045fe:	4b14      	ldr	r3, [pc, #80]	; (8004650 <vTaskStartScheduler+0xd8>)
 8004600:	2201      	movs	r2, #1
 8004602:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004604:	4b13      	ldr	r3, [pc, #76]	; (8004654 <vTaskStartScheduler+0xdc>)
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800460a:	f001 f8c9 	bl	80057a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800460e:	e00e      	b.n	800462e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004616:	d10a      	bne.n	800462e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	60fb      	str	r3, [r7, #12]
}
 800462a:	bf00      	nop
 800462c:	e7fe      	b.n	800462c <vTaskStartScheduler+0xb4>
}
 800462e:	bf00      	nop
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	0800614c 	.word	0x0800614c
 800463c:	08004c7d 	.word	0x08004c7d
 8004640:	20000e58 	.word	0x20000e58
 8004644:	20000960 	.word	0x20000960
 8004648:	20000010 	.word	0x20000010
 800464c:	20000e54 	.word	0x20000e54
 8004650:	20000e40 	.word	0x20000e40
 8004654:	20000e38 	.word	0x20000e38

08004658 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800465c:	4b04      	ldr	r3, [pc, #16]	; (8004670 <vTaskSuspendAll+0x18>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3301      	adds	r3, #1
 8004662:	4a03      	ldr	r2, [pc, #12]	; (8004670 <vTaskSuspendAll+0x18>)
 8004664:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004666:	bf00      	nop
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	20000e5c 	.word	0x20000e5c

08004674 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800467e:	2300      	movs	r3, #0
 8004680:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004682:	4b42      	ldr	r3, [pc, #264]	; (800478c <xTaskResumeAll+0x118>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10a      	bne.n	80046a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	603b      	str	r3, [r7, #0]
}
 800469c:	bf00      	nop
 800469e:	e7fe      	b.n	800469e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046a0:	f001 f920 	bl	80058e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046a4:	4b39      	ldr	r3, [pc, #228]	; (800478c <xTaskResumeAll+0x118>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	4a38      	ldr	r2, [pc, #224]	; (800478c <xTaskResumeAll+0x118>)
 80046ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046ae:	4b37      	ldr	r3, [pc, #220]	; (800478c <xTaskResumeAll+0x118>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d162      	bne.n	800477c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046b6:	4b36      	ldr	r3, [pc, #216]	; (8004790 <xTaskResumeAll+0x11c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d05e      	beq.n	800477c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046be:	e02f      	b.n	8004720 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c0:	4b34      	ldr	r3, [pc, #208]	; (8004794 <xTaskResumeAll+0x120>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3318      	adds	r3, #24
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fe ff99 	bl	8003604 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3304      	adds	r3, #4
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe ff94 	bl	8003604 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e0:	4b2d      	ldr	r3, [pc, #180]	; (8004798 <xTaskResumeAll+0x124>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d903      	bls.n	80046f0 <xTaskResumeAll+0x7c>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	4a2a      	ldr	r2, [pc, #168]	; (8004798 <xTaskResumeAll+0x124>)
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4a27      	ldr	r2, [pc, #156]	; (800479c <xTaskResumeAll+0x128>)
 80046fe:	441a      	add	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	3304      	adds	r3, #4
 8004704:	4619      	mov	r1, r3
 8004706:	4610      	mov	r0, r2
 8004708:	f7fe ff1f 	bl	800354a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004710:	4b23      	ldr	r3, [pc, #140]	; (80047a0 <xTaskResumeAll+0x12c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	429a      	cmp	r2, r3
 8004718:	d302      	bcc.n	8004720 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800471a:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <xTaskResumeAll+0x130>)
 800471c:	2201      	movs	r2, #1
 800471e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004720:	4b1c      	ldr	r3, [pc, #112]	; (8004794 <xTaskResumeAll+0x120>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1cb      	bne.n	80046c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800472e:	f000 fb5f 	bl	8004df0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004732:	4b1d      	ldr	r3, [pc, #116]	; (80047a8 <xTaskResumeAll+0x134>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d010      	beq.n	8004760 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800473e:	f000 f847 	bl	80047d0 <xTaskIncrementTick>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004748:	4b16      	ldr	r3, [pc, #88]	; (80047a4 <xTaskResumeAll+0x130>)
 800474a:	2201      	movs	r2, #1
 800474c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3b01      	subs	r3, #1
 8004752:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f1      	bne.n	800473e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800475a:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <xTaskResumeAll+0x134>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004760:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <xTaskResumeAll+0x130>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d009      	beq.n	800477c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004768:	2301      	movs	r3, #1
 800476a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800476c:	4b0f      	ldr	r3, [pc, #60]	; (80047ac <xTaskResumeAll+0x138>)
 800476e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800477c:	f001 f8e2 	bl	8005944 <vPortExitCritical>

	return xAlreadyYielded;
 8004780:	68bb      	ldr	r3, [r7, #8]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	20000e5c 	.word	0x20000e5c
 8004790:	20000e34 	.word	0x20000e34
 8004794:	20000df4 	.word	0x20000df4
 8004798:	20000e3c 	.word	0x20000e3c
 800479c:	20000964 	.word	0x20000964
 80047a0:	20000960 	.word	0x20000960
 80047a4:	20000e48 	.word	0x20000e48
 80047a8:	20000e44 	.word	0x20000e44
 80047ac:	e000ed04 	.word	0xe000ed04

080047b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80047b6:	4b05      	ldr	r3, [pc, #20]	; (80047cc <xTaskGetTickCount+0x1c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80047bc:	687b      	ldr	r3, [r7, #4]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	20000e38 	.word	0x20000e38

080047d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047d6:	2300      	movs	r3, #0
 80047d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047da:	4b4f      	ldr	r3, [pc, #316]	; (8004918 <xTaskIncrementTick+0x148>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f040 808f 	bne.w	8004902 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047e4:	4b4d      	ldr	r3, [pc, #308]	; (800491c <xTaskIncrementTick+0x14c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3301      	adds	r3, #1
 80047ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047ec:	4a4b      	ldr	r2, [pc, #300]	; (800491c <xTaskIncrementTick+0x14c>)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d120      	bne.n	800483a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80047f8:	4b49      	ldr	r3, [pc, #292]	; (8004920 <xTaskIncrementTick+0x150>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <xTaskIncrementTick+0x48>
	__asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	603b      	str	r3, [r7, #0]
}
 8004814:	bf00      	nop
 8004816:	e7fe      	b.n	8004816 <xTaskIncrementTick+0x46>
 8004818:	4b41      	ldr	r3, [pc, #260]	; (8004920 <xTaskIncrementTick+0x150>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	4b41      	ldr	r3, [pc, #260]	; (8004924 <xTaskIncrementTick+0x154>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a3f      	ldr	r2, [pc, #252]	; (8004920 <xTaskIncrementTick+0x150>)
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	4a3f      	ldr	r2, [pc, #252]	; (8004924 <xTaskIncrementTick+0x154>)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	4b3e      	ldr	r3, [pc, #248]	; (8004928 <xTaskIncrementTick+0x158>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3301      	adds	r3, #1
 8004832:	4a3d      	ldr	r2, [pc, #244]	; (8004928 <xTaskIncrementTick+0x158>)
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	f000 fadb 	bl	8004df0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800483a:	4b3c      	ldr	r3, [pc, #240]	; (800492c <xTaskIncrementTick+0x15c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	429a      	cmp	r2, r3
 8004842:	d349      	bcc.n	80048d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004844:	4b36      	ldr	r3, [pc, #216]	; (8004920 <xTaskIncrementTick+0x150>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d104      	bne.n	8004858 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800484e:	4b37      	ldr	r3, [pc, #220]	; (800492c <xTaskIncrementTick+0x15c>)
 8004850:	f04f 32ff 	mov.w	r2, #4294967295
 8004854:	601a      	str	r2, [r3, #0]
					break;
 8004856:	e03f      	b.n	80048d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004858:	4b31      	ldr	r3, [pc, #196]	; (8004920 <xTaskIncrementTick+0x150>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	429a      	cmp	r2, r3
 800486e:	d203      	bcs.n	8004878 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004870:	4a2e      	ldr	r2, [pc, #184]	; (800492c <xTaskIncrementTick+0x15c>)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004876:	e02f      	b.n	80048d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	3304      	adds	r3, #4
 800487c:	4618      	mov	r0, r3
 800487e:	f7fe fec1 	bl	8003604 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	2b00      	cmp	r3, #0
 8004888:	d004      	beq.n	8004894 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	3318      	adds	r3, #24
 800488e:	4618      	mov	r0, r3
 8004890:	f7fe feb8 	bl	8003604 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004898:	4b25      	ldr	r3, [pc, #148]	; (8004930 <xTaskIncrementTick+0x160>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d903      	bls.n	80048a8 <xTaskIncrementTick+0xd8>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	4a22      	ldr	r2, [pc, #136]	; (8004930 <xTaskIncrementTick+0x160>)
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4a1f      	ldr	r2, [pc, #124]	; (8004934 <xTaskIncrementTick+0x164>)
 80048b6:	441a      	add	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4619      	mov	r1, r3
 80048be:	4610      	mov	r0, r2
 80048c0:	f7fe fe43 	bl	800354a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c8:	4b1b      	ldr	r3, [pc, #108]	; (8004938 <xTaskIncrementTick+0x168>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d3b8      	bcc.n	8004844 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80048d2:	2301      	movs	r3, #1
 80048d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048d6:	e7b5      	b.n	8004844 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048d8:	4b17      	ldr	r3, [pc, #92]	; (8004938 <xTaskIncrementTick+0x168>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048de:	4915      	ldr	r1, [pc, #84]	; (8004934 <xTaskIncrementTick+0x164>)
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d901      	bls.n	80048f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80048f0:	2301      	movs	r3, #1
 80048f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80048f4:	4b11      	ldr	r3, [pc, #68]	; (800493c <xTaskIncrementTick+0x16c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d007      	beq.n	800490c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80048fc:	2301      	movs	r3, #1
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	e004      	b.n	800490c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004902:	4b0f      	ldr	r3, [pc, #60]	; (8004940 <xTaskIncrementTick+0x170>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3301      	adds	r3, #1
 8004908:	4a0d      	ldr	r2, [pc, #52]	; (8004940 <xTaskIncrementTick+0x170>)
 800490a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800490c:	697b      	ldr	r3, [r7, #20]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20000e5c 	.word	0x20000e5c
 800491c:	20000e38 	.word	0x20000e38
 8004920:	20000dec 	.word	0x20000dec
 8004924:	20000df0 	.word	0x20000df0
 8004928:	20000e4c 	.word	0x20000e4c
 800492c:	20000e54 	.word	0x20000e54
 8004930:	20000e3c 	.word	0x20000e3c
 8004934:	20000964 	.word	0x20000964
 8004938:	20000960 	.word	0x20000960
 800493c:	20000e48 	.word	0x20000e48
 8004940:	20000e44 	.word	0x20000e44

08004944 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800494a:	4b2a      	ldr	r3, [pc, #168]	; (80049f4 <vTaskSwitchContext+0xb0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004952:	4b29      	ldr	r3, [pc, #164]	; (80049f8 <vTaskSwitchContext+0xb4>)
 8004954:	2201      	movs	r2, #1
 8004956:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004958:	e046      	b.n	80049e8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800495a:	4b27      	ldr	r3, [pc, #156]	; (80049f8 <vTaskSwitchContext+0xb4>)
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004960:	4b26      	ldr	r3, [pc, #152]	; (80049fc <vTaskSwitchContext+0xb8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	e010      	b.n	800498a <vTaskSwitchContext+0x46>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <vTaskSwitchContext+0x40>
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	607b      	str	r3, [r7, #4]
}
 8004980:	bf00      	nop
 8004982:	e7fe      	b.n	8004982 <vTaskSwitchContext+0x3e>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3b01      	subs	r3, #1
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	491d      	ldr	r1, [pc, #116]	; (8004a00 <vTaskSwitchContext+0xbc>)
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4613      	mov	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	440b      	add	r3, r1
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0e4      	beq.n	8004968 <vTaskSwitchContext+0x24>
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4a15      	ldr	r2, [pc, #84]	; (8004a00 <vTaskSwitchContext+0xbc>)
 80049aa:	4413      	add	r3, r2
 80049ac:	60bb      	str	r3, [r7, #8]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	605a      	str	r2, [r3, #4]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	3308      	adds	r3, #8
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d104      	bne.n	80049ce <vTaskSwitchContext+0x8a>
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	605a      	str	r2, [r3, #4]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4a0b      	ldr	r2, [pc, #44]	; (8004a04 <vTaskSwitchContext+0xc0>)
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	4a08      	ldr	r2, [pc, #32]	; (80049fc <vTaskSwitchContext+0xb8>)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80049de:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <vTaskSwitchContext+0xc0>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3354      	adds	r3, #84	; 0x54
 80049e4:	4a08      	ldr	r2, [pc, #32]	; (8004a08 <vTaskSwitchContext+0xc4>)
 80049e6:	6013      	str	r3, [r2, #0]
}
 80049e8:	bf00      	nop
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	20000e5c 	.word	0x20000e5c
 80049f8:	20000e48 	.word	0x20000e48
 80049fc:	20000e3c 	.word	0x20000e3c
 8004a00:	20000964 	.word	0x20000964
 8004a04:	20000960 	.word	0x20000960
 8004a08:	20000010 	.word	0x20000010

08004a0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	60fb      	str	r3, [r7, #12]
}
 8004a2e:	bf00      	nop
 8004a30:	e7fe      	b.n	8004a30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a32:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <vTaskPlaceOnEventList+0x44>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3318      	adds	r3, #24
 8004a38:	4619      	mov	r1, r3
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fe fda9 	bl	8003592 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a40:	2101      	movs	r1, #1
 8004a42:	6838      	ldr	r0, [r7, #0]
 8004a44:	f000 fa80 	bl	8004f48 <prvAddCurrentTaskToDelayedList>
}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20000960 	.word	0x20000960

08004a54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10a      	bne.n	8004a7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	617b      	str	r3, [r7, #20]
}
 8004a78:	bf00      	nop
 8004a7a:	e7fe      	b.n	8004a7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a7c:	4b0a      	ldr	r3, [pc, #40]	; (8004aa8 <vTaskPlaceOnEventListRestricted+0x54>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3318      	adds	r3, #24
 8004a82:	4619      	mov	r1, r3
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f7fe fd60 	bl	800354a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004a90:	f04f 33ff 	mov.w	r3, #4294967295
 8004a94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a96:	6879      	ldr	r1, [r7, #4]
 8004a98:	68b8      	ldr	r0, [r7, #8]
 8004a9a:	f000 fa55 	bl	8004f48 <prvAddCurrentTaskToDelayedList>
	}
 8004a9e:	bf00      	nop
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000960 	.word	0x20000960

08004aac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10a      	bne.n	8004ad8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	60fb      	str	r3, [r7, #12]
}
 8004ad4:	bf00      	nop
 8004ad6:	e7fe      	b.n	8004ad6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	3318      	adds	r3, #24
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fe fd91 	bl	8003604 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ae2:	4b1e      	ldr	r3, [pc, #120]	; (8004b5c <xTaskRemoveFromEventList+0xb0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d11d      	bne.n	8004b26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	3304      	adds	r3, #4
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fe fd88 	bl	8003604 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af8:	4b19      	ldr	r3, [pc, #100]	; (8004b60 <xTaskRemoveFromEventList+0xb4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d903      	bls.n	8004b08 <xTaskRemoveFromEventList+0x5c>
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	4a16      	ldr	r2, [pc, #88]	; (8004b60 <xTaskRemoveFromEventList+0xb4>)
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4a13      	ldr	r2, [pc, #76]	; (8004b64 <xTaskRemoveFromEventList+0xb8>)
 8004b16:	441a      	add	r2, r3
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	f7fe fd13 	bl	800354a <vListInsertEnd>
 8004b24:	e005      	b.n	8004b32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	3318      	adds	r3, #24
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	480e      	ldr	r0, [pc, #56]	; (8004b68 <xTaskRemoveFromEventList+0xbc>)
 8004b2e:	f7fe fd0c 	bl	800354a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b36:	4b0d      	ldr	r3, [pc, #52]	; (8004b6c <xTaskRemoveFromEventList+0xc0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d905      	bls.n	8004b4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b40:	2301      	movs	r3, #1
 8004b42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b44:	4b0a      	ldr	r3, [pc, #40]	; (8004b70 <xTaskRemoveFromEventList+0xc4>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	e001      	b.n	8004b50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b50:	697b      	ldr	r3, [r7, #20]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000e5c 	.word	0x20000e5c
 8004b60:	20000e3c 	.word	0x20000e3c
 8004b64:	20000964 	.word	0x20000964
 8004b68:	20000df4 	.word	0x20000df4
 8004b6c:	20000960 	.word	0x20000960
 8004b70:	20000e48 	.word	0x20000e48

08004b74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <vTaskInternalSetTimeOutState+0x24>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b84:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <vTaskInternalSetTimeOutState+0x28>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	605a      	str	r2, [r3, #4]
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	20000e4c 	.word	0x20000e4c
 8004b9c:	20000e38 	.word	0x20000e38

08004ba0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10a      	bne.n	8004bc6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	613b      	str	r3, [r7, #16]
}
 8004bc2:	bf00      	nop
 8004bc4:	e7fe      	b.n	8004bc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10a      	bne.n	8004be2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	60fb      	str	r3, [r7, #12]
}
 8004bde:	bf00      	nop
 8004be0:	e7fe      	b.n	8004be0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004be2:	f000 fe7f 	bl	80058e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004be6:	4b1d      	ldr	r3, [pc, #116]	; (8004c5c <xTaskCheckForTimeOut+0xbc>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfe:	d102      	bne.n	8004c06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61fb      	str	r3, [r7, #28]
 8004c04:	e023      	b.n	8004c4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4b15      	ldr	r3, [pc, #84]	; (8004c60 <xTaskCheckForTimeOut+0xc0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d007      	beq.n	8004c22 <xTaskCheckForTimeOut+0x82>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d302      	bcc.n	8004c22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	61fb      	str	r3, [r7, #28]
 8004c20:	e015      	b.n	8004c4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d20b      	bcs.n	8004c44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	1ad2      	subs	r2, r2, r3
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7ff ff9b 	bl	8004b74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	e004      	b.n	8004c4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c4e:	f000 fe79 	bl	8005944 <vPortExitCritical>

	return xReturn;
 8004c52:	69fb      	ldr	r3, [r7, #28]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3720      	adds	r7, #32
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	20000e38 	.word	0x20000e38
 8004c60:	20000e4c 	.word	0x20000e4c

08004c64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c68:	4b03      	ldr	r3, [pc, #12]	; (8004c78 <vTaskMissedYield+0x14>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]
}
 8004c6e:	bf00      	nop
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	20000e48 	.word	0x20000e48

08004c7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c84:	f000 f852 	bl	8004d2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c88:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <prvIdleTask+0x28>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d9f9      	bls.n	8004c84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c90:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <prvIdleTask+0x2c>)
 8004c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ca0:	e7f0      	b.n	8004c84 <prvIdleTask+0x8>
 8004ca2:	bf00      	nop
 8004ca4:	20000964 	.word	0x20000964
 8004ca8:	e000ed04 	.word	0xe000ed04

08004cac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	607b      	str	r3, [r7, #4]
 8004cb6:	e00c      	b.n	8004cd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4a12      	ldr	r2, [pc, #72]	; (8004d0c <prvInitialiseTaskLists+0x60>)
 8004cc4:	4413      	add	r3, r2
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fe fc12 	bl	80034f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b37      	cmp	r3, #55	; 0x37
 8004cd6:	d9ef      	bls.n	8004cb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004cd8:	480d      	ldr	r0, [pc, #52]	; (8004d10 <prvInitialiseTaskLists+0x64>)
 8004cda:	f7fe fc09 	bl	80034f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004cde:	480d      	ldr	r0, [pc, #52]	; (8004d14 <prvInitialiseTaskLists+0x68>)
 8004ce0:	f7fe fc06 	bl	80034f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ce4:	480c      	ldr	r0, [pc, #48]	; (8004d18 <prvInitialiseTaskLists+0x6c>)
 8004ce6:	f7fe fc03 	bl	80034f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004cea:	480c      	ldr	r0, [pc, #48]	; (8004d1c <prvInitialiseTaskLists+0x70>)
 8004cec:	f7fe fc00 	bl	80034f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004cf0:	480b      	ldr	r0, [pc, #44]	; (8004d20 <prvInitialiseTaskLists+0x74>)
 8004cf2:	f7fe fbfd 	bl	80034f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <prvInitialiseTaskLists+0x78>)
 8004cf8:	4a05      	ldr	r2, [pc, #20]	; (8004d10 <prvInitialiseTaskLists+0x64>)
 8004cfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <prvInitialiseTaskLists+0x7c>)
 8004cfe:	4a05      	ldr	r2, [pc, #20]	; (8004d14 <prvInitialiseTaskLists+0x68>)
 8004d00:	601a      	str	r2, [r3, #0]
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20000964 	.word	0x20000964
 8004d10:	20000dc4 	.word	0x20000dc4
 8004d14:	20000dd8 	.word	0x20000dd8
 8004d18:	20000df4 	.word	0x20000df4
 8004d1c:	20000e08 	.word	0x20000e08
 8004d20:	20000e20 	.word	0x20000e20
 8004d24:	20000dec 	.word	0x20000dec
 8004d28:	20000df0 	.word	0x20000df0

08004d2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d32:	e019      	b.n	8004d68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d34:	f000 fdd6 	bl	80058e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d38:	4b10      	ldr	r3, [pc, #64]	; (8004d7c <prvCheckTasksWaitingTermination+0x50>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3304      	adds	r3, #4
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fe fc5d 	bl	8003604 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d4a:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <prvCheckTasksWaitingTermination+0x54>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	4a0b      	ldr	r2, [pc, #44]	; (8004d80 <prvCheckTasksWaitingTermination+0x54>)
 8004d52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d54:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <prvCheckTasksWaitingTermination+0x58>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	4a0a      	ldr	r2, [pc, #40]	; (8004d84 <prvCheckTasksWaitingTermination+0x58>)
 8004d5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d5e:	f000 fdf1 	bl	8005944 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f810 	bl	8004d88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d68:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <prvCheckTasksWaitingTermination+0x58>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e1      	bne.n	8004d34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000e08 	.word	0x20000e08
 8004d80:	20000e34 	.word	0x20000e34
 8004d84:	20000e1c 	.word	0x20000e1c

08004d88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3354      	adds	r3, #84	; 0x54
 8004d94:	4618      	mov	r0, r3
 8004d96:	f001 f8fb 	bl	8005f90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d108      	bne.n	8004db6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 ff89 	bl	8005cc0 <vPortFree>
				vPortFree( pxTCB );
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 ff86 	bl	8005cc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004db4:	e018      	b.n	8004de8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d103      	bne.n	8004dc8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 ff7d 	bl	8005cc0 <vPortFree>
	}
 8004dc6:	e00f      	b.n	8004de8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d00a      	beq.n	8004de8 <prvDeleteTCB+0x60>
	__asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	60fb      	str	r3, [r7, #12]
}
 8004de4:	bf00      	nop
 8004de6:	e7fe      	b.n	8004de6 <prvDeleteTCB+0x5e>
	}
 8004de8:	bf00      	nop
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004df6:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <prvResetNextTaskUnblockTime+0x38>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d104      	bne.n	8004e0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e00:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <prvResetNextTaskUnblockTime+0x3c>)
 8004e02:	f04f 32ff 	mov.w	r2, #4294967295
 8004e06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e08:	e008      	b.n	8004e1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e0a:	4b07      	ldr	r3, [pc, #28]	; (8004e28 <prvResetNextTaskUnblockTime+0x38>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	4a04      	ldr	r2, [pc, #16]	; (8004e2c <prvResetNextTaskUnblockTime+0x3c>)
 8004e1a:	6013      	str	r3, [r2, #0]
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	20000dec 	.word	0x20000dec
 8004e2c:	20000e54 	.word	0x20000e54

08004e30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e36:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <xTaskGetSchedulerState+0x34>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d102      	bne.n	8004e44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	e008      	b.n	8004e56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e44:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <xTaskGetSchedulerState+0x38>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d102      	bne.n	8004e52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	607b      	str	r3, [r7, #4]
 8004e50:	e001      	b.n	8004e56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e52:	2300      	movs	r3, #0
 8004e54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e56:	687b      	ldr	r3, [r7, #4]
	}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	20000e40 	.word	0x20000e40
 8004e68:	20000e5c 	.word	0x20000e5c

08004e6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d056      	beq.n	8004f30 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e82:	4b2e      	ldr	r3, [pc, #184]	; (8004f3c <xTaskPriorityDisinherit+0xd0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d00a      	beq.n	8004ea2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	60fb      	str	r3, [r7, #12]
}
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10a      	bne.n	8004ec0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	60bb      	str	r3, [r7, #8]
}
 8004ebc:	bf00      	nop
 8004ebe:	e7fe      	b.n	8004ebe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec4:	1e5a      	subs	r2, r3, #1
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d02c      	beq.n	8004f30 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d128      	bne.n	8004f30 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fe fb8e 	bl	8003604 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f00:	4b0f      	ldr	r3, [pc, #60]	; (8004f40 <xTaskPriorityDisinherit+0xd4>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d903      	bls.n	8004f10 <xTaskPriorityDisinherit+0xa4>
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	4a0c      	ldr	r2, [pc, #48]	; (8004f40 <xTaskPriorityDisinherit+0xd4>)
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4a09      	ldr	r2, [pc, #36]	; (8004f44 <xTaskPriorityDisinherit+0xd8>)
 8004f1e:	441a      	add	r2, r3
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	3304      	adds	r3, #4
 8004f24:	4619      	mov	r1, r3
 8004f26:	4610      	mov	r0, r2
 8004f28:	f7fe fb0f 	bl	800354a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f30:	697b      	ldr	r3, [r7, #20]
	}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3718      	adds	r7, #24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20000960 	.word	0x20000960
 8004f40:	20000e3c 	.word	0x20000e3c
 8004f44:	20000964 	.word	0x20000964

08004f48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f52:	4b21      	ldr	r3, [pc, #132]	; (8004fd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f58:	4b20      	ldr	r3, [pc, #128]	; (8004fdc <prvAddCurrentTaskToDelayedList+0x94>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fe fb50 	bl	8003604 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6a:	d10a      	bne.n	8004f82 <prvAddCurrentTaskToDelayedList+0x3a>
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d007      	beq.n	8004f82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f72:	4b1a      	ldr	r3, [pc, #104]	; (8004fdc <prvAddCurrentTaskToDelayedList+0x94>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3304      	adds	r3, #4
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4819      	ldr	r0, [pc, #100]	; (8004fe0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004f7c:	f7fe fae5 	bl	800354a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f80:	e026      	b.n	8004fd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4413      	add	r3, r2
 8004f88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f8a:	4b14      	ldr	r3, [pc, #80]	; (8004fdc <prvAddCurrentTaskToDelayedList+0x94>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d209      	bcs.n	8004fae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f9a:	4b12      	ldr	r3, [pc, #72]	; (8004fe4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	4b0f      	ldr	r3, [pc, #60]	; (8004fdc <prvAddCurrentTaskToDelayedList+0x94>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	f7fe faf3 	bl	8003592 <vListInsert>
}
 8004fac:	e010      	b.n	8004fd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fae:	4b0e      	ldr	r3, [pc, #56]	; (8004fe8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <prvAddCurrentTaskToDelayedList+0x94>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f7fe fae9 	bl	8003592 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fc0:	4b0a      	ldr	r3, [pc, #40]	; (8004fec <prvAddCurrentTaskToDelayedList+0xa4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d202      	bcs.n	8004fd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004fca:	4a08      	ldr	r2, [pc, #32]	; (8004fec <prvAddCurrentTaskToDelayedList+0xa4>)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	6013      	str	r3, [r2, #0]
}
 8004fd0:	bf00      	nop
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	20000e38 	.word	0x20000e38
 8004fdc:	20000960 	.word	0x20000960
 8004fe0:	20000e20 	.word	0x20000e20
 8004fe4:	20000df0 	.word	0x20000df0
 8004fe8:	20000dec 	.word	0x20000dec
 8004fec:	20000e54 	.word	0x20000e54

08004ff0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	; 0x28
 8004ff4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004ffa:	f000 fb07 	bl	800560c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004ffe:	4b1c      	ldr	r3, [pc, #112]	; (8005070 <xTimerCreateTimerTask+0x80>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d021      	beq.n	800504a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800500a:	2300      	movs	r3, #0
 800500c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800500e:	1d3a      	adds	r2, r7, #4
 8005010:	f107 0108 	add.w	r1, r7, #8
 8005014:	f107 030c 	add.w	r3, r7, #12
 8005018:	4618      	mov	r0, r3
 800501a:	f7fe fa4f 	bl	80034bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	9202      	str	r2, [sp, #8]
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	2302      	movs	r3, #2
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	2300      	movs	r3, #0
 800502e:	460a      	mov	r2, r1
 8005030:	4910      	ldr	r1, [pc, #64]	; (8005074 <xTimerCreateTimerTask+0x84>)
 8005032:	4811      	ldr	r0, [pc, #68]	; (8005078 <xTimerCreateTimerTask+0x88>)
 8005034:	f7ff f836 	bl	80040a4 <xTaskCreateStatic>
 8005038:	4603      	mov	r3, r0
 800503a:	4a10      	ldr	r2, [pc, #64]	; (800507c <xTimerCreateTimerTask+0x8c>)
 800503c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800503e:	4b0f      	ldr	r3, [pc, #60]	; (800507c <xTimerCreateTimerTask+0x8c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005046:	2301      	movs	r3, #1
 8005048:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10a      	bne.n	8005066 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	613b      	str	r3, [r7, #16]
}
 8005062:	bf00      	nop
 8005064:	e7fe      	b.n	8005064 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005066:	697b      	ldr	r3, [r7, #20]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	20000e90 	.word	0x20000e90
 8005074:	08006154 	.word	0x08006154
 8005078:	080051b5 	.word	0x080051b5
 800507c:	20000e94 	.word	0x20000e94

08005080 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08a      	sub	sp, #40	; 0x28
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800508e:	2300      	movs	r3, #0
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10a      	bne.n	80050ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	623b      	str	r3, [r7, #32]
}
 80050aa:	bf00      	nop
 80050ac:	e7fe      	b.n	80050ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80050ae:	4b1a      	ldr	r3, [pc, #104]	; (8005118 <xTimerGenericCommand+0x98>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d02a      	beq.n	800510c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b05      	cmp	r3, #5
 80050c6:	dc18      	bgt.n	80050fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80050c8:	f7ff feb2 	bl	8004e30 <xTaskGetSchedulerState>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d109      	bne.n	80050e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80050d2:	4b11      	ldr	r3, [pc, #68]	; (8005118 <xTimerGenericCommand+0x98>)
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	f107 0110 	add.w	r1, r7, #16
 80050da:	2300      	movs	r3, #0
 80050dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050de:	f7fe fbf9 	bl	80038d4 <xQueueGenericSend>
 80050e2:	6278      	str	r0, [r7, #36]	; 0x24
 80050e4:	e012      	b.n	800510c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80050e6:	4b0c      	ldr	r3, [pc, #48]	; (8005118 <xTimerGenericCommand+0x98>)
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	f107 0110 	add.w	r1, r7, #16
 80050ee:	2300      	movs	r3, #0
 80050f0:	2200      	movs	r2, #0
 80050f2:	f7fe fbef 	bl	80038d4 <xQueueGenericSend>
 80050f6:	6278      	str	r0, [r7, #36]	; 0x24
 80050f8:	e008      	b.n	800510c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80050fa:	4b07      	ldr	r3, [pc, #28]	; (8005118 <xTimerGenericCommand+0x98>)
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	f107 0110 	add.w	r1, r7, #16
 8005102:	2300      	movs	r3, #0
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	f7fe fce3 	bl	8003ad0 <xQueueGenericSendFromISR>
 800510a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800510e:	4618      	mov	r0, r3
 8005110:	3728      	adds	r7, #40	; 0x28
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20000e90 	.word	0x20000e90

0800511c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af02      	add	r7, sp, #8
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005126:	4b22      	ldr	r3, [pc, #136]	; (80051b0 <prvProcessExpiredTimer+0x94>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	3304      	adds	r3, #4
 8005134:	4618      	mov	r0, r3
 8005136:	f7fe fa65 	bl	8003604 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d022      	beq.n	800518e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	699a      	ldr	r2, [r3, #24]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	18d1      	adds	r1, r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	6978      	ldr	r0, [r7, #20]
 8005156:	f000 f8d1 	bl	80052fc <prvInsertTimerInActiveList>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01f      	beq.n	80051a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005160:	2300      	movs	r3, #0
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	2300      	movs	r3, #0
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	2100      	movs	r1, #0
 800516a:	6978      	ldr	r0, [r7, #20]
 800516c:	f7ff ff88 	bl	8005080 <xTimerGenericCommand>
 8005170:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d113      	bne.n	80051a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	60fb      	str	r3, [r7, #12]
}
 800518a:	bf00      	nop
 800518c:	e7fe      	b.n	800518c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005194:	f023 0301 	bic.w	r3, r3, #1
 8005198:	b2da      	uxtb	r2, r3
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	6978      	ldr	r0, [r7, #20]
 80051a6:	4798      	blx	r3
}
 80051a8:	bf00      	nop
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	20000e88 	.word	0x20000e88

080051b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051bc:	f107 0308 	add.w	r3, r7, #8
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 f857 	bl	8005274 <prvGetNextExpireTime>
 80051c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4619      	mov	r1, r3
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 f803 	bl	80051d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80051d2:	f000 f8d5 	bl	8005380 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051d6:	e7f1      	b.n	80051bc <prvTimerTask+0x8>

080051d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80051e2:	f7ff fa39 	bl	8004658 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051e6:	f107 0308 	add.w	r3, r7, #8
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 f866 	bl	80052bc <prvSampleTimeNow>
 80051f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d130      	bne.n	800525a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10a      	bne.n	8005214 <prvProcessTimerOrBlockTask+0x3c>
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	429a      	cmp	r2, r3
 8005204:	d806      	bhi.n	8005214 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005206:	f7ff fa35 	bl	8004674 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800520a:	68f9      	ldr	r1, [r7, #12]
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7ff ff85 	bl	800511c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005212:	e024      	b.n	800525e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d008      	beq.n	800522c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800521a:	4b13      	ldr	r3, [pc, #76]	; (8005268 <prvProcessTimerOrBlockTask+0x90>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <prvProcessTimerOrBlockTask+0x50>
 8005224:	2301      	movs	r3, #1
 8005226:	e000      	b.n	800522a <prvProcessTimerOrBlockTask+0x52>
 8005228:	2300      	movs	r3, #0
 800522a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800522c:	4b0f      	ldr	r3, [pc, #60]	; (800526c <prvProcessTimerOrBlockTask+0x94>)
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	4619      	mov	r1, r3
 800523a:	f7fe feff 	bl	800403c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800523e:	f7ff fa19 	bl	8004674 <xTaskResumeAll>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005248:	4b09      	ldr	r3, [pc, #36]	; (8005270 <prvProcessTimerOrBlockTask+0x98>)
 800524a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	f3bf 8f6f 	isb	sy
}
 8005258:	e001      	b.n	800525e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800525a:	f7ff fa0b 	bl	8004674 <xTaskResumeAll>
}
 800525e:	bf00      	nop
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000e8c 	.word	0x20000e8c
 800526c:	20000e90 	.word	0x20000e90
 8005270:	e000ed04 	.word	0xe000ed04

08005274 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800527c:	4b0e      	ldr	r3, [pc, #56]	; (80052b8 <prvGetNextExpireTime+0x44>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <prvGetNextExpireTime+0x16>
 8005286:	2201      	movs	r2, #1
 8005288:	e000      	b.n	800528c <prvGetNextExpireTime+0x18>
 800528a:	2200      	movs	r2, #0
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d105      	bne.n	80052a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005298:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <prvGetNextExpireTime+0x44>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	e001      	b.n	80052a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80052a4:	2300      	movs	r3, #0
 80052a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80052a8:	68fb      	ldr	r3, [r7, #12]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	20000e88 	.word	0x20000e88

080052bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80052c4:	f7ff fa74 	bl	80047b0 <xTaskGetTickCount>
 80052c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80052ca:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <prvSampleTimeNow+0x3c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d205      	bcs.n	80052e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80052d4:	f000 f936 	bl	8005544 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	e002      	b.n	80052e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80052e6:	4a04      	ldr	r2, [pc, #16]	; (80052f8 <prvSampleTimeNow+0x3c>)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80052ec:	68fb      	ldr	r3, [r7, #12]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20000e98 	.word	0x20000e98

080052fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	429a      	cmp	r2, r3
 8005320:	d812      	bhi.n	8005348 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	1ad2      	subs	r2, r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	429a      	cmp	r2, r3
 800532e:	d302      	bcc.n	8005336 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005330:	2301      	movs	r3, #1
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	e01b      	b.n	800536e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005336:	4b10      	ldr	r3, [pc, #64]	; (8005378 <prvInsertTimerInActiveList+0x7c>)
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3304      	adds	r3, #4
 800533e:	4619      	mov	r1, r3
 8005340:	4610      	mov	r0, r2
 8005342:	f7fe f926 	bl	8003592 <vListInsert>
 8005346:	e012      	b.n	800536e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d206      	bcs.n	800535e <prvInsertTimerInActiveList+0x62>
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d302      	bcc.n	800535e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005358:	2301      	movs	r3, #1
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	e007      	b.n	800536e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800535e:	4b07      	ldr	r3, [pc, #28]	; (800537c <prvInsertTimerInActiveList+0x80>)
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	3304      	adds	r3, #4
 8005366:	4619      	mov	r1, r3
 8005368:	4610      	mov	r0, r2
 800536a:	f7fe f912 	bl	8003592 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800536e:	697b      	ldr	r3, [r7, #20]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	20000e8c 	.word	0x20000e8c
 800537c:	20000e88 	.word	0x20000e88

08005380 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08e      	sub	sp, #56	; 0x38
 8005384:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005386:	e0ca      	b.n	800551e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	da18      	bge.n	80053c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800538e:	1d3b      	adds	r3, r7, #4
 8005390:	3304      	adds	r3, #4
 8005392:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10a      	bne.n	80053b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800539a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	61fb      	str	r3, [r7, #28]
}
 80053ac:	bf00      	nop
 80053ae:	e7fe      	b.n	80053ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80053b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053b6:	6850      	ldr	r0, [r2, #4]
 80053b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ba:	6892      	ldr	r2, [r2, #8]
 80053bc:	4611      	mov	r1, r2
 80053be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f2c0 80aa 	blt.w	800551c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80053cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d004      	beq.n	80053de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d6:	3304      	adds	r3, #4
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fe f913 	bl	8003604 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053de:	463b      	mov	r3, r7
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7ff ff6b 	bl	80052bc <prvSampleTimeNow>
 80053e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b09      	cmp	r3, #9
 80053ec:	f200 8097 	bhi.w	800551e <prvProcessReceivedCommands+0x19e>
 80053f0:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <prvProcessReceivedCommands+0x78>)
 80053f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f6:	bf00      	nop
 80053f8:	08005421 	.word	0x08005421
 80053fc:	08005421 	.word	0x08005421
 8005400:	08005421 	.word	0x08005421
 8005404:	08005495 	.word	0x08005495
 8005408:	080054a9 	.word	0x080054a9
 800540c:	080054f3 	.word	0x080054f3
 8005410:	08005421 	.word	0x08005421
 8005414:	08005421 	.word	0x08005421
 8005418:	08005495 	.word	0x08005495
 800541c:	080054a9 	.word	0x080054a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005426:	f043 0301 	orr.w	r3, r3, #1
 800542a:	b2da      	uxtb	r2, r3
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	18d1      	adds	r1, r2, r3
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800543e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005440:	f7ff ff5c 	bl	80052fc <prvInsertTimerInActiveList>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d069      	beq.n	800551e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800544a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005450:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d05e      	beq.n	800551e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	441a      	add	r2, r3
 8005468:	2300      	movs	r3, #0
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	2300      	movs	r3, #0
 800546e:	2100      	movs	r1, #0
 8005470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005472:	f7ff fe05 	bl	8005080 <xTimerGenericCommand>
 8005476:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d14f      	bne.n	800551e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800547e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	61bb      	str	r3, [r7, #24]
}
 8005490:	bf00      	nop
 8005492:	e7fe      	b.n	8005492 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800549a:	f023 0301 	bic.w	r3, r3, #1
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80054a6:	e03a      	b.n	800551e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054ae:	f043 0301 	orr.w	r3, r3, #1
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10a      	bne.n	80054de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80054c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	617b      	str	r3, [r7, #20]
}
 80054da:	bf00      	nop
 80054dc:	e7fe      	b.n	80054dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80054de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	18d1      	adds	r1, r2, r3
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ec:	f7ff ff06 	bl	80052fc <prvInsertTimerInActiveList>
					break;
 80054f0:	e015      	b.n	800551e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d103      	bne.n	8005508 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005502:	f000 fbdd 	bl	8005cc0 <vPortFree>
 8005506:	e00a      	b.n	800551e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800550e:	f023 0301 	bic.w	r3, r3, #1
 8005512:	b2da      	uxtb	r2, r3
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800551a:	e000      	b.n	800551e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800551c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800551e:	4b08      	ldr	r3, [pc, #32]	; (8005540 <prvProcessReceivedCommands+0x1c0>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	1d39      	adds	r1, r7, #4
 8005524:	2200      	movs	r2, #0
 8005526:	4618      	mov	r0, r3
 8005528:	f7fe fb6e 	bl	8003c08 <xQueueReceive>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	f47f af2a 	bne.w	8005388 <prvProcessReceivedCommands+0x8>
	}
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop
 8005538:	3730      	adds	r7, #48	; 0x30
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20000e90 	.word	0x20000e90

08005544 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800554a:	e048      	b.n	80055de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800554c:	4b2d      	ldr	r3, [pc, #180]	; (8005604 <prvSwitchTimerLists+0xc0>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005556:	4b2b      	ldr	r3, [pc, #172]	; (8005604 <prvSwitchTimerLists+0xc0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	3304      	adds	r3, #4
 8005564:	4618      	mov	r0, r3
 8005566:	f7fe f84d 	bl	8003604 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d02e      	beq.n	80055de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4413      	add	r3, r2
 8005588:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	429a      	cmp	r2, r3
 8005590:	d90e      	bls.n	80055b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800559e:	4b19      	ldr	r3, [pc, #100]	; (8005604 <prvSwitchTimerLists+0xc0>)
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3304      	adds	r3, #4
 80055a6:	4619      	mov	r1, r3
 80055a8:	4610      	mov	r0, r2
 80055aa:	f7fd fff2 	bl	8003592 <vListInsert>
 80055ae:	e016      	b.n	80055de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055b0:	2300      	movs	r3, #0
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	2300      	movs	r3, #0
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	2100      	movs	r1, #0
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f7ff fd60 	bl	8005080 <xTimerGenericCommand>
 80055c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	603b      	str	r3, [r7, #0]
}
 80055da:	bf00      	nop
 80055dc:	e7fe      	b.n	80055dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055de:	4b09      	ldr	r3, [pc, #36]	; (8005604 <prvSwitchTimerLists+0xc0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1b1      	bne.n	800554c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80055e8:	4b06      	ldr	r3, [pc, #24]	; (8005604 <prvSwitchTimerLists+0xc0>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80055ee:	4b06      	ldr	r3, [pc, #24]	; (8005608 <prvSwitchTimerLists+0xc4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a04      	ldr	r2, [pc, #16]	; (8005604 <prvSwitchTimerLists+0xc0>)
 80055f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80055f6:	4a04      	ldr	r2, [pc, #16]	; (8005608 <prvSwitchTimerLists+0xc4>)
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	6013      	str	r3, [r2, #0]
}
 80055fc:	bf00      	nop
 80055fe:	3718      	adds	r7, #24
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20000e88 	.word	0x20000e88
 8005608:	20000e8c 	.word	0x20000e8c

0800560c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005612:	f000 f967 	bl	80058e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005616:	4b15      	ldr	r3, [pc, #84]	; (800566c <prvCheckForValidListAndQueue+0x60>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d120      	bne.n	8005660 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800561e:	4814      	ldr	r0, [pc, #80]	; (8005670 <prvCheckForValidListAndQueue+0x64>)
 8005620:	f7fd ff66 	bl	80034f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005624:	4813      	ldr	r0, [pc, #76]	; (8005674 <prvCheckForValidListAndQueue+0x68>)
 8005626:	f7fd ff63 	bl	80034f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800562a:	4b13      	ldr	r3, [pc, #76]	; (8005678 <prvCheckForValidListAndQueue+0x6c>)
 800562c:	4a10      	ldr	r2, [pc, #64]	; (8005670 <prvCheckForValidListAndQueue+0x64>)
 800562e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005630:	4b12      	ldr	r3, [pc, #72]	; (800567c <prvCheckForValidListAndQueue+0x70>)
 8005632:	4a10      	ldr	r2, [pc, #64]	; (8005674 <prvCheckForValidListAndQueue+0x68>)
 8005634:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005636:	2300      	movs	r3, #0
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	4b11      	ldr	r3, [pc, #68]	; (8005680 <prvCheckForValidListAndQueue+0x74>)
 800563c:	4a11      	ldr	r2, [pc, #68]	; (8005684 <prvCheckForValidListAndQueue+0x78>)
 800563e:	2110      	movs	r1, #16
 8005640:	200a      	movs	r0, #10
 8005642:	f7fe f871 	bl	8003728 <xQueueGenericCreateStatic>
 8005646:	4603      	mov	r3, r0
 8005648:	4a08      	ldr	r2, [pc, #32]	; (800566c <prvCheckForValidListAndQueue+0x60>)
 800564a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800564c:	4b07      	ldr	r3, [pc, #28]	; (800566c <prvCheckForValidListAndQueue+0x60>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005654:	4b05      	ldr	r3, [pc, #20]	; (800566c <prvCheckForValidListAndQueue+0x60>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	490b      	ldr	r1, [pc, #44]	; (8005688 <prvCheckForValidListAndQueue+0x7c>)
 800565a:	4618      	mov	r0, r3
 800565c:	f7fe fcc4 	bl	8003fe8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005660:	f000 f970 	bl	8005944 <vPortExitCritical>
}
 8005664:	bf00      	nop
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	20000e90 	.word	0x20000e90
 8005670:	20000e60 	.word	0x20000e60
 8005674:	20000e74 	.word	0x20000e74
 8005678:	20000e88 	.word	0x20000e88
 800567c:	20000e8c 	.word	0x20000e8c
 8005680:	20000f3c 	.word	0x20000f3c
 8005684:	20000e9c 	.word	0x20000e9c
 8005688:	0800615c 	.word	0x0800615c

0800568c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	3b04      	subs	r3, #4
 800569c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	3b04      	subs	r3, #4
 80056aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f023 0201 	bic.w	r2, r3, #1
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3b04      	subs	r3, #4
 80056ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056bc:	4a0c      	ldr	r2, [pc, #48]	; (80056f0 <pxPortInitialiseStack+0x64>)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3b14      	subs	r3, #20
 80056c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3b04      	subs	r3, #4
 80056d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f06f 0202 	mvn.w	r2, #2
 80056da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	3b20      	subs	r3, #32
 80056e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056e2:	68fb      	ldr	r3, [r7, #12]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	080056f5 	.word	0x080056f5

080056f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056fa:	2300      	movs	r3, #0
 80056fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056fe:	4b12      	ldr	r3, [pc, #72]	; (8005748 <prvTaskExitError+0x54>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005706:	d00a      	beq.n	800571e <prvTaskExitError+0x2a>
	__asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	60fb      	str	r3, [r7, #12]
}
 800571a:	bf00      	nop
 800571c:	e7fe      	b.n	800571c <prvTaskExitError+0x28>
	__asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	60bb      	str	r3, [r7, #8]
}
 8005730:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005732:	bf00      	nop
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d0fc      	beq.n	8005734 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800573a:	bf00      	nop
 800573c:	bf00      	nop
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	2000000c 	.word	0x2000000c
 800574c:	00000000 	.word	0x00000000

08005750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005750:	4b07      	ldr	r3, [pc, #28]	; (8005770 <pxCurrentTCBConst2>)
 8005752:	6819      	ldr	r1, [r3, #0]
 8005754:	6808      	ldr	r0, [r1, #0]
 8005756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800575a:	f380 8809 	msr	PSP, r0
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f04f 0000 	mov.w	r0, #0
 8005766:	f380 8811 	msr	BASEPRI, r0
 800576a:	4770      	bx	lr
 800576c:	f3af 8000 	nop.w

08005770 <pxCurrentTCBConst2>:
 8005770:	20000960 	.word	0x20000960
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005774:	bf00      	nop
 8005776:	bf00      	nop

08005778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005778:	4808      	ldr	r0, [pc, #32]	; (800579c <prvPortStartFirstTask+0x24>)
 800577a:	6800      	ldr	r0, [r0, #0]
 800577c:	6800      	ldr	r0, [r0, #0]
 800577e:	f380 8808 	msr	MSP, r0
 8005782:	f04f 0000 	mov.w	r0, #0
 8005786:	f380 8814 	msr	CONTROL, r0
 800578a:	b662      	cpsie	i
 800578c:	b661      	cpsie	f
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	df00      	svc	0
 8005798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800579a:	bf00      	nop
 800579c:	e000ed08 	.word	0xe000ed08

080057a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057a6:	4b46      	ldr	r3, [pc, #280]	; (80058c0 <xPortStartScheduler+0x120>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a46      	ldr	r2, [pc, #280]	; (80058c4 <xPortStartScheduler+0x124>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d10a      	bne.n	80057c6 <xPortStartScheduler+0x26>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	613b      	str	r3, [r7, #16]
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80057c6:	4b3e      	ldr	r3, [pc, #248]	; (80058c0 <xPortStartScheduler+0x120>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a3f      	ldr	r2, [pc, #252]	; (80058c8 <xPortStartScheduler+0x128>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d10a      	bne.n	80057e6 <xPortStartScheduler+0x46>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	60fb      	str	r3, [r7, #12]
}
 80057e2:	bf00      	nop
 80057e4:	e7fe      	b.n	80057e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057e6:	4b39      	ldr	r3, [pc, #228]	; (80058cc <xPortStartScheduler+0x12c>)
 80057e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	22ff      	movs	r2, #255	; 0xff
 80057f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	b2db      	uxtb	r3, r3
 8005804:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005808:	b2da      	uxtb	r2, r3
 800580a:	4b31      	ldr	r3, [pc, #196]	; (80058d0 <xPortStartScheduler+0x130>)
 800580c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800580e:	4b31      	ldr	r3, [pc, #196]	; (80058d4 <xPortStartScheduler+0x134>)
 8005810:	2207      	movs	r2, #7
 8005812:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005814:	e009      	b.n	800582a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005816:	4b2f      	ldr	r3, [pc, #188]	; (80058d4 <xPortStartScheduler+0x134>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3b01      	subs	r3, #1
 800581c:	4a2d      	ldr	r2, [pc, #180]	; (80058d4 <xPortStartScheduler+0x134>)
 800581e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	b2db      	uxtb	r3, r3
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	b2db      	uxtb	r3, r3
 8005828:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800582a:	78fb      	ldrb	r3, [r7, #3]
 800582c:	b2db      	uxtb	r3, r3
 800582e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005832:	2b80      	cmp	r3, #128	; 0x80
 8005834:	d0ef      	beq.n	8005816 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005836:	4b27      	ldr	r3, [pc, #156]	; (80058d4 <xPortStartScheduler+0x134>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f1c3 0307 	rsb	r3, r3, #7
 800583e:	2b04      	cmp	r3, #4
 8005840:	d00a      	beq.n	8005858 <xPortStartScheduler+0xb8>
	__asm volatile
 8005842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	60bb      	str	r3, [r7, #8]
}
 8005854:	bf00      	nop
 8005856:	e7fe      	b.n	8005856 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005858:	4b1e      	ldr	r3, [pc, #120]	; (80058d4 <xPortStartScheduler+0x134>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	021b      	lsls	r3, r3, #8
 800585e:	4a1d      	ldr	r2, [pc, #116]	; (80058d4 <xPortStartScheduler+0x134>)
 8005860:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005862:	4b1c      	ldr	r3, [pc, #112]	; (80058d4 <xPortStartScheduler+0x134>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800586a:	4a1a      	ldr	r2, [pc, #104]	; (80058d4 <xPortStartScheduler+0x134>)
 800586c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	b2da      	uxtb	r2, r3
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005876:	4b18      	ldr	r3, [pc, #96]	; (80058d8 <xPortStartScheduler+0x138>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a17      	ldr	r2, [pc, #92]	; (80058d8 <xPortStartScheduler+0x138>)
 800587c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005880:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005882:	4b15      	ldr	r3, [pc, #84]	; (80058d8 <xPortStartScheduler+0x138>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a14      	ldr	r2, [pc, #80]	; (80058d8 <xPortStartScheduler+0x138>)
 8005888:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800588c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800588e:	f000 f8dd 	bl	8005a4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005892:	4b12      	ldr	r3, [pc, #72]	; (80058dc <xPortStartScheduler+0x13c>)
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005898:	f000 f8fc 	bl	8005a94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800589c:	4b10      	ldr	r3, [pc, #64]	; (80058e0 <xPortStartScheduler+0x140>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a0f      	ldr	r2, [pc, #60]	; (80058e0 <xPortStartScheduler+0x140>)
 80058a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80058a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058a8:	f7ff ff66 	bl	8005778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058ac:	f7ff f84a 	bl	8004944 <vTaskSwitchContext>
	prvTaskExitError();
 80058b0:	f7ff ff20 	bl	80056f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	e000ed00 	.word	0xe000ed00
 80058c4:	410fc271 	.word	0x410fc271
 80058c8:	410fc270 	.word	0x410fc270
 80058cc:	e000e400 	.word	0xe000e400
 80058d0:	20000f8c 	.word	0x20000f8c
 80058d4:	20000f90 	.word	0x20000f90
 80058d8:	e000ed20 	.word	0xe000ed20
 80058dc:	2000000c 	.word	0x2000000c
 80058e0:	e000ef34 	.word	0xe000ef34

080058e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	607b      	str	r3, [r7, #4]
}
 80058fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058fe:	4b0f      	ldr	r3, [pc, #60]	; (800593c <vPortEnterCritical+0x58>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3301      	adds	r3, #1
 8005904:	4a0d      	ldr	r2, [pc, #52]	; (800593c <vPortEnterCritical+0x58>)
 8005906:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005908:	4b0c      	ldr	r3, [pc, #48]	; (800593c <vPortEnterCritical+0x58>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d10f      	bne.n	8005930 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <vPortEnterCritical+0x5c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <vPortEnterCritical+0x4c>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	603b      	str	r3, [r7, #0]
}
 800592c:	bf00      	nop
 800592e:	e7fe      	b.n	800592e <vPortEnterCritical+0x4a>
	}
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	2000000c 	.word	0x2000000c
 8005940:	e000ed04 	.word	0xe000ed04

08005944 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800594a:	4b12      	ldr	r3, [pc, #72]	; (8005994 <vPortExitCritical+0x50>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10a      	bne.n	8005968 <vPortExitCritical+0x24>
	__asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	607b      	str	r3, [r7, #4]
}
 8005964:	bf00      	nop
 8005966:	e7fe      	b.n	8005966 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005968:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <vPortExitCritical+0x50>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3b01      	subs	r3, #1
 800596e:	4a09      	ldr	r2, [pc, #36]	; (8005994 <vPortExitCritical+0x50>)
 8005970:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005972:	4b08      	ldr	r3, [pc, #32]	; (8005994 <vPortExitCritical+0x50>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d105      	bne.n	8005986 <vPortExitCritical+0x42>
 800597a:	2300      	movs	r3, #0
 800597c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	f383 8811 	msr	BASEPRI, r3
}
 8005984:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	2000000c 	.word	0x2000000c
	...

080059a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059a0:	f3ef 8009 	mrs	r0, PSP
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	4b15      	ldr	r3, [pc, #84]	; (8005a00 <pxCurrentTCBConst>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	f01e 0f10 	tst.w	lr, #16
 80059b0:	bf08      	it	eq
 80059b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ba:	6010      	str	r0, [r2, #0]
 80059bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059c4:	f380 8811 	msr	BASEPRI, r0
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f7fe ffb8 	bl	8004944 <vTaskSwitchContext>
 80059d4:	f04f 0000 	mov.w	r0, #0
 80059d8:	f380 8811 	msr	BASEPRI, r0
 80059dc:	bc09      	pop	{r0, r3}
 80059de:	6819      	ldr	r1, [r3, #0]
 80059e0:	6808      	ldr	r0, [r1, #0]
 80059e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e6:	f01e 0f10 	tst.w	lr, #16
 80059ea:	bf08      	it	eq
 80059ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059f0:	f380 8809 	msr	PSP, r0
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	f3af 8000 	nop.w

08005a00 <pxCurrentTCBConst>:
 8005a00:	20000960 	.word	0x20000960
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a04:	bf00      	nop
 8005a06:	bf00      	nop

08005a08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	607b      	str	r3, [r7, #4]
}
 8005a20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a22:	f7fe fed5 	bl	80047d0 <xTaskIncrementTick>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a2c:	4b06      	ldr	r3, [pc, #24]	; (8005a48 <xPortSysTickHandler+0x40>)
 8005a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	2300      	movs	r3, #0
 8005a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	f383 8811 	msr	BASEPRI, r3
}
 8005a3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a40:	bf00      	nop
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	e000ed04 	.word	0xe000ed04

08005a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <vPortSetupTimerInterrupt+0x34>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a56:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <vPortSetupTimerInterrupt+0x38>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a5c:	4b0a      	ldr	r3, [pc, #40]	; (8005a88 <vPortSetupTimerInterrupt+0x3c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a0a      	ldr	r2, [pc, #40]	; (8005a8c <vPortSetupTimerInterrupt+0x40>)
 8005a62:	fba2 2303 	umull	r2, r3, r2, r3
 8005a66:	099b      	lsrs	r3, r3, #6
 8005a68:	4a09      	ldr	r2, [pc, #36]	; (8005a90 <vPortSetupTimerInterrupt+0x44>)
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a6e:	4b04      	ldr	r3, [pc, #16]	; (8005a80 <vPortSetupTimerInterrupt+0x34>)
 8005a70:	2207      	movs	r2, #7
 8005a72:	601a      	str	r2, [r3, #0]
}
 8005a74:	bf00      	nop
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	e000e010 	.word	0xe000e010
 8005a84:	e000e018 	.word	0xe000e018
 8005a88:	20000000 	.word	0x20000000
 8005a8c:	10624dd3 	.word	0x10624dd3
 8005a90:	e000e014 	.word	0xe000e014

08005a94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005aa4 <vPortEnableVFP+0x10>
 8005a98:	6801      	ldr	r1, [r0, #0]
 8005a9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a9e:	6001      	str	r1, [r0, #0]
 8005aa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005aa2:	bf00      	nop
 8005aa4:	e000ed88 	.word	0xe000ed88

08005aa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005aae:	f3ef 8305 	mrs	r3, IPSR
 8005ab2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2b0f      	cmp	r3, #15
 8005ab8:	d914      	bls.n	8005ae4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005aba:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <vPortValidateInterruptPriority+0x70>)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ac4:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <vPortValidateInterruptPriority+0x74>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	7afa      	ldrb	r2, [r7, #11]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d20a      	bcs.n	8005ae4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	607b      	str	r3, [r7, #4]
}
 8005ae0:	bf00      	nop
 8005ae2:	e7fe      	b.n	8005ae2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ae4:	4b0e      	ldr	r3, [pc, #56]	; (8005b20 <vPortValidateInterruptPriority+0x78>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005aec:	4b0d      	ldr	r3, [pc, #52]	; (8005b24 <vPortValidateInterruptPriority+0x7c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d90a      	bls.n	8005b0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	603b      	str	r3, [r7, #0]
}
 8005b06:	bf00      	nop
 8005b08:	e7fe      	b.n	8005b08 <vPortValidateInterruptPriority+0x60>
	}
 8005b0a:	bf00      	nop
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	e000e3f0 	.word	0xe000e3f0
 8005b1c:	20000f8c 	.word	0x20000f8c
 8005b20:	e000ed0c 	.word	0xe000ed0c
 8005b24:	20000f90 	.word	0x20000f90

08005b28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08a      	sub	sp, #40	; 0x28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b30:	2300      	movs	r3, #0
 8005b32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b34:	f7fe fd90 	bl	8004658 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b38:	4b5b      	ldr	r3, [pc, #364]	; (8005ca8 <pvPortMalloc+0x180>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b40:	f000 f920 	bl	8005d84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b44:	4b59      	ldr	r3, [pc, #356]	; (8005cac <pvPortMalloc+0x184>)
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f040 8093 	bne.w	8005c78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01d      	beq.n	8005b94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005b58:	2208      	movs	r2, #8
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d014      	beq.n	8005b94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f023 0307 	bic.w	r3, r3, #7
 8005b70:	3308      	adds	r3, #8
 8005b72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <pvPortMalloc+0x6c>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	617b      	str	r3, [r7, #20]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d06e      	beq.n	8005c78 <pvPortMalloc+0x150>
 8005b9a:	4b45      	ldr	r3, [pc, #276]	; (8005cb0 <pvPortMalloc+0x188>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d869      	bhi.n	8005c78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ba4:	4b43      	ldr	r3, [pc, #268]	; (8005cb4 <pvPortMalloc+0x18c>)
 8005ba6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ba8:	4b42      	ldr	r3, [pc, #264]	; (8005cb4 <pvPortMalloc+0x18c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bae:	e004      	b.n	8005bba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d903      	bls.n	8005bcc <pvPortMalloc+0xa4>
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f1      	bne.n	8005bb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bcc:	4b36      	ldr	r3, [pc, #216]	; (8005ca8 <pvPortMalloc+0x180>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d050      	beq.n	8005c78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2208      	movs	r2, #8
 8005bdc:	4413      	add	r3, r2
 8005bde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	1ad2      	subs	r2, r2, r3
 8005bf0:	2308      	movs	r3, #8
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d91f      	bls.n	8005c38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <pvPortMalloc+0xf8>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	613b      	str	r3, [r7, #16]
}
 8005c1c:	bf00      	nop
 8005c1e:	e7fe      	b.n	8005c1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	1ad2      	subs	r2, r2, r3
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c32:	69b8      	ldr	r0, [r7, #24]
 8005c34:	f000 f908 	bl	8005e48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c38:	4b1d      	ldr	r3, [pc, #116]	; (8005cb0 <pvPortMalloc+0x188>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	4a1b      	ldr	r2, [pc, #108]	; (8005cb0 <pvPortMalloc+0x188>)
 8005c44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c46:	4b1a      	ldr	r3, [pc, #104]	; (8005cb0 <pvPortMalloc+0x188>)
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	4b1b      	ldr	r3, [pc, #108]	; (8005cb8 <pvPortMalloc+0x190>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d203      	bcs.n	8005c5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c52:	4b17      	ldr	r3, [pc, #92]	; (8005cb0 <pvPortMalloc+0x188>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a18      	ldr	r2, [pc, #96]	; (8005cb8 <pvPortMalloc+0x190>)
 8005c58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	4b13      	ldr	r3, [pc, #76]	; (8005cac <pvPortMalloc+0x184>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005c6e:	4b13      	ldr	r3, [pc, #76]	; (8005cbc <pvPortMalloc+0x194>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3301      	adds	r3, #1
 8005c74:	4a11      	ldr	r2, [pc, #68]	; (8005cbc <pvPortMalloc+0x194>)
 8005c76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c78:	f7fe fcfc 	bl	8004674 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <pvPortMalloc+0x174>
	__asm volatile
 8005c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	60fb      	str	r3, [r7, #12]
}
 8005c98:	bf00      	nop
 8005c9a:	e7fe      	b.n	8005c9a <pvPortMalloc+0x172>
	return pvReturn;
 8005c9c:	69fb      	ldr	r3, [r7, #28]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3728      	adds	r7, #40	; 0x28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20004b9c 	.word	0x20004b9c
 8005cac:	20004bb0 	.word	0x20004bb0
 8005cb0:	20004ba0 	.word	0x20004ba0
 8005cb4:	20004b94 	.word	0x20004b94
 8005cb8:	20004ba4 	.word	0x20004ba4
 8005cbc:	20004ba8 	.word	0x20004ba8

08005cc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d04d      	beq.n	8005d6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005cd2:	2308      	movs	r3, #8
 8005cd4:	425b      	negs	r3, r3
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4413      	add	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	4b24      	ldr	r3, [pc, #144]	; (8005d78 <vPortFree+0xb8>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10a      	bne.n	8005d04 <vPortFree+0x44>
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	60fb      	str	r3, [r7, #12]
}
 8005d00:	bf00      	nop
 8005d02:	e7fe      	b.n	8005d02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <vPortFree+0x62>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	60bb      	str	r3, [r7, #8]
}
 8005d1e:	bf00      	nop
 8005d20:	e7fe      	b.n	8005d20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	4b14      	ldr	r3, [pc, #80]	; (8005d78 <vPortFree+0xb8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d01e      	beq.n	8005d6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d11a      	bne.n	8005d6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	4b0e      	ldr	r3, [pc, #56]	; (8005d78 <vPortFree+0xb8>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	43db      	mvns	r3, r3
 8005d42:	401a      	ands	r2, r3
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d48:	f7fe fc86 	bl	8004658 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <vPortFree+0xbc>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4413      	add	r3, r2
 8005d56:	4a09      	ldr	r2, [pc, #36]	; (8005d7c <vPortFree+0xbc>)
 8005d58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d5a:	6938      	ldr	r0, [r7, #16]
 8005d5c:	f000 f874 	bl	8005e48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d60:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <vPortFree+0xc0>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3301      	adds	r3, #1
 8005d66:	4a06      	ldr	r2, [pc, #24]	; (8005d80 <vPortFree+0xc0>)
 8005d68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005d6a:	f7fe fc83 	bl	8004674 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d6e:	bf00      	nop
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20004bb0 	.word	0x20004bb0
 8005d7c:	20004ba0 	.word	0x20004ba0
 8005d80:	20004bac 	.word	0x20004bac

08005d84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d90:	4b27      	ldr	r3, [pc, #156]	; (8005e30 <prvHeapInit+0xac>)
 8005d92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00c      	beq.n	8005db8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3307      	adds	r3, #7
 8005da2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0307 	bic.w	r3, r3, #7
 8005daa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	4a1f      	ldr	r2, [pc, #124]	; (8005e30 <prvHeapInit+0xac>)
 8005db4:	4413      	add	r3, r2
 8005db6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005dbc:	4a1d      	ldr	r2, [pc, #116]	; (8005e34 <prvHeapInit+0xb0>)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005dc2:	4b1c      	ldr	r3, [pc, #112]	; (8005e34 <prvHeapInit+0xb0>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	4413      	add	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005dd0:	2208      	movs	r2, #8
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	1a9b      	subs	r3, r3, r2
 8005dd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 0307 	bic.w	r3, r3, #7
 8005dde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4a15      	ldr	r2, [pc, #84]	; (8005e38 <prvHeapInit+0xb4>)
 8005de4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005de6:	4b14      	ldr	r3, [pc, #80]	; (8005e38 <prvHeapInit+0xb4>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2200      	movs	r2, #0
 8005dec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005dee:	4b12      	ldr	r3, [pc, #72]	; (8005e38 <prvHeapInit+0xb4>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	1ad2      	subs	r2, r2, r3
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e04:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <prvHeapInit+0xb4>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	4a0a      	ldr	r2, [pc, #40]	; (8005e3c <prvHeapInit+0xb8>)
 8005e12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	4a09      	ldr	r2, [pc, #36]	; (8005e40 <prvHeapInit+0xbc>)
 8005e1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e1c:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <prvHeapInit+0xc0>)
 8005e1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e22:	601a      	str	r2, [r3, #0]
}
 8005e24:	bf00      	nop
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	20000f94 	.word	0x20000f94
 8005e34:	20004b94 	.word	0x20004b94
 8005e38:	20004b9c 	.word	0x20004b9c
 8005e3c:	20004ba4 	.word	0x20004ba4
 8005e40:	20004ba0 	.word	0x20004ba0
 8005e44:	20004bb0 	.word	0x20004bb0

08005e48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e50:	4b28      	ldr	r3, [pc, #160]	; (8005ef4 <prvInsertBlockIntoFreeList+0xac>)
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	e002      	b.n	8005e5c <prvInsertBlockIntoFreeList+0x14>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d8f7      	bhi.n	8005e56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	4413      	add	r3, r2
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d108      	bne.n	8005e8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	441a      	add	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	441a      	add	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d118      	bne.n	8005ed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	4b15      	ldr	r3, [pc, #84]	; (8005ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d00d      	beq.n	8005ec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	441a      	add	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	e008      	b.n	8005ed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ec6:	4b0c      	ldr	r3, [pc, #48]	; (8005ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	e003      	b.n	8005ed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d002      	beq.n	8005ee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ee6:	bf00      	nop
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	20004b94 	.word	0x20004b94
 8005ef8:	20004b9c 	.word	0x20004b9c

08005efc <__libc_init_array>:
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	4d0d      	ldr	r5, [pc, #52]	; (8005f34 <__libc_init_array+0x38>)
 8005f00:	4c0d      	ldr	r4, [pc, #52]	; (8005f38 <__libc_init_array+0x3c>)
 8005f02:	1b64      	subs	r4, r4, r5
 8005f04:	10a4      	asrs	r4, r4, #2
 8005f06:	2600      	movs	r6, #0
 8005f08:	42a6      	cmp	r6, r4
 8005f0a:	d109      	bne.n	8005f20 <__libc_init_array+0x24>
 8005f0c:	4d0b      	ldr	r5, [pc, #44]	; (8005f3c <__libc_init_array+0x40>)
 8005f0e:	4c0c      	ldr	r4, [pc, #48]	; (8005f40 <__libc_init_array+0x44>)
 8005f10:	f000 f8f2 	bl	80060f8 <_init>
 8005f14:	1b64      	subs	r4, r4, r5
 8005f16:	10a4      	asrs	r4, r4, #2
 8005f18:	2600      	movs	r6, #0
 8005f1a:	42a6      	cmp	r6, r4
 8005f1c:	d105      	bne.n	8005f2a <__libc_init_array+0x2e>
 8005f1e:	bd70      	pop	{r4, r5, r6, pc}
 8005f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f24:	4798      	blx	r3
 8005f26:	3601      	adds	r6, #1
 8005f28:	e7ee      	b.n	8005f08 <__libc_init_array+0xc>
 8005f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f2e:	4798      	blx	r3
 8005f30:	3601      	adds	r6, #1
 8005f32:	e7f2      	b.n	8005f1a <__libc_init_array+0x1e>
 8005f34:	08006220 	.word	0x08006220
 8005f38:	08006220 	.word	0x08006220
 8005f3c:	08006220 	.word	0x08006220
 8005f40:	08006224 	.word	0x08006224

08005f44 <__retarget_lock_acquire_recursive>:
 8005f44:	4770      	bx	lr

08005f46 <__retarget_lock_release_recursive>:
 8005f46:	4770      	bx	lr

08005f48 <memcpy>:
 8005f48:	440a      	add	r2, r1
 8005f4a:	4291      	cmp	r1, r2
 8005f4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f50:	d100      	bne.n	8005f54 <memcpy+0xc>
 8005f52:	4770      	bx	lr
 8005f54:	b510      	push	{r4, lr}
 8005f56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f5e:	4291      	cmp	r1, r2
 8005f60:	d1f9      	bne.n	8005f56 <memcpy+0xe>
 8005f62:	bd10      	pop	{r4, pc}

08005f64 <memset>:
 8005f64:	4402      	add	r2, r0
 8005f66:	4603      	mov	r3, r0
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d100      	bne.n	8005f6e <memset+0xa>
 8005f6c:	4770      	bx	lr
 8005f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f72:	e7f9      	b.n	8005f68 <memset+0x4>

08005f74 <cleanup_glue>:
 8005f74:	b538      	push	{r3, r4, r5, lr}
 8005f76:	460c      	mov	r4, r1
 8005f78:	6809      	ldr	r1, [r1, #0]
 8005f7a:	4605      	mov	r5, r0
 8005f7c:	b109      	cbz	r1, 8005f82 <cleanup_glue+0xe>
 8005f7e:	f7ff fff9 	bl	8005f74 <cleanup_glue>
 8005f82:	4621      	mov	r1, r4
 8005f84:	4628      	mov	r0, r5
 8005f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f8a:	f000 b869 	b.w	8006060 <_free_r>
	...

08005f90 <_reclaim_reent>:
 8005f90:	4b2c      	ldr	r3, [pc, #176]	; (8006044 <_reclaim_reent+0xb4>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4283      	cmp	r3, r0
 8005f96:	b570      	push	{r4, r5, r6, lr}
 8005f98:	4604      	mov	r4, r0
 8005f9a:	d051      	beq.n	8006040 <_reclaim_reent+0xb0>
 8005f9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005f9e:	b143      	cbz	r3, 8005fb2 <_reclaim_reent+0x22>
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d14a      	bne.n	800603c <_reclaim_reent+0xac>
 8005fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fa8:	6819      	ldr	r1, [r3, #0]
 8005faa:	b111      	cbz	r1, 8005fb2 <_reclaim_reent+0x22>
 8005fac:	4620      	mov	r0, r4
 8005fae:	f000 f857 	bl	8006060 <_free_r>
 8005fb2:	6961      	ldr	r1, [r4, #20]
 8005fb4:	b111      	cbz	r1, 8005fbc <_reclaim_reent+0x2c>
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f000 f852 	bl	8006060 <_free_r>
 8005fbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005fbe:	b111      	cbz	r1, 8005fc6 <_reclaim_reent+0x36>
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f000 f84d 	bl	8006060 <_free_r>
 8005fc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005fc8:	b111      	cbz	r1, 8005fd0 <_reclaim_reent+0x40>
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 f848 	bl	8006060 <_free_r>
 8005fd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005fd2:	b111      	cbz	r1, 8005fda <_reclaim_reent+0x4a>
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	f000 f843 	bl	8006060 <_free_r>
 8005fda:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005fdc:	b111      	cbz	r1, 8005fe4 <_reclaim_reent+0x54>
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f000 f83e 	bl	8006060 <_free_r>
 8005fe4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005fe6:	b111      	cbz	r1, 8005fee <_reclaim_reent+0x5e>
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 f839 	bl	8006060 <_free_r>
 8005fee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005ff0:	b111      	cbz	r1, 8005ff8 <_reclaim_reent+0x68>
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f000 f834 	bl	8006060 <_free_r>
 8005ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ffa:	b111      	cbz	r1, 8006002 <_reclaim_reent+0x72>
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f000 f82f 	bl	8006060 <_free_r>
 8006002:	69a3      	ldr	r3, [r4, #24]
 8006004:	b1e3      	cbz	r3, 8006040 <_reclaim_reent+0xb0>
 8006006:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006008:	4620      	mov	r0, r4
 800600a:	4798      	blx	r3
 800600c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800600e:	b1b9      	cbz	r1, 8006040 <_reclaim_reent+0xb0>
 8006010:	4620      	mov	r0, r4
 8006012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006016:	f7ff bfad 	b.w	8005f74 <cleanup_glue>
 800601a:	5949      	ldr	r1, [r1, r5]
 800601c:	b941      	cbnz	r1, 8006030 <_reclaim_reent+0xa0>
 800601e:	3504      	adds	r5, #4
 8006020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006022:	2d80      	cmp	r5, #128	; 0x80
 8006024:	68d9      	ldr	r1, [r3, #12]
 8006026:	d1f8      	bne.n	800601a <_reclaim_reent+0x8a>
 8006028:	4620      	mov	r0, r4
 800602a:	f000 f819 	bl	8006060 <_free_r>
 800602e:	e7ba      	b.n	8005fa6 <_reclaim_reent+0x16>
 8006030:	680e      	ldr	r6, [r1, #0]
 8006032:	4620      	mov	r0, r4
 8006034:	f000 f814 	bl	8006060 <_free_r>
 8006038:	4631      	mov	r1, r6
 800603a:	e7ef      	b.n	800601c <_reclaim_reent+0x8c>
 800603c:	2500      	movs	r5, #0
 800603e:	e7ef      	b.n	8006020 <_reclaim_reent+0x90>
 8006040:	bd70      	pop	{r4, r5, r6, pc}
 8006042:	bf00      	nop
 8006044:	20000010 	.word	0x20000010

08006048 <__malloc_lock>:
 8006048:	4801      	ldr	r0, [pc, #4]	; (8006050 <__malloc_lock+0x8>)
 800604a:	f7ff bf7b 	b.w	8005f44 <__retarget_lock_acquire_recursive>
 800604e:	bf00      	nop
 8006050:	20004bb4 	.word	0x20004bb4

08006054 <__malloc_unlock>:
 8006054:	4801      	ldr	r0, [pc, #4]	; (800605c <__malloc_unlock+0x8>)
 8006056:	f7ff bf76 	b.w	8005f46 <__retarget_lock_release_recursive>
 800605a:	bf00      	nop
 800605c:	20004bb4 	.word	0x20004bb4

08006060 <_free_r>:
 8006060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006062:	2900      	cmp	r1, #0
 8006064:	d044      	beq.n	80060f0 <_free_r+0x90>
 8006066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800606a:	9001      	str	r0, [sp, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	f1a1 0404 	sub.w	r4, r1, #4
 8006072:	bfb8      	it	lt
 8006074:	18e4      	addlt	r4, r4, r3
 8006076:	f7ff ffe7 	bl	8006048 <__malloc_lock>
 800607a:	4a1e      	ldr	r2, [pc, #120]	; (80060f4 <_free_r+0x94>)
 800607c:	9801      	ldr	r0, [sp, #4]
 800607e:	6813      	ldr	r3, [r2, #0]
 8006080:	b933      	cbnz	r3, 8006090 <_free_r+0x30>
 8006082:	6063      	str	r3, [r4, #4]
 8006084:	6014      	str	r4, [r2, #0]
 8006086:	b003      	add	sp, #12
 8006088:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800608c:	f7ff bfe2 	b.w	8006054 <__malloc_unlock>
 8006090:	42a3      	cmp	r3, r4
 8006092:	d908      	bls.n	80060a6 <_free_r+0x46>
 8006094:	6825      	ldr	r5, [r4, #0]
 8006096:	1961      	adds	r1, r4, r5
 8006098:	428b      	cmp	r3, r1
 800609a:	bf01      	itttt	eq
 800609c:	6819      	ldreq	r1, [r3, #0]
 800609e:	685b      	ldreq	r3, [r3, #4]
 80060a0:	1949      	addeq	r1, r1, r5
 80060a2:	6021      	streq	r1, [r4, #0]
 80060a4:	e7ed      	b.n	8006082 <_free_r+0x22>
 80060a6:	461a      	mov	r2, r3
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	b10b      	cbz	r3, 80060b0 <_free_r+0x50>
 80060ac:	42a3      	cmp	r3, r4
 80060ae:	d9fa      	bls.n	80060a6 <_free_r+0x46>
 80060b0:	6811      	ldr	r1, [r2, #0]
 80060b2:	1855      	adds	r5, r2, r1
 80060b4:	42a5      	cmp	r5, r4
 80060b6:	d10b      	bne.n	80060d0 <_free_r+0x70>
 80060b8:	6824      	ldr	r4, [r4, #0]
 80060ba:	4421      	add	r1, r4
 80060bc:	1854      	adds	r4, r2, r1
 80060be:	42a3      	cmp	r3, r4
 80060c0:	6011      	str	r1, [r2, #0]
 80060c2:	d1e0      	bne.n	8006086 <_free_r+0x26>
 80060c4:	681c      	ldr	r4, [r3, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	6053      	str	r3, [r2, #4]
 80060ca:	4421      	add	r1, r4
 80060cc:	6011      	str	r1, [r2, #0]
 80060ce:	e7da      	b.n	8006086 <_free_r+0x26>
 80060d0:	d902      	bls.n	80060d8 <_free_r+0x78>
 80060d2:	230c      	movs	r3, #12
 80060d4:	6003      	str	r3, [r0, #0]
 80060d6:	e7d6      	b.n	8006086 <_free_r+0x26>
 80060d8:	6825      	ldr	r5, [r4, #0]
 80060da:	1961      	adds	r1, r4, r5
 80060dc:	428b      	cmp	r3, r1
 80060de:	bf04      	itt	eq
 80060e0:	6819      	ldreq	r1, [r3, #0]
 80060e2:	685b      	ldreq	r3, [r3, #4]
 80060e4:	6063      	str	r3, [r4, #4]
 80060e6:	bf04      	itt	eq
 80060e8:	1949      	addeq	r1, r1, r5
 80060ea:	6021      	streq	r1, [r4, #0]
 80060ec:	6054      	str	r4, [r2, #4]
 80060ee:	e7ca      	b.n	8006086 <_free_r+0x26>
 80060f0:	b003      	add	sp, #12
 80060f2:	bd30      	pop	{r4, r5, pc}
 80060f4:	20004bb8 	.word	0x20004bb8

080060f8 <_init>:
 80060f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fa:	bf00      	nop
 80060fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fe:	bc08      	pop	{r3}
 8006100:	469e      	mov	lr, r3
 8006102:	4770      	bx	lr

08006104 <_fini>:
 8006104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006106:	bf00      	nop
 8006108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610a:	bc08      	pop	{r3}
 800610c:	469e      	mov	lr, r3
 800610e:	4770      	bx	lr
