
comm_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08006960  08006960  00016960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ad0  08006ad0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006ad0  08006ad0  00016ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ad8  08006ad8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ad8  08006ad8  00016ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006adc  08006adc  00016adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b58  20000074  08006b54  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bcc  08006b54  00024bcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a4cf  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003547  00000000  00000000  0003a573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  0003dac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  0003ef40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003495  00000000  00000000  00040298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166b4  00000000  00000000  0004372d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000970f6  00000000  00000000  00059de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0ed7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000596c  00000000  00000000  000f0f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006948 	.word	0x08006948

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006948 	.word	0x08006948

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004e8:	4b04      	ldr	r3, [pc, #16]	; (80004fc <__NVIC_GetPriorityGrouping+0x18>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	0a1b      	lsrs	r3, r3, #8
 80004ee:	f003 0307 	and.w	r3, r3, #7
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	e000ed00 	.word	0xe000ed00

08000500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800050a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050e:	2b00      	cmp	r3, #0
 8000510:	db0b      	blt.n	800052a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	f003 021f 	and.w	r2, r3, #31
 8000518:	4907      	ldr	r1, [pc, #28]	; (8000538 <__NVIC_EnableIRQ+0x38>)
 800051a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051e:	095b      	lsrs	r3, r3, #5
 8000520:	2001      	movs	r0, #1
 8000522:	fa00 f202 	lsl.w	r2, r0, r2
 8000526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	e000e100 	.word	0xe000e100

0800053c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	6039      	str	r1, [r7, #0]
 8000546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054c:	2b00      	cmp	r3, #0
 800054e:	db0a      	blt.n	8000566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	b2da      	uxtb	r2, r3
 8000554:	490c      	ldr	r1, [pc, #48]	; (8000588 <__NVIC_SetPriority+0x4c>)
 8000556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055a:	0112      	lsls	r2, r2, #4
 800055c:	b2d2      	uxtb	r2, r2
 800055e:	440b      	add	r3, r1
 8000560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000564:	e00a      	b.n	800057c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4908      	ldr	r1, [pc, #32]	; (800058c <__NVIC_SetPriority+0x50>)
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	f003 030f 	and.w	r3, r3, #15
 8000572:	3b04      	subs	r3, #4
 8000574:	0112      	lsls	r2, r2, #4
 8000576:	b2d2      	uxtb	r2, r2
 8000578:	440b      	add	r3, r1
 800057a:	761a      	strb	r2, [r3, #24]
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	e000e100 	.word	0xe000e100
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000590:	b480      	push	{r7}
 8000592:	b089      	sub	sp, #36	; 0x24
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f003 0307 	and.w	r3, r3, #7
 80005a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a4:	69fb      	ldr	r3, [r7, #28]
 80005a6:	f1c3 0307 	rsb	r3, r3, #7
 80005aa:	2b04      	cmp	r3, #4
 80005ac:	bf28      	it	cs
 80005ae:	2304      	movcs	r3, #4
 80005b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	3304      	adds	r3, #4
 80005b6:	2b06      	cmp	r3, #6
 80005b8:	d902      	bls.n	80005c0 <NVIC_EncodePriority+0x30>
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	3b03      	subs	r3, #3
 80005be:	e000      	b.n	80005c2 <NVIC_EncodePriority+0x32>
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c4:	f04f 32ff 	mov.w	r2, #4294967295
 80005c8:	69bb      	ldr	r3, [r7, #24]
 80005ca:	fa02 f303 	lsl.w	r3, r2, r3
 80005ce:	43da      	mvns	r2, r3
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	401a      	ands	r2, r3
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005d8:	f04f 31ff 	mov.w	r1, #4294967295
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	fa01 f303 	lsl.w	r3, r1, r3
 80005e2:	43d9      	mvns	r1, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e8:	4313      	orrs	r3, r2
         );
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3724      	adds	r7, #36	; 0x24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
	...

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f000 fc6a 	bl	8000ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f826 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 f8c0 	bl	8000788 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000608:	f000 f882 	bl	8000710 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  start_rtos();
 800060c:	f000 f93c 	bl	8000888 <start_rtos>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000610:	f002 ffa2 	bl	8003558 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8000614:	4a09      	ldr	r2, [pc, #36]	; (800063c <main+0x44>)
 8000616:	2102      	movs	r1, #2
 8000618:	2010      	movs	r0, #16
 800061a:	f003 f894 	bl	8003746 <osMessageQueueNew>
 800061e:	4603      	mov	r3, r0
 8000620:	4a07      	ldr	r2, [pc, #28]	; (8000640 <main+0x48>)
 8000622:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000624:	4a07      	ldr	r2, [pc, #28]	; (8000644 <main+0x4c>)
 8000626:	2100      	movs	r1, #0
 8000628:	4807      	ldr	r0, [pc, #28]	; (8000648 <main+0x50>)
 800062a:	f002 ffdf 	bl	80035ec <osThreadNew>
 800062e:	4603      	mov	r3, r0
 8000630:	4a06      	ldr	r2, [pc, #24]	; (800064c <main+0x54>)
 8000632:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000634:	f002 ffb4 	bl	80035a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000638:	e7fe      	b.n	8000638 <main+0x40>
 800063a:	bf00      	nop
 800063c:	08006a40 	.word	0x08006a40
 8000640:	200000d8 	.word	0x200000d8
 8000644:	08006a1c 	.word	0x08006a1c
 8000648:	08000849 	.word	0x08000849
 800064c:	200000d4 	.word	0x200000d4

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f006 f8a8 	bl	80067b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b23      	ldr	r3, [pc, #140]	; (8000708 <SystemClock_Config+0xb8>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a22      	ldr	r2, [pc, #136]	; (8000708 <SystemClock_Config+0xb8>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b20      	ldr	r3, [pc, #128]	; (8000708 <SystemClock_Config+0xb8>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <SystemClock_Config+0xbc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800069c:	4a1b      	ldr	r2, [pc, #108]	; (800070c <SystemClock_Config+0xbc>)
 800069e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <SystemClock_Config+0xbc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006bc:	2300      	movs	r3, #0
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 ff59 	bl	800157c <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006d0:	f000 f8d4 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 f9bc 	bl	8001a6c <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006fa:	f000 f8bf 	bl	800087c <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	; 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_USART1_UART_Init+0x6c>)
 8000716:	4a1a      	ldr	r2, [pc, #104]	; (8000780 <MX_USART1_UART_Init+0x70>)
 8000718:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 576000;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_USART1_UART_Init+0x6c>)
 800071c:	4a19      	ldr	r2, [pc, #100]	; (8000784 <MX_USART1_UART_Init+0x74>)
 800071e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_USART1_UART_Init+0x6c>)
 8000722:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000726:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_USART1_UART_Init+0x6c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_USART1_UART_Init+0x6c>)
 8000730:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000734:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_USART1_UART_Init+0x6c>)
 8000738:	220c      	movs	r2, #12
 800073a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_USART1_UART_Init+0x6c>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_USART1_UART_Init+0x6c>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000748:	480c      	ldr	r0, [pc, #48]	; (800077c <MX_USART1_UART_Init+0x6c>)
 800074a:	f001 fe21 	bl	8002390 <HAL_UART_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000754:	f000 f892 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000758:	f7ff fec4 	bl	80004e4 <__NVIC_GetPriorityGrouping>
 800075c:	4603      	mov	r3, r0
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff14 	bl	8000590 <NVIC_EncodePriority>
 8000768:	4603      	mov	r3, r0
 800076a:	4619      	mov	r1, r3
 800076c:	2025      	movs	r0, #37	; 0x25
 800076e:	f7ff fee5 	bl	800053c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000772:	2025      	movs	r0, #37	; 0x25
 8000774:	f7ff fec4 	bl	8000500 <__NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000090 	.word	0x20000090
 8000780:	40011000 	.word	0x40011000
 8000784:	0008ca00 	.word	0x0008ca00

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b26      	ldr	r3, [pc, #152]	; (800083c <MX_GPIO_Init+0xb4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a25      	ldr	r2, [pc, #148]	; (800083c <MX_GPIO_Init+0xb4>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b23      	ldr	r3, [pc, #140]	; (800083c <MX_GPIO_Init+0xb4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_GPIO_Init+0xb4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a1e      	ldr	r2, [pc, #120]	; (800083c <MX_GPIO_Init+0xb4>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_GPIO_Init+0xb4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_GPIO_Init+0xb4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a17      	ldr	r2, [pc, #92]	; (800083c <MX_GPIO_Init+0xb4>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_GPIO_Init+0xb4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f8:	4811      	ldr	r0, [pc, #68]	; (8000840 <MX_GPIO_Init+0xb8>)
 80007fa:	f000 fea5 	bl	8001548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4619      	mov	r1, r3
 8000816:	480a      	ldr	r0, [pc, #40]	; (8000840 <MX_GPIO_Init+0xb8>)
 8000818:	f000 fd12 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800081c:	2301      	movs	r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000824:	2301      	movs	r3, #1
 8000826:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	4619      	mov	r1, r3
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_GPIO_Init+0xbc>)
 8000830:	f000 fd06 	bl	8001240 <HAL_GPIO_Init>

}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40020800 	.word	0x40020800
 8000844:	40020000 	.word	0x40020000

08000848 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f002 ff5d 	bl	8003710 <osDelay>
 8000856:	e7fb      	b.n	8000850 <StartDefaultTask+0x8>

08000858 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a04      	ldr	r2, [pc, #16]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d101      	bne.n	800086e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800086a:	f000 fb55 	bl	8000f18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40000c00 	.word	0x40000c00

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	e7fe      	b.n	8000884 <Error_Handler+0x8>
	...

08000888 <start_rtos>:
TaskHandle_t hLedTask;
QueueHandle_t queueHandler01;
QueueHandle_t queueHandler02;
SemaphoreHandle_t xUart_semaphore;

void start_rtos(void) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af02      	add	r7, sp, #8
	queueHandler01 = xQueueCreate(1, sizeof(uint8_t) * DATA_PACK);
 800088e:	2200      	movs	r2, #0
 8000890:	212d      	movs	r1, #45	; 0x2d
 8000892:	2001      	movs	r0, #1
 8000894:	f003 f992 	bl	8003bbc <xQueueGenericCreate>
 8000898:	4603      	mov	r3, r0
 800089a:	4a1d      	ldr	r2, [pc, #116]	; (8000910 <start_rtos+0x88>)
 800089c:	6013      	str	r3, [r2, #0]
	queueHandler02 = xQueueCreate(1, sizeof(uint8_t) * DATA_PACK2);
 800089e:	2200      	movs	r2, #0
 80008a0:	2115      	movs	r1, #21
 80008a2:	2001      	movs	r0, #1
 80008a4:	f003 f98a 	bl	8003bbc <xQueueGenericCreate>
 80008a8:	4603      	mov	r3, r0
 80008aa:	4a1a      	ldr	r2, [pc, #104]	; (8000914 <start_rtos+0x8c>)
 80008ac:	6013      	str	r3, [r2, #0]

	xUart_semaphore = xSemaphoreCreateMutex();
 80008ae:	2001      	movs	r0, #1
 80008b0:	f003 f9fb 	bl	8003caa <xQueueCreateMutex>
 80008b4:	4603      	mov	r3, r0
 80008b6:	4a18      	ldr	r2, [pc, #96]	; (8000918 <start_rtos+0x90>)
 80008b8:	6013      	str	r3, [r2, #0]

	xTaskCreate(
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <start_rtos+0x94>)
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	2301      	movs	r3, #1
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	2300      	movs	r3, #0
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	4916      	ldr	r1, [pc, #88]	; (8000920 <start_rtos+0x98>)
 80008c8:	4816      	ldr	r0, [pc, #88]	; (8000924 <start_rtos+0x9c>)
 80008ca:	f003 ff70 	bl	80047ae <xTaskCreate>
		NULL,
		1,
		&hGenerateDataTask
	);

	xTaskCreate(
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <start_rtos+0xa0>)
 80008d0:	9301      	str	r3, [sp, #4]
 80008d2:	2301      	movs	r3, #1
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	2300      	movs	r3, #0
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	4914      	ldr	r1, [pc, #80]	; (800092c <start_rtos+0xa4>)
 80008dc:	4814      	ldr	r0, [pc, #80]	; (8000930 <start_rtos+0xa8>)
 80008de:	f003 ff66 	bl	80047ae <xTaskCreate>
		NULL,
		1,
		&hTransmitDataTask
	);

	xTaskCreate(
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <start_rtos+0xac>)
 80008e4:	9301      	str	r3, [sp, #4]
 80008e6:	2301      	movs	r3, #1
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	2300      	movs	r3, #0
 80008ec:	2280      	movs	r2, #128	; 0x80
 80008ee:	4912      	ldr	r1, [pc, #72]	; (8000938 <start_rtos+0xb0>)
 80008f0:	4812      	ldr	r0, [pc, #72]	; (800093c <start_rtos+0xb4>)
 80008f2:	f003 ff5c 	bl	80047ae <xTaskCreate>
		NULL,
		1,
		&hRecieveDataTask
	);

	xTaskCreate(
 80008f6:	4b12      	ldr	r3, [pc, #72]	; (8000940 <start_rtos+0xb8>)
 80008f8:	9301      	str	r3, [sp, #4]
 80008fa:	2301      	movs	r3, #1
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2300      	movs	r3, #0
 8000900:	2280      	movs	r2, #128	; 0x80
 8000902:	4910      	ldr	r1, [pc, #64]	; (8000944 <start_rtos+0xbc>)
 8000904:	4810      	ldr	r0, [pc, #64]	; (8000948 <start_rtos+0xc0>)
 8000906:	f003 ff52 	bl	80047ae <xTaskCreate>
		NULL,
		1,
		&hLedTask
	);

	vTaskStartScheduler();
 800090a:	f004 f95d 	bl	8004bc8 <vTaskStartScheduler>

	while(1);
 800090e:	e7fe      	b.n	800090e <start_rtos+0x86>
 8000910:	2000015c 	.word	0x2000015c
 8000914:	20000160 	.word	0x20000160
 8000918:	20000164 	.word	0x20000164
 800091c:	2000014c 	.word	0x2000014c
 8000920:	08006978 	.word	0x08006978
 8000924:	0800094d 	.word	0x0800094d
 8000928:	20000150 	.word	0x20000150
 800092c:	0800698c 	.word	0x0800698c
 8000930:	08000aad 	.word	0x08000aad
 8000934:	20000154 	.word	0x20000154
 8000938:	080069a0 	.word	0x080069a0
 800093c:	08000b61 	.word	0x08000b61
 8000940:	20000158 	.word	0x20000158
 8000944:	080069b0 	.word	0x080069b0
 8000948:	08000b1d 	.word	0x08000b1d

0800094c <generateDataTask>:
}

void generateDataTask(void *arg) {
 800094c:	b5b0      	push	{r4, r5, r7, lr}
 800094e:	b092      	sub	sp, #72	; 0x48
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	uint8_t sampleData[DATA_PACK] = {
 8000954:	4b53      	ldr	r3, [pc, #332]	; (8000aa4 <generateDataTask+0x158>)
 8000956:	f107 040c 	add.w	r4, r7, #12
 800095a:	461d      	mov	r5, r3
 800095c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000964:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000968:	c407      	stmia	r4!, {r0, r1, r2}
 800096a:	7023      	strb	r3, [r4, #0]
		'N', '1', 'N', '2', 'N', '3',
		'\r', '\n'
	};

	BaseType_t queueStatus;
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800096c:	f004 fa48 	bl	8004e00 <xTaskGetTickCount>
 8000970:	4603      	mov	r3, r0
 8000972:	60bb      	str	r3, [r7, #8]
	const TickType_t xFrequency = pdMS_TO_TICKS(MS_TO_TRANSMIT);
 8000974:	2364      	movs	r3, #100	; 0x64
 8000976:	643b      	str	r3, [r7, #64]	; 0x40

	uint8_t packCounter = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t pack10Counter = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	while(1) {

		if(packCounter >= 1) {
 8000984:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000988:	2b00      	cmp	r3, #0
 800098a:	d012      	beq.n	80009b2 <generateDataTask+0x66>
			sampleData[31] += 1;
 800098c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000990:	3301      	adds	r3, #1
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			sampleData[33] += 1;
 8000998:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800099c:	3301      	adds	r3, #1
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			sampleData[35] += 1;
 80009a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009a8:	3301      	adds	r3, #1
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80009b0:	e008      	b.n	80009c4 <generateDataTask+0x78>
		} else {
			sampleData[31] = 'D';
 80009b2:	2344      	movs	r3, #68	; 0x44
 80009b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			sampleData[33] = 'D';
 80009b8:	2344      	movs	r3, #68	; 0x44
 80009ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			sampleData[35] = 'D';
 80009be:	2344      	movs	r3, #68	; 0x44
 80009c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if(packCounter >= 7) {
 80009c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80009c8:	2b06      	cmp	r3, #6
 80009ca:	d929      	bls.n	8000a20 <generateDataTask+0xd4>
			if(pack10Counter == 0) {
 80009cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d133      	bne.n	8000a3c <generateDataTask+0xf0>
				sampleData[0] |= 0b01000000;
 80009d4:	7b3b      	ldrb	r3, [r7, #12]
 80009d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	733b      	strb	r3, [r7, #12]
				if(packCounter >= 8) {
 80009de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80009e2:	2b07      	cmp	r3, #7
 80009e4:	d912      	bls.n	8000a0c <generateDataTask+0xc0>
					sampleData[37] += 1;
 80009e6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80009ea:	3301      	adds	r3, #1
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
					sampleData[39] += 1;
 80009f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009f6:	3301      	adds	r3, #1
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					sampleData[41] += 1;
 80009fe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a02:	3301      	adds	r3, #1
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000a0a:	e017      	b.n	8000a3c <generateDataTask+0xf0>
				} else {
					sampleData[37] = 'N';
 8000a0c:	234e      	movs	r3, #78	; 0x4e
 8000a0e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
					sampleData[39] = 'N';
 8000a12:	234e      	movs	r3, #78	; 0x4e
 8000a14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					sampleData[41] = 'N';
 8000a18:	234e      	movs	r3, #78	; 0x4e
 8000a1a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000a1e:	e00d      	b.n	8000a3c <generateDataTask+0xf0>
				}
			}

		} else {
			sampleData[0] &= ~0b01000000;
 8000a20:	7b3b      	ldrb	r3, [r7, #12]
 8000a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	733b      	strb	r3, [r7, #12]
			sampleData[37] = '*';
 8000a2a:	232a      	movs	r3, #42	; 0x2a
 8000a2c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			sampleData[39] = '*';
 8000a30:	232a      	movs	r3, #42	; 0x2a
 8000a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			sampleData[41] = '*';
 8000a36:	232a      	movs	r3, #42	; 0x2a
 8000a38:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		}

		queueStatus = xQueueSend(queueHandler01, (void*)sampleData, xFrequency);
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <generateDataTask+0x15c>)
 8000a3e:	6818      	ldr	r0, [r3, #0]
 8000a40:	f107 010c 	add.w	r1, r7, #12
 8000a44:	2300      	movs	r3, #0
 8000a46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a48:	f003 f948 	bl	8003cdc <xQueueGenericSend>
 8000a4c:	63f8      	str	r0, [r7, #60]	; 0x3c
		if(queueStatus != pdTRUE) xQueueSend(queueHandler01, (void*)sampleData, xFrequency);
 8000a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d007      	beq.n	8000a64 <generateDataTask+0x118>
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <generateDataTask+0x15c>)
 8000a56:	6818      	ldr	r0, [r3, #0]
 8000a58:	f107 010c 	add.w	r1, r7, #12
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a60:	f003 f93c 	bl	8003cdc <xQueueGenericSend>
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000a64:	f107 0308 	add.w	r3, r7, #8
 8000a68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f003 fffa 	bl	8004a64 <vTaskDelayUntil>

		packCounter++;
 8000a70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a74:	3301      	adds	r3, #1
 8000a76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if(packCounter >= 10) {
 8000a7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a7e:	2b09      	cmp	r3, #9
 8000a80:	d980      	bls.n	8000984 <generateDataTask+0x38>
			packCounter = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			pack10Counter++;
 8000a88:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			if(pack10Counter >= 10) pack10Counter = 0;
 8000a92:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000a96:	2b09      	cmp	r3, #9
 8000a98:	f67f af74 	bls.w	8000984 <generateDataTask+0x38>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		if(packCounter >= 1) {
 8000aa2:	e76f      	b.n	8000984 <generateDataTask+0x38>
 8000aa4:	080069b8 	.word	0x080069b8
 8000aa8:	2000015c 	.word	0x2000015c

08000aac <transmitDataTask>:

	}
	vTaskDelete(hGenerateDataTask);
}

void transmitDataTask(void *arg) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b092      	sub	sp, #72	; 0x48
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	uint8_t generatedData [DATA_PACK];
	BaseType_t queueStatus;
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8000ab4:	f004 f9a4 	bl	8004e00 <xTaskGetTickCount>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	60fb      	str	r3, [r7, #12]
	const TickType_t xFrequency = pdMS_TO_TICKS(MS_TO_TRANSMIT);
 8000abc:	2364      	movs	r3, #100	; 0x64
 8000abe:	647b      	str	r3, [r7, #68]	; 0x44

	while(1) {
		queueStatus = xQueueReceive(queueHandler01, (void*)generatedData, xFrequency);
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <transmitDataTask+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f107 0110 	add.w	r1, r7, #16
 8000ac8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000aca:	4618      	mov	r0, r3
 8000acc:	f003 faa0 	bl	8004010 <xQueueReceive>
 8000ad0:	6438      	str	r0, [r7, #64]	; 0x40
		if(queueStatus == pdPASS) {
 8000ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d114      	bne.n	8000b02 <transmitDataTask+0x56>
			xSemaphoreTake(xUart_semaphore, portMAX_DELAY );
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <transmitDataTask+0x68>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f003 fb75 	bl	80041d0 <xQueueSemaphoreTake>
			HAL_UART_Transmit(&huart1, generatedData, DATA_PACK, 1);
 8000ae6:	f107 0110 	add.w	r1, r7, #16
 8000aea:	2301      	movs	r3, #1
 8000aec:	222d      	movs	r2, #45	; 0x2d
 8000aee:	480a      	ldr	r0, [pc, #40]	; (8000b18 <transmitDataTask+0x6c>)
 8000af0:	f001 fc9b 	bl	800242a <HAL_UART_Transmit>
			xSemaphoreGive(xUart_semaphore);
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <transmitDataTask+0x68>)
 8000af6:	6818      	ldr	r0, [r3, #0]
 8000af8:	2300      	movs	r3, #0
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	f003 f8ed 	bl	8003cdc <xQueueGenericSend>
		}
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f003 ffab 	bl	8004a64 <vTaskDelayUntil>
		queueStatus = xQueueReceive(queueHandler01, (void*)generatedData, xFrequency);
 8000b0e:	e7d7      	b.n	8000ac0 <transmitDataTask+0x14>
 8000b10:	2000015c 	.word	0x2000015c
 8000b14:	20000164 	.word	0x20000164
 8000b18:	20000090 	.word	0x20000090

08000b1c <ledTask>:
	}

	vTaskDelete(hTransmitDataTask);
}

void ledTask(void *arg) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	uint8_t recievedData [DATA_PACK2];
	BaseType_t queueStatus;
	const TickType_t xFrequency = pdMS_TO_TICKS(MS_TO_RECIEVE);
 8000b24:	2301      	movs	r3, #1
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24

	while(1) {
		queueStatus = xQueueReceive(queueHandler02, (void*)recievedData, xFrequency);
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <ledTask+0x3c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f107 0108 	add.w	r1, r7, #8
 8000b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b32:	4618      	mov	r0, r3
 8000b34:	f003 fa6c 	bl	8004010 <xQueueReceive>
 8000b38:	6238      	str	r0, [r7, #32]
		uint8_t state = (queueStatus == pdPASS) ? 0 : 1;
 8000b3a:	6a3b      	ldr	r3, [r7, #32]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	bf14      	ite	ne
 8000b40:	2301      	movne	r3, #1
 8000b42:	2300      	moveq	r3, #0
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	77fb      	strb	r3, [r7, #31]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, state);
 8000b48:	7ffb      	ldrb	r3, [r7, #31]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <ledTask+0x40>)
 8000b52:	f000 fcf9 	bl	8001548 <HAL_GPIO_WritePin>
	while(1) {
 8000b56:	e7e7      	b.n	8000b28 <ledTask+0xc>
 8000b58:	20000160 	.word	0x20000160
 8000b5c:	40020800 	.word	0x40020800

08000b60 <recieveDataTask>:
	}

	vTaskDelete(hLedTask);
}

void recieveDataTask(void *arg) {
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b08c      	sub	sp, #48	; 0x30
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	HAL_UART_StateTypeDef UART_status;
	uint8_t Loopback_state = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	const TickType_t xFrequency = pdMS_TO_TICKS(MS_TO_RECIEVE);
 8000b6e:	2301      	movs	r3, #1
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t UART_data_rx [3] = { '*', '*', '*', };
 8000b72:	4a36      	ldr	r2, [pc, #216]	; (8000c4c <recieveDataTask+0xec>)
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	6812      	ldr	r2, [r2, #0]
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	8019      	strh	r1, [r3, #0]
 8000b7e:	3302      	adds	r3, #2
 8000b80:	0c12      	lsrs	r2, r2, #16
 8000b82:	701a      	strb	r2, [r3, #0]
	uint8_t recievedData [DATA_PACK2] = {
 8000b84:	4b32      	ldr	r3, [pc, #200]	; (8000c50 <recieveDataTask+0xf0>)
 8000b86:	f107 040c 	add.w	r4, r7, #12
 8000b8a:	461d      	mov	r5, r3
 8000b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b94:	6020      	str	r0, [r4, #0]
 8000b96:	3404      	adds	r4, #4
 8000b98:	7021      	strb	r1, [r4, #0]
		'_', '_', '_', '*', '\r',
		'\n',
	};

	while(1) {
		xSemaphoreTake(xUart_semaphore, portMAX_DELAY);
 8000b9a:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <recieveDataTask+0xf4>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f003 fb14 	bl	80041d0 <xQueueSemaphoreTake>
		switch(Loopback_state) {
 8000ba8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d002      	beq.n	8000bb6 <recieveDataTask+0x56>
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d019      	beq.n	8000be8 <recieveDataTask+0x88>
 8000bb4:	e041      	b.n	8000c3a <recieveDataTask+0xda>
			case 0:
				UART_status = HAL_UART_GetState(&huart1);
 8000bb6:	4828      	ldr	r0, [pc, #160]	; (8000c58 <recieveDataTask+0xf8>)
 8000bb8:	f001 ffb2 	bl	8002b20 <HAL_UART_GetState>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if(UART_status == HAL_UART_STATE_READY || UART_status == HAL_UART_STATE_BUSY_TX) {
 8000bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bc6:	2b20      	cmp	r3, #32
 8000bc8:	d003      	beq.n	8000bd2 <recieveDataTask+0x72>
 8000bca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bce:	2b21      	cmp	r3, #33	; 0x21
 8000bd0:	d130      	bne.n	8000c34 <recieveDataTask+0xd4>
					HAL_UART_Receive_IT(&huart1, UART_data_rx, 3);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	4619      	mov	r1, r3
 8000bda:	481f      	ldr	r0, [pc, #124]	; (8000c58 <recieveDataTask+0xf8>)
 8000bdc:	f001 fcb7 	bl	800254e <HAL_UART_Receive_IT>
					Loopback_state = 1;
 8000be0:	2301      	movs	r3, #1
 8000be2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				}
			break;
 8000be6:	e025      	b.n	8000c34 <recieveDataTask+0xd4>
			case 1:
				UART_status = HAL_UART_GetState(&huart1);
 8000be8:	481b      	ldr	r0, [pc, #108]	; (8000c58 <recieveDataTask+0xf8>)
 8000bea:	f001 ff99 	bl	8002b20 <HAL_UART_GetState>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if(UART_status == HAL_UART_STATE_READY) {
 8000bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bf8:	2b20      	cmp	r3, #32
 8000bfa:	d11d      	bne.n	8000c38 <recieveDataTask+0xd8>
					recievedData[16] = UART_data_rx[0];
 8000bfc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c00:	773b      	strb	r3, [r7, #28]
					recievedData[17] = UART_data_rx[1];
 8000c02:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000c06:	777b      	strb	r3, [r7, #29]
					recievedData[18] = UART_data_rx[2];
 8000c08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c0c:	77bb      	strb	r3, [r7, #30]
					HAL_UART_Transmit(&huart1, recievedData, DATA_PACK2, 1);
 8000c0e:	f107 010c 	add.w	r1, r7, #12
 8000c12:	2301      	movs	r3, #1
 8000c14:	2215      	movs	r2, #21
 8000c16:	4810      	ldr	r0, [pc, #64]	; (8000c58 <recieveDataTask+0xf8>)
 8000c18:	f001 fc07 	bl	800242a <HAL_UART_Transmit>
					xQueueSend(queueHandler02, (void*)recievedData, xFrequency);
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <recieveDataTask+0xfc>)
 8000c1e:	6818      	ldr	r0, [r3, #0]
 8000c20:	f107 010c 	add.w	r1, r7, #12
 8000c24:	2300      	movs	r3, #0
 8000c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c28:	f003 f858 	bl	8003cdc <xQueueGenericSend>
					Loopback_state = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				}
			break;
 8000c32:	e001      	b.n	8000c38 <recieveDataTask+0xd8>
			break;
 8000c34:	bf00      	nop
 8000c36:	e000      	b.n	8000c3a <recieveDataTask+0xda>
			break;
 8000c38:	bf00      	nop
		}
		xSemaphoreGive(xUart_semaphore);
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <recieveDataTask+0xf4>)
 8000c3c:	6818      	ldr	r0, [r3, #0]
 8000c3e:	2300      	movs	r3, #0
 8000c40:	2200      	movs	r2, #0
 8000c42:	2100      	movs	r1, #0
 8000c44:	f003 f84a 	bl	8003cdc <xQueueGenericSend>
		xSemaphoreTake(xUart_semaphore, portMAX_DELAY);
 8000c48:	e7a7      	b.n	8000b9a <recieveDataTask+0x3a>
 8000c4a:	bf00      	nop
 8000c4c:	080069e8 	.word	0x080069e8
 8000c50:	080069ec 	.word	0x080069ec
 8000c54:	20000164 	.word	0x20000164
 8000c58:	20000090 	.word	0x20000090
 8000c5c:	20000160 	.word	0x20000160

08000c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_MspInit+0x54>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	4a11      	ldr	r2, [pc, #68]	; (8000cb4 <HAL_MspInit+0x54>)
 8000c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c74:	6453      	str	r3, [r2, #68]	; 0x44
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_MspInit+0x54>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_MspInit+0x54>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <HAL_MspInit+0x54>)
 8000c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c90:	6413      	str	r3, [r2, #64]	; 0x40
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_MspInit+0x54>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	210f      	movs	r1, #15
 8000ca2:	f06f 0001 	mvn.w	r0, #1
 8000ca6:	f000 fa0f 	bl	80010c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a1d      	ldr	r2, [pc, #116]	; (8000d4c <HAL_UART_MspInit+0x94>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d134      	bne.n	8000d44 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <HAL_UART_MspInit+0x98>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	4a1b      	ldr	r2, [pc, #108]	; (8000d50 <HAL_UART_MspInit+0x98>)
 8000ce4:	f043 0310 	orr.w	r3, r3, #16
 8000ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cea:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <HAL_UART_MspInit+0x98>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	f003 0310 	and.w	r3, r3, #16
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_UART_MspInit+0x98>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <HAL_UART_MspInit+0x98>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_UART_MspInit+0x98>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d24:	2307      	movs	r3, #7
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4809      	ldr	r0, [pc, #36]	; (8000d54 <HAL_UART_MspInit+0x9c>)
 8000d30:	f000 fa86 	bl	8001240 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2105      	movs	r1, #5
 8000d38:	2025      	movs	r0, #37	; 0x25
 8000d3a:	f000 f9c5 	bl	80010c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d3e:	2025      	movs	r0, #37	; 0x25
 8000d40:	f000 f9de 	bl	8001100 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	; 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40011000 	.word	0x40011000
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020000 	.word	0x40020000

08000d58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08c      	sub	sp, #48	; 0x30
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	2032      	movs	r0, #50	; 0x32
 8000d6e:	f000 f9ab 	bl	80010c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000d72:	2032      	movs	r0, #50	; 0x32
 8000d74:	f000 f9c4 	bl	8001100 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <HAL_InitTick+0xa0>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	4a1d      	ldr	r2, [pc, #116]	; (8000df8 <HAL_InitTick+0xa0>)
 8000d82:	f043 0308 	orr.w	r3, r3, #8
 8000d86:	6413      	str	r3, [r2, #64]	; 0x40
 8000d88:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <HAL_InitTick+0xa0>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	f003 0308 	and.w	r3, r3, #8
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d94:	f107 0210 	add.w	r2, r7, #16
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f001 f844 	bl	8001e2c <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000da4:	f001 f81a 	bl	8001ddc <HAL_RCC_GetPCLK1Freq>
 8000da8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dac:	4a13      	ldr	r2, [pc, #76]	; (8000dfc <HAL_InitTick+0xa4>)
 8000dae:	fba2 2303 	umull	r2, r3, r2, r3
 8000db2:	0c9b      	lsrs	r3, r3, #18
 8000db4:	3b01      	subs	r3, #1
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <HAL_InitTick+0xa8>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <HAL_InitTick+0xac>)
 8000dbc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <HAL_InitTick+0xa8>)
 8000dc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dc4:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <HAL_InitTick+0xa8>)
 8000dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dca:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <HAL_InitTick+0xa8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_InitTick+0xa8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000dd8:	4809      	ldr	r0, [pc, #36]	; (8000e00 <HAL_InitTick+0xa8>)
 8000dda:	f001 f859 	bl	8001e90 <HAL_TIM_Base_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d104      	bne.n	8000dee <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000de4:	4806      	ldr	r0, [pc, #24]	; (8000e00 <HAL_InitTick+0xa8>)
 8000de6:	f001 f8ad 	bl	8001f44 <HAL_TIM_Base_Start_IT>
 8000dea:	4603      	mov	r3, r0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3730      	adds	r7, #48	; 0x30
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	431bde83 	.word	0x431bde83
 8000e00:	20000168 	.word	0x20000168
 8000e04:	40000c00 	.word	0x40000c00

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <NMI_Handler+0x4>

08000e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <USART1_IRQHandler+0x10>)
 8000e3a:	f001 fbb9 	bl	80025b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000090 	.word	0x20000090

08000e48 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <TIM5_IRQHandler+0x10>)
 8000e4e:	f001 f8db 	bl	8002008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000168 	.word	0x20000168

08000e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <SystemInit+0x20>)
 8000e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <SystemInit+0x20>)
 8000e68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e86:	490e      	ldr	r1, [pc, #56]	; (8000ec0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e88:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ecc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eaa:	f7ff ffd7 	bl	8000e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eae:	f005 fc4d 	bl	800674c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb2:	f7ff fba1 	bl	80005f8 <main>
  bx  lr    
 8000eb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eb8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ec4:	08006ae0 	.word	0x08006ae0
  ldr r2, =_sbss
 8000ec8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ecc:	20004bcc 	.word	0x20004bcc

08000ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC_IRQHandler>
	...

08000ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <HAL_Init+0x40>)
 8000ede:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <HAL_Init+0x40>)
 8000eea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <HAL_Init+0x40>)
 8000ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efc:	2003      	movs	r0, #3
 8000efe:	f000 f8d8 	bl	80010b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f02:	200f      	movs	r0, #15
 8000f04:	f7ff ff28 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f08:	f7ff feaa 	bl	8000c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023c00 	.word	0x40023c00

08000f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x20>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x24>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_IncTick+0x24>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	200001b0 	.word	0x200001b0

08000f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <HAL_GetTick+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	200001b0 	.word	0x200001b0

08000f58 <__NVIC_SetPriorityGrouping>:
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_GetPriorityGrouping>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_EnableIRQ>:
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db0b      	blt.n	8000fe6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	4907      	ldr	r1, [pc, #28]	; (8000ff4 <__NVIC_EnableIRQ+0x38>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2001      	movs	r0, #1
 8000fde:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100

08000ff8 <__NVIC_SetPriority>:
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db0a      	blt.n	8001022 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	490c      	ldr	r1, [pc, #48]	; (8001044 <__NVIC_SetPriority+0x4c>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	440b      	add	r3, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001020:	e00a      	b.n	8001038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4908      	ldr	r1, [pc, #32]	; (8001048 <__NVIC_SetPriority+0x50>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3b04      	subs	r3, #4
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	440b      	add	r3, r1
 8001036:	761a      	strb	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <NVIC_EncodePriority>:
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2b04      	cmp	r3, #4
 8001068:	bf28      	it	cs
 800106a:	2304      	movcs	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	2b06      	cmp	r3, #6
 8001074:	d902      	bls.n	800107c <NVIC_EncodePriority+0x30>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b03      	subs	r3, #3
 800107a:	e000      	b.n	800107e <NVIC_EncodePriority+0x32>
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	f04f 32ff 	mov.w	r2, #4294967295
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001094:	f04f 31ff 	mov.w	r1, #4294967295
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43d9      	mvns	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	4313      	orrs	r3, r2
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	; 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff4c 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010da:	f7ff ff61 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 80010de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	68b9      	ldr	r1, [r7, #8]
 80010e4:	6978      	ldr	r0, [r7, #20]
 80010e6:	f7ff ffb1 	bl	800104c <NVIC_EncodePriority>
 80010ea:	4602      	mov	r2, r0
 80010ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f0:	4611      	mov	r1, r2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff80 	bl	8000ff8 <__NVIC_SetPriority>
}
 80010f8:	bf00      	nop
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff54 	bl	8000fbc <__NVIC_EnableIRQ>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001128:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800112a:	f7ff ff09 	bl	8000f40 <HAL_GetTick>
 800112e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d008      	beq.n	800114e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e052      	b.n	80011f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0216 	bic.w	r2, r2, #22
 800115c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	695a      	ldr	r2, [r3, #20]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800116c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	2b00      	cmp	r3, #0
 8001174:	d103      	bne.n	800117e <HAL_DMA_Abort+0x62>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800117a:	2b00      	cmp	r3, #0
 800117c:	d007      	beq.n	800118e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0208 	bic.w	r2, r2, #8
 800118c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0201 	bic.w	r2, r2, #1
 800119c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800119e:	e013      	b.n	80011c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011a0:	f7ff fece 	bl	8000f40 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b05      	cmp	r3, #5
 80011ac:	d90c      	bls.n	80011c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2220      	movs	r2, #32
 80011b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2203      	movs	r2, #3
 80011b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e015      	b.n	80011f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1e4      	bne.n	80011a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011da:	223f      	movs	r2, #63	; 0x3f
 80011dc:	409a      	lsls	r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d004      	beq.n	800121a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2280      	movs	r2, #128	; 0x80
 8001214:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e00c      	b.n	8001234 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2205      	movs	r2, #5
 800121e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 0201 	bic.w	r2, r2, #1
 8001230:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
 800125a:	e159      	b.n	8001510 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800125c:	2201      	movs	r2, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	429a      	cmp	r2, r3
 8001276:	f040 8148 	bne.w	800150a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	2b01      	cmp	r3, #1
 8001284:	d005      	beq.n	8001292 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128e:	2b02      	cmp	r3, #2
 8001290:	d130      	bne.n	80012f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	2203      	movs	r2, #3
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c8:	2201      	movs	r2, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	091b      	lsrs	r3, r3, #4
 80012de:	f003 0201 	and.w	r2, r3, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d017      	beq.n	8001330 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d123      	bne.n	8001384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	08da      	lsrs	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3208      	adds	r2, #8
 8001344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	220f      	movs	r2, #15
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	69b9      	ldr	r1, [r7, #24]
 8001380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0203 	and.w	r2, r3, #3
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 80a2 	beq.w	800150a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b57      	ldr	r3, [pc, #348]	; (8001528 <HAL_GPIO_Init+0x2e8>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	4a56      	ldr	r2, [pc, #344]	; (8001528 <HAL_GPIO_Init+0x2e8>)
 80013d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d4:	6453      	str	r3, [r2, #68]	; 0x44
 80013d6:	4b54      	ldr	r3, [pc, #336]	; (8001528 <HAL_GPIO_Init+0x2e8>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013e2:	4a52      	ldr	r2, [pc, #328]	; (800152c <HAL_GPIO_Init+0x2ec>)
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	089b      	lsrs	r3, r3, #2
 80013e8:	3302      	adds	r3, #2
 80013ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	220f      	movs	r2, #15
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a49      	ldr	r2, [pc, #292]	; (8001530 <HAL_GPIO_Init+0x2f0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d019      	beq.n	8001442 <HAL_GPIO_Init+0x202>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a48      	ldr	r2, [pc, #288]	; (8001534 <HAL_GPIO_Init+0x2f4>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d013      	beq.n	800143e <HAL_GPIO_Init+0x1fe>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a47      	ldr	r2, [pc, #284]	; (8001538 <HAL_GPIO_Init+0x2f8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d00d      	beq.n	800143a <HAL_GPIO_Init+0x1fa>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a46      	ldr	r2, [pc, #280]	; (800153c <HAL_GPIO_Init+0x2fc>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d007      	beq.n	8001436 <HAL_GPIO_Init+0x1f6>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a45      	ldr	r2, [pc, #276]	; (8001540 <HAL_GPIO_Init+0x300>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d101      	bne.n	8001432 <HAL_GPIO_Init+0x1f2>
 800142e:	2304      	movs	r3, #4
 8001430:	e008      	b.n	8001444 <HAL_GPIO_Init+0x204>
 8001432:	2307      	movs	r3, #7
 8001434:	e006      	b.n	8001444 <HAL_GPIO_Init+0x204>
 8001436:	2303      	movs	r3, #3
 8001438:	e004      	b.n	8001444 <HAL_GPIO_Init+0x204>
 800143a:	2302      	movs	r3, #2
 800143c:	e002      	b.n	8001444 <HAL_GPIO_Init+0x204>
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_GPIO_Init+0x204>
 8001442:	2300      	movs	r3, #0
 8001444:	69fa      	ldr	r2, [r7, #28]
 8001446:	f002 0203 	and.w	r2, r2, #3
 800144a:	0092      	lsls	r2, r2, #2
 800144c:	4093      	lsls	r3, r2
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001454:	4935      	ldr	r1, [pc, #212]	; (800152c <HAL_GPIO_Init+0x2ec>)
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	089b      	lsrs	r3, r3, #2
 800145a:	3302      	adds	r3, #2
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001462:	4b38      	ldr	r3, [pc, #224]	; (8001544 <HAL_GPIO_Init+0x304>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001486:	4a2f      	ldr	r2, [pc, #188]	; (8001544 <HAL_GPIO_Init+0x304>)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800148c:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_GPIO_Init+0x304>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014b0:	4a24      	ldr	r2, [pc, #144]	; (8001544 <HAL_GPIO_Init+0x304>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014b6:	4b23      	ldr	r3, [pc, #140]	; (8001544 <HAL_GPIO_Init+0x304>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014da:	4a1a      	ldr	r2, [pc, #104]	; (8001544 <HAL_GPIO_Init+0x304>)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_GPIO_Init+0x304>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001504:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <HAL_GPIO_Init+0x304>)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3301      	adds	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	2b0f      	cmp	r3, #15
 8001514:	f67f aea2 	bls.w	800125c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40013800 	.word	0x40013800
 8001530:	40020000 	.word	0x40020000
 8001534:	40020400 	.word	0x40020400
 8001538:	40020800 	.word	0x40020800
 800153c:	40020c00 	.word	0x40020c00
 8001540:	40021000 	.word	0x40021000
 8001544:	40013c00 	.word	0x40013c00

08001548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
 8001554:	4613      	mov	r3, r2
 8001556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001564:	e003      	b.n	800156e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	041a      	lsls	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	619a      	str	r2, [r3, #24]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e267      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d075      	beq.n	8001686 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800159a:	4b88      	ldr	r3, [pc, #544]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d00c      	beq.n	80015c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015a6:	4b85      	ldr	r3, [pc, #532]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d112      	bne.n	80015d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015b2:	4b82      	ldr	r3, [pc, #520]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015be:	d10b      	bne.n	80015d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c0:	4b7e      	ldr	r3, [pc, #504]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d05b      	beq.n	8001684 <HAL_RCC_OscConfig+0x108>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d157      	bne.n	8001684 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e242      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e0:	d106      	bne.n	80015f0 <HAL_RCC_OscConfig+0x74>
 80015e2:	4b76      	ldr	r3, [pc, #472]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a75      	ldr	r2, [pc, #468]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80015e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e01d      	b.n	800162c <HAL_RCC_OscConfig+0xb0>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x98>
 80015fa:	4b70      	ldr	r3, [pc, #448]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a6f      	ldr	r2, [pc, #444]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b6d      	ldr	r3, [pc, #436]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a6c      	ldr	r2, [pc, #432]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 800160c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e00b      	b.n	800162c <HAL_RCC_OscConfig+0xb0>
 8001614:	4b69      	ldr	r3, [pc, #420]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a68      	ldr	r2, [pc, #416]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 800161a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b66      	ldr	r3, [pc, #408]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a65      	ldr	r2, [pc, #404]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d013      	beq.n	800165c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff fc84 	bl	8000f40 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fc80 	bl	8000f40 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e207      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	4b5b      	ldr	r3, [pc, #364]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0xc0>
 800165a:	e014      	b.n	8001686 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fc70 	bl	8000f40 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff fc6c 	bl	8000f40 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e1f3      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001676:	4b51      	ldr	r3, [pc, #324]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0xe8>
 8001682:	e000      	b.n	8001686 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d063      	beq.n	800175a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001692:	4b4a      	ldr	r3, [pc, #296]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00b      	beq.n	80016b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169e:	4b47      	ldr	r3, [pc, #284]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d11c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016aa:	4b44      	ldr	r3, [pc, #272]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d116      	bne.n	80016e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b6:	4b41      	ldr	r3, [pc, #260]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d005      	beq.n	80016ce <HAL_RCC_OscConfig+0x152>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d001      	beq.n	80016ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e1c7      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ce:	4b3b      	ldr	r3, [pc, #236]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4937      	ldr	r1, [pc, #220]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e2:	e03a      	b.n	800175a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d020      	beq.n	800172e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ec:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <HAL_RCC_OscConfig+0x244>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f2:	f7ff fc25 	bl	8000f40 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016fa:	f7ff fc21 	bl	8000f40 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e1a8      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170c:	4b2b      	ldr	r3, [pc, #172]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001718:	4b28      	ldr	r3, [pc, #160]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4925      	ldr	r1, [pc, #148]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001728:	4313      	orrs	r3, r2
 800172a:	600b      	str	r3, [r1, #0]
 800172c:	e015      	b.n	800175a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800172e:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <HAL_RCC_OscConfig+0x244>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001734:	f7ff fc04 	bl	8000f40 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800173c:	f7ff fc00 	bl	8000f40 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e187      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174e:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	d036      	beq.n	80017d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d016      	beq.n	800179c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <HAL_RCC_OscConfig+0x248>)
 8001770:	2201      	movs	r2, #1
 8001772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001774:	f7ff fbe4 	bl	8000f40 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800177c:	f7ff fbe0 	bl	8000f40 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e167      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x200>
 800179a:	e01b      	b.n	80017d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_RCC_OscConfig+0x248>)
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a2:	f7ff fbcd 	bl	8000f40 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a8:	e00e      	b.n	80017c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017aa:	f7ff fbc9 	bl	8000f40 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d907      	bls.n	80017c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e150      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
 80017bc:	40023800 	.word	0x40023800
 80017c0:	42470000 	.word	0x42470000
 80017c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	4b88      	ldr	r3, [pc, #544]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80017ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1ea      	bne.n	80017aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 8097 	beq.w	8001910 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e6:	4b81      	ldr	r3, [pc, #516]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10f      	bne.n	8001812 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	4b7d      	ldr	r3, [pc, #500]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a7c      	ldr	r2, [pc, #496]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b7a      	ldr	r3, [pc, #488]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800180e:	2301      	movs	r3, #1
 8001810:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001812:	4b77      	ldr	r3, [pc, #476]	; (80019f0 <HAL_RCC_OscConfig+0x474>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181a:	2b00      	cmp	r3, #0
 800181c:	d118      	bne.n	8001850 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181e:	4b74      	ldr	r3, [pc, #464]	; (80019f0 <HAL_RCC_OscConfig+0x474>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a73      	ldr	r2, [pc, #460]	; (80019f0 <HAL_RCC_OscConfig+0x474>)
 8001824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182a:	f7ff fb89 	bl	8000f40 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001832:	f7ff fb85 	bl	8000f40 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e10c      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001844:	4b6a      	ldr	r3, [pc, #424]	; (80019f0 <HAL_RCC_OscConfig+0x474>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d106      	bne.n	8001866 <HAL_RCC_OscConfig+0x2ea>
 8001858:	4b64      	ldr	r3, [pc, #400]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800185a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185c:	4a63      	ldr	r2, [pc, #396]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6713      	str	r3, [r2, #112]	; 0x70
 8001864:	e01c      	b.n	80018a0 <HAL_RCC_OscConfig+0x324>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b05      	cmp	r3, #5
 800186c:	d10c      	bne.n	8001888 <HAL_RCC_OscConfig+0x30c>
 800186e:	4b5f      	ldr	r3, [pc, #380]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001872:	4a5e      	ldr	r2, [pc, #376]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6713      	str	r3, [r2, #112]	; 0x70
 800187a:	4b5c      	ldr	r3, [pc, #368]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800187c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187e:	4a5b      	ldr	r2, [pc, #364]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6713      	str	r3, [r2, #112]	; 0x70
 8001886:	e00b      	b.n	80018a0 <HAL_RCC_OscConfig+0x324>
 8001888:	4b58      	ldr	r3, [pc, #352]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800188a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188c:	4a57      	ldr	r2, [pc, #348]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800188e:	f023 0301 	bic.w	r3, r3, #1
 8001892:	6713      	str	r3, [r2, #112]	; 0x70
 8001894:	4b55      	ldr	r3, [pc, #340]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001898:	4a54      	ldr	r2, [pc, #336]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800189a:	f023 0304 	bic.w	r3, r3, #4
 800189e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d015      	beq.n	80018d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a8:	f7ff fb4a 	bl	8000f40 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ae:	e00a      	b.n	80018c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b0:	f7ff fb46 	bl	8000f40 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e0cb      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c6:	4b49      	ldr	r3, [pc, #292]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80018c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0ee      	beq.n	80018b0 <HAL_RCC_OscConfig+0x334>
 80018d2:	e014      	b.n	80018fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7ff fb34 	bl	8000f40 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018dc:	f7ff fb30 	bl	8000f40 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e0b5      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f2:	4b3e      	ldr	r3, [pc, #248]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80018f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1ee      	bne.n	80018dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018fe:	7dfb      	ldrb	r3, [r7, #23]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d105      	bne.n	8001910 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001904:	4b39      	ldr	r3, [pc, #228]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	4a38      	ldr	r2, [pc, #224]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800190a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800190e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 80a1 	beq.w	8001a5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800191a:	4b34      	ldr	r3, [pc, #208]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b08      	cmp	r3, #8
 8001924:	d05c      	beq.n	80019e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d141      	bne.n	80019b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192e:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <HAL_RCC_OscConfig+0x478>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fb04 	bl	8000f40 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff fb00 	bl	8000f40 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e087      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194e:	4b27      	ldr	r3, [pc, #156]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69da      	ldr	r2, [r3, #28]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	019b      	lsls	r3, r3, #6
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	085b      	lsrs	r3, r3, #1
 8001972:	3b01      	subs	r3, #1
 8001974:	041b      	lsls	r3, r3, #16
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	061b      	lsls	r3, r3, #24
 800197e:	491b      	ldr	r1, [pc, #108]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001984:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_RCC_OscConfig+0x478>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198a:	f7ff fad9 	bl	8000f40 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001992:	f7ff fad5 	bl	8000f40 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e05c      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x416>
 80019b0:	e054      	b.n	8001a5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <HAL_RCC_OscConfig+0x478>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fac2 	bl	8000f40 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c0:	f7ff fabe 	bl	8000f40 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e045      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x444>
 80019de:	e03d      	b.n	8001a5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d107      	bne.n	80019f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e038      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40007000 	.word	0x40007000
 80019f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <HAL_RCC_OscConfig+0x4ec>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d028      	beq.n	8001a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d121      	bne.n	8001a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d11a      	bne.n	8001a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a28:	4013      	ands	r3, r2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d111      	bne.n	8001a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	085b      	lsrs	r3, r3, #1
 8001a40:	3b01      	subs	r3, #1
 8001a42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d107      	bne.n	8001a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800

08001a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0cc      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a80:	4b68      	ldr	r3, [pc, #416]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d90c      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b65      	ldr	r3, [pc, #404]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b63      	ldr	r3, [pc, #396]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0b8      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d020      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac0:	4b59      	ldr	r3, [pc, #356]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	4a58      	ldr	r2, [pc, #352]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad8:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4a52      	ldr	r2, [pc, #328]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ae2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae4:	4b50      	ldr	r3, [pc, #320]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	494d      	ldr	r1, [pc, #308]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d044      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	4b47      	ldr	r3, [pc, #284]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d119      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e07f      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d003      	beq.n	8001b2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2a:	4b3f      	ldr	r3, [pc, #252]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d109      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e06f      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e067      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b4a:	4b37      	ldr	r3, [pc, #220]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f023 0203 	bic.w	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4934      	ldr	r1, [pc, #208]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b5c:	f7ff f9f0 	bl	8000f40 <HAL_GetTick>
 8001b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b64:	f7ff f9ec 	bl	8000f40 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e04f      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7a:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 020c 	and.w	r2, r3, #12
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d1eb      	bne.n	8001b64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d20c      	bcs.n	8001bb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e032      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc0:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4916      	ldr	r1, [pc, #88]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d009      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	490e      	ldr	r1, [pc, #56]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bf2:	f000 f821 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	490a      	ldr	r1, [pc, #40]	; (8001c2c <HAL_RCC_ClockConfig+0x1c0>)
 8001c04:	5ccb      	ldrb	r3, [r1, r3]
 8001c06:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0a:	4a09      	ldr	r2, [pc, #36]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff f8a0 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023c00 	.word	0x40023c00
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	08006a58 	.word	0x08006a58
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000004 	.word	0x20000004

08001c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c3c:	b090      	sub	sp, #64	; 0x40
 8001c3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	637b      	str	r3, [r7, #52]	; 0x34
 8001c44:	2300      	movs	r3, #0
 8001c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c48:	2300      	movs	r3, #0
 8001c4a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c50:	4b59      	ldr	r3, [pc, #356]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d00d      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x40>
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	f200 80a1 	bhi.w	8001da4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0x34>
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d003      	beq.n	8001c72 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c6a:	e09b      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c6c:	4b53      	ldr	r3, [pc, #332]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8001c6e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001c70:	e09b      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c72:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c76:	e098      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c78:	4b4f      	ldr	r3, [pc, #316]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c80:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c82:	4b4d      	ldr	r3, [pc, #308]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d028      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8e:	4b4a      	ldr	r3, [pc, #296]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	099b      	lsrs	r3, r3, #6
 8001c94:	2200      	movs	r2, #0
 8001c96:	623b      	str	r3, [r7, #32]
 8001c98:	627a      	str	r2, [r7, #36]	; 0x24
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ca4:	fb03 f201 	mul.w	r2, r3, r1
 8001ca8:	2300      	movs	r3, #0
 8001caa:	fb00 f303 	mul.w	r3, r0, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a43      	ldr	r2, [pc, #268]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cb2:	fba0 1202 	umull	r1, r2, r0, r2
 8001cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cb8:	460a      	mov	r2, r1
 8001cba:	62ba      	str	r2, [r7, #40]	; 0x28
 8001cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cbe:	4413      	add	r3, r2
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	61bb      	str	r3, [r7, #24]
 8001cc8:	61fa      	str	r2, [r7, #28]
 8001cca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cd2:	f7fe fa85 	bl	80001e0 <__aeabi_uldivmod>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4613      	mov	r3, r2
 8001cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cde:	e053      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce0:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	099b      	lsrs	r3, r3, #6
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	617a      	str	r2, [r7, #20]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001cf2:	f04f 0b00 	mov.w	fp, #0
 8001cf6:	4652      	mov	r2, sl
 8001cf8:	465b      	mov	r3, fp
 8001cfa:	f04f 0000 	mov.w	r0, #0
 8001cfe:	f04f 0100 	mov.w	r1, #0
 8001d02:	0159      	lsls	r1, r3, #5
 8001d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d08:	0150      	lsls	r0, r2, #5
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	ebb2 080a 	subs.w	r8, r2, sl
 8001d12:	eb63 090b 	sbc.w	r9, r3, fp
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d2a:	ebb2 0408 	subs.w	r4, r2, r8
 8001d2e:	eb63 0509 	sbc.w	r5, r3, r9
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	00eb      	lsls	r3, r5, #3
 8001d3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d40:	00e2      	lsls	r2, r4, #3
 8001d42:	4614      	mov	r4, r2
 8001d44:	461d      	mov	r5, r3
 8001d46:	eb14 030a 	adds.w	r3, r4, sl
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	eb45 030b 	adc.w	r3, r5, fp
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d5e:	4629      	mov	r1, r5
 8001d60:	028b      	lsls	r3, r1, #10
 8001d62:	4621      	mov	r1, r4
 8001d64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d68:	4621      	mov	r1, r4
 8001d6a:	028a      	lsls	r2, r1, #10
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d72:	2200      	movs	r2, #0
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	60fa      	str	r2, [r7, #12]
 8001d78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d7c:	f7fe fa30 	bl	80001e0 <__aeabi_uldivmod>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4613      	mov	r3, r2
 8001d86:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	0c1b      	lsrs	r3, r3, #16
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	3301      	adds	r3, #1
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001d98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001da2:	e002      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8001da6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3740      	adds	r7, #64	; 0x40
 8001db0:	46bd      	mov	sp, r7
 8001db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	00f42400 	.word	0x00f42400
 8001dc0:	017d7840 	.word	0x017d7840

08001dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dca:	681b      	ldr	r3, [r3, #0]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000000 	.word	0x20000000

08001ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001de0:	f7ff fff0 	bl	8001dc4 <HAL_RCC_GetHCLKFreq>
 8001de4:	4602      	mov	r2, r0
 8001de6:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	0a9b      	lsrs	r3, r3, #10
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	4903      	ldr	r1, [pc, #12]	; (8001e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001df2:	5ccb      	ldrb	r3, [r1, r3]
 8001df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	08006a68 	.word	0x08006a68

08001e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e08:	f7ff ffdc 	bl	8001dc4 <HAL_RCC_GetHCLKFreq>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	0b5b      	lsrs	r3, r3, #13
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	4903      	ldr	r1, [pc, #12]	; (8001e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e1a:	5ccb      	ldrb	r3, [r1, r3]
 8001e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40023800 	.word	0x40023800
 8001e28:	08006a68 	.word	0x08006a68

08001e2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	220f      	movs	r2, #15
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_RCC_GetClockConfig+0x5c>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0203 	and.w	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <HAL_RCC_GetClockConfig+0x5c>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <HAL_RCC_GetClockConfig+0x5c>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <HAL_RCC_GetClockConfig+0x5c>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	08db      	lsrs	r3, r3, #3
 8001e66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e6e:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <HAL_RCC_GetClockConfig+0x60>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0207 	and.w	r2, r3, #7
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	601a      	str	r2, [r3, #0]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40023c00 	.word	0x40023c00

08001e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e041      	b.n	8001f26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f839 	bl	8001f2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4610      	mov	r0, r2
 8001ed0:	f000 f9ca 	bl	8002268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d001      	beq.n	8001f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e044      	b.n	8001fe6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a1e      	ldr	r2, [pc, #120]	; (8001ff4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d018      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x6c>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f86:	d013      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x6c>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1a      	ldr	r2, [pc, #104]	; (8001ff8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00e      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x6c>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a19      	ldr	r2, [pc, #100]	; (8001ffc <HAL_TIM_Base_Start_IT+0xb8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d009      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x6c>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a17      	ldr	r2, [pc, #92]	; (8002000 <HAL_TIM_Base_Start_IT+0xbc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d004      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x6c>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a16      	ldr	r2, [pc, #88]	; (8002004 <HAL_TIM_Base_Start_IT+0xc0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d111      	bne.n	8001fd4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b06      	cmp	r3, #6
 8001fc0:	d010      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0201 	orr.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd2:	e007      	b.n	8001fe4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40010000 	.word	0x40010000
 8001ff8:	40000400 	.word	0x40000400
 8001ffc:	40000800 	.word	0x40000800
 8002000:	40000c00 	.word	0x40000c00
 8002004:	40014000 	.word	0x40014000

08002008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b02      	cmp	r3, #2
 800201c:	d122      	bne.n	8002064 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b02      	cmp	r3, #2
 800202a:	d11b      	bne.n	8002064 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0202 	mvn.w	r2, #2
 8002034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8ee 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 8002050:	e005      	b.n	800205e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f8e0 	bl	8002218 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f8f1 	bl	8002240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b04      	cmp	r3, #4
 8002070:	d122      	bne.n	80020b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b04      	cmp	r3, #4
 800207e:	d11b      	bne.n	80020b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0204 	mvn.w	r2, #4
 8002088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2202      	movs	r2, #2
 800208e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f8c4 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 80020a4:	e005      	b.n	80020b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f8b6 	bl	8002218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f8c7 	bl	8002240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d122      	bne.n	800210c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d11b      	bne.n	800210c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0208 	mvn.w	r2, #8
 80020dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2204      	movs	r2, #4
 80020e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f89a 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 80020f8:	e005      	b.n	8002106 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f88c 	bl	8002218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f89d 	bl	8002240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	2b10      	cmp	r3, #16
 8002118:	d122      	bne.n	8002160 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b10      	cmp	r3, #16
 8002126:	d11b      	bne.n	8002160 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0210 	mvn.w	r2, #16
 8002130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2208      	movs	r2, #8
 8002136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f870 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 800214c:	e005      	b.n	800215a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f862 	bl	8002218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f873 	bl	8002240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b01      	cmp	r3, #1
 800216c:	d10e      	bne.n	800218c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b01      	cmp	r3, #1
 800217a:	d107      	bne.n	800218c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0201 	mvn.w	r2, #1
 8002184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe fb66 	bl	8000858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	2b80      	cmp	r3, #128	; 0x80
 8002198:	d10e      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a4:	2b80      	cmp	r3, #128	; 0x80
 80021a6:	d107      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f8e2 	bl	800237c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c2:	2b40      	cmp	r3, #64	; 0x40
 80021c4:	d10e      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d0:	2b40      	cmp	r3, #64	; 0x40
 80021d2:	d107      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f838 	bl	8002254 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	d10e      	bne.n	8002210 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b20      	cmp	r3, #32
 80021fe:	d107      	bne.n	8002210 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0220 	mvn.w	r2, #32
 8002208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f8ac 	bl	8002368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a34      	ldr	r2, [pc, #208]	; (800234c <TIM_Base_SetConfig+0xe4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d00f      	beq.n	80022a0 <TIM_Base_SetConfig+0x38>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002286:	d00b      	beq.n	80022a0 <TIM_Base_SetConfig+0x38>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a31      	ldr	r2, [pc, #196]	; (8002350 <TIM_Base_SetConfig+0xe8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d007      	beq.n	80022a0 <TIM_Base_SetConfig+0x38>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a30      	ldr	r2, [pc, #192]	; (8002354 <TIM_Base_SetConfig+0xec>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d003      	beq.n	80022a0 <TIM_Base_SetConfig+0x38>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a2f      	ldr	r2, [pc, #188]	; (8002358 <TIM_Base_SetConfig+0xf0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d108      	bne.n	80022b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a25      	ldr	r2, [pc, #148]	; (800234c <TIM_Base_SetConfig+0xe4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d01b      	beq.n	80022f2 <TIM_Base_SetConfig+0x8a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c0:	d017      	beq.n	80022f2 <TIM_Base_SetConfig+0x8a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a22      	ldr	r2, [pc, #136]	; (8002350 <TIM_Base_SetConfig+0xe8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <TIM_Base_SetConfig+0x8a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a21      	ldr	r2, [pc, #132]	; (8002354 <TIM_Base_SetConfig+0xec>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00f      	beq.n	80022f2 <TIM_Base_SetConfig+0x8a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a20      	ldr	r2, [pc, #128]	; (8002358 <TIM_Base_SetConfig+0xf0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00b      	beq.n	80022f2 <TIM_Base_SetConfig+0x8a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a1f      	ldr	r2, [pc, #124]	; (800235c <TIM_Base_SetConfig+0xf4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d007      	beq.n	80022f2 <TIM_Base_SetConfig+0x8a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a1e      	ldr	r2, [pc, #120]	; (8002360 <TIM_Base_SetConfig+0xf8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d003      	beq.n	80022f2 <TIM_Base_SetConfig+0x8a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a1d      	ldr	r2, [pc, #116]	; (8002364 <TIM_Base_SetConfig+0xfc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d108      	bne.n	8002304 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4313      	orrs	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a08      	ldr	r2, [pc, #32]	; (800234c <TIM_Base_SetConfig+0xe4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d103      	bne.n	8002338 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	615a      	str	r2, [r3, #20]
}
 800233e:	bf00      	nop
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40010000 	.word	0x40010000
 8002350:	40000400 	.word	0x40000400
 8002354:	40000800 	.word	0x40000800
 8002358:	40000c00 	.word	0x40000c00
 800235c:	40014000 	.word	0x40014000
 8002360:	40014400 	.word	0x40014400
 8002364:	40014800 	.word	0x40014800

08002368 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e03f      	b.n	8002422 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe fc7e 	bl	8000cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2224      	movs	r2, #36	; 0x24
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 fe07 	bl	8002fe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695a      	ldr	r2, [r3, #20]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002408:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b08a      	sub	sp, #40	; 0x28
 800242e:	af02      	add	r7, sp, #8
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	4613      	mov	r3, r2
 8002438:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b20      	cmp	r3, #32
 8002448:	d17c      	bne.n	8002544 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <HAL_UART_Transmit+0x2c>
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e075      	b.n	8002546 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <HAL_UART_Transmit+0x3e>
 8002464:	2302      	movs	r3, #2
 8002466:	e06e      	b.n	8002546 <HAL_UART_Transmit+0x11c>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2221      	movs	r2, #33	; 0x21
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800247e:	f7fe fd5f 	bl	8000f40 <HAL_GetTick>
 8002482:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	88fa      	ldrh	r2, [r7, #6]
 8002488:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	88fa      	ldrh	r2, [r7, #6]
 800248e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002498:	d108      	bne.n	80024ac <HAL_UART_Transmit+0x82>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d104      	bne.n	80024ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	61bb      	str	r3, [r7, #24]
 80024aa:	e003      	b.n	80024b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80024bc:	e02a      	b.n	8002514 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2200      	movs	r2, #0
 80024c6:	2180      	movs	r1, #128	; 0x80
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 fb47 	bl	8002b5c <UART_WaitOnFlagUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e036      	b.n	8002546 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10b      	bne.n	80024f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	3302      	adds	r3, #2
 80024f2:	61bb      	str	r3, [r7, #24]
 80024f4:	e007      	b.n	8002506 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	781a      	ldrb	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	3301      	adds	r3, #1
 8002504:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002518:	b29b      	uxth	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1cf      	bne.n	80024be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2200      	movs	r2, #0
 8002526:	2140      	movs	r1, #64	; 0x40
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 fb17 	bl	8002b5c <UART_WaitOnFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e006      	b.n	8002546 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	e000      	b.n	8002546 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002544:	2302      	movs	r3, #2
  }
}
 8002546:	4618      	mov	r0, r3
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	4613      	mov	r3, r2
 800255a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b20      	cmp	r3, #32
 8002566:	d11d      	bne.n	80025a4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <HAL_UART_Receive_IT+0x26>
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e016      	b.n	80025a6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_UART_Receive_IT+0x38>
 8002582:	2302      	movs	r3, #2
 8002584:	e00f      	b.n	80025a6 <HAL_UART_Receive_IT+0x58>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	461a      	mov	r2, r3
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 fb4c 	bl	8002c38 <UART_Start_Receive_IT>
 80025a0:	4603      	mov	r3, r0
 80025a2:	e000      	b.n	80025a6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80025a4:	2302      	movs	r3, #2
  }
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b0ba      	sub	sp, #232	; 0xe8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80025dc:	2300      	movs	r3, #0
 80025de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80025ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10f      	bne.n	8002616 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025fa:	f003 0320 	and.w	r3, r3, #32
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <HAL_UART_IRQHandler+0x66>
 8002602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fc2f 	bl	8002e72 <UART_Receive_IT>
      return;
 8002614:	e256      	b.n	8002ac4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80de 	beq.w	80027dc <HAL_UART_IRQHandler+0x22c>
 8002620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d106      	bne.n	800263a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800262c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002630:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80d1 	beq.w	80027dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800263a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00b      	beq.n	800265e <HAL_UART_IRQHandler+0xae>
 8002646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800264a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f043 0201 	orr.w	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800265e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00b      	beq.n	8002682 <HAL_UART_IRQHandler+0xd2>
 800266a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f043 0202 	orr.w	r2, r3, #2
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00b      	beq.n	80026a6 <HAL_UART_IRQHandler+0xf6>
 800268e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f043 0204 	orr.w	r2, r3, #4
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80026a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d011      	beq.n	80026d6 <HAL_UART_IRQHandler+0x126>
 80026b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d105      	bne.n	80026ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80026be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d005      	beq.n	80026d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f043 0208 	orr.w	r2, r3, #8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 81ed 	beq.w	8002aba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <HAL_UART_IRQHandler+0x14e>
 80026ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 fbba 	bl	8002e72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002708:	2b40      	cmp	r3, #64	; 0x40
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d103      	bne.n	800272a <HAL_UART_IRQHandler+0x17a>
 8002722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002726:	2b00      	cmp	r3, #0
 8002728:	d04f      	beq.n	80027ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fac2 	bl	8002cb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273a:	2b40      	cmp	r3, #64	; 0x40
 800273c:	d141      	bne.n	80027c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	3314      	adds	r3, #20
 8002744:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002748:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800274c:	e853 3f00 	ldrex	r3, [r3]
 8002750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002754:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800275c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3314      	adds	r3, #20
 8002766:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800276a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800276e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002772:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002776:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800277a:	e841 2300 	strex	r3, r2, [r1]
 800277e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1d9      	bne.n	800273e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278e:	2b00      	cmp	r3, #0
 8002790:	d013      	beq.n	80027ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002796:	4a7d      	ldr	r2, [pc, #500]	; (800298c <HAL_UART_IRQHandler+0x3dc>)
 8002798:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fd2c 	bl	80011fc <HAL_DMA_Abort_IT>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d016      	beq.n	80027d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027b4:	4610      	mov	r0, r2
 80027b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b8:	e00e      	b.n	80027d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f99a 	bl	8002af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c0:	e00a      	b.n	80027d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f996 	bl	8002af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c8:	e006      	b.n	80027d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f992 	bl	8002af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80027d6:	e170      	b.n	8002aba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d8:	bf00      	nop
    return;
 80027da:	e16e      	b.n	8002aba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	f040 814a 	bne.w	8002a7a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80027e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 8143 	beq.w	8002a7a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80027f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 813c 	beq.w	8002a7a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002822:	2b40      	cmp	r3, #64	; 0x40
 8002824:	f040 80b4 	bne.w	8002990 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002834:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 8140 	beq.w	8002abe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002846:	429a      	cmp	r2, r3
 8002848:	f080 8139 	bcs.w	8002abe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002852:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800285e:	f000 8088 	beq.w	8002972 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	330c      	adds	r3, #12
 8002868:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800286c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002870:	e853 3f00 	ldrex	r3, [r3]
 8002874:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002878:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800287c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002880:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	330c      	adds	r3, #12
 800288a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800288e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002892:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002896:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800289a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800289e:	e841 2300 	strex	r3, r2, [r1]
 80028a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80028a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1d9      	bne.n	8002862 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3314      	adds	r3, #20
 80028b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028b8:	e853 3f00 	ldrex	r3, [r3]
 80028bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80028be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028c0:	f023 0301 	bic.w	r3, r3, #1
 80028c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	3314      	adds	r3, #20
 80028ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80028d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80028da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80028de:	e841 2300 	strex	r3, r2, [r1]
 80028e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80028e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1e1      	bne.n	80028ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	3314      	adds	r3, #20
 80028f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028f4:	e853 3f00 	ldrex	r3, [r3]
 80028f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80028fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002900:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	3314      	adds	r3, #20
 800290a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800290e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002910:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002912:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002914:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002916:	e841 2300 	strex	r3, r2, [r1]
 800291a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800291c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1e3      	bne.n	80028ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	330c      	adds	r3, #12
 8002936:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800293a:	e853 3f00 	ldrex	r3, [r3]
 800293e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002942:	f023 0310 	bic.w	r3, r3, #16
 8002946:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	330c      	adds	r3, #12
 8002950:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002954:	65ba      	str	r2, [r7, #88]	; 0x58
 8002956:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002958:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800295a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800295c:	e841 2300 	strex	r3, r2, [r1]
 8002960:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1e3      	bne.n	8002930 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe fbd5 	bl	800111c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800297a:	b29b      	uxth	r3, r3
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	b29b      	uxth	r3, r3
 8002980:	4619      	mov	r1, r3
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f8c0 	bl	8002b08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002988:	e099      	b.n	8002abe <HAL_UART_IRQHandler+0x50e>
 800298a:	bf00      	nop
 800298c:	08002d7b 	.word	0x08002d7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002998:	b29b      	uxth	r3, r3
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 808b 	beq.w	8002ac2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80029ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 8086 	beq.w	8002ac2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	330c      	adds	r3, #12
 80029bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c0:	e853 3f00 	ldrex	r3, [r3]
 80029c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80029c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	330c      	adds	r3, #12
 80029d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80029da:	647a      	str	r2, [r7, #68]	; 0x44
 80029dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029e2:	e841 2300 	strex	r3, r2, [r1]
 80029e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1e3      	bne.n	80029b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3314      	adds	r3, #20
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	e853 3f00 	ldrex	r3, [r3]
 80029fc:	623b      	str	r3, [r7, #32]
   return(result);
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3314      	adds	r3, #20
 8002a0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a12:	633a      	str	r2, [r7, #48]	; 0x30
 8002a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a1a:	e841 2300 	strex	r3, r2, [r1]
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1e3      	bne.n	80029ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	330c      	adds	r3, #12
 8002a3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	e853 3f00 	ldrex	r3, [r3]
 8002a42:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f023 0310 	bic.w	r3, r3, #16
 8002a4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	330c      	adds	r3, #12
 8002a54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a58:	61fa      	str	r2, [r7, #28]
 8002a5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5c:	69b9      	ldr	r1, [r7, #24]
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	e841 2300 	strex	r3, r2, [r1]
 8002a64:	617b      	str	r3, [r7, #20]
   return(result);
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1e3      	bne.n	8002a34 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a70:	4619      	mov	r1, r3
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f848 	bl	8002b08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a78:	e023      	b.n	8002ac2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <HAL_UART_IRQHandler+0x4ea>
 8002a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f985 	bl	8002da2 <UART_Transmit_IT>
    return;
 8002a98:	e014      	b.n	8002ac4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00e      	beq.n	8002ac4 <HAL_UART_IRQHandler+0x514>
 8002aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d008      	beq.n	8002ac4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f9c5 	bl	8002e42 <UART_EndTransmit_IT>
    return;
 8002ab8:	e004      	b.n	8002ac4 <HAL_UART_IRQHandler+0x514>
    return;
 8002aba:	bf00      	nop
 8002abc:	e002      	b.n	8002ac4 <HAL_UART_IRQHandler+0x514>
      return;
 8002abe:	bf00      	nop
 8002ac0:	e000      	b.n	8002ac4 <HAL_UART_IRQHandler+0x514>
      return;
 8002ac2:	bf00      	nop
  }
}
 8002ac4:	37e8      	adds	r7, #232	; 0xe8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop

08002acc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	b2db      	uxtb	r3, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b090      	sub	sp, #64	; 0x40
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b6c:	e050      	b.n	8002c10 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d04c      	beq.n	8002c10 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d007      	beq.n	8002b8c <UART_WaitOnFlagUntilTimeout+0x30>
 8002b7c:	f7fe f9e0 	bl	8000f40 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d241      	bcs.n	8002c10 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	330c      	adds	r3, #12
 8002b92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	e853 3f00 	ldrex	r3, [r3]
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	330c      	adds	r3, #12
 8002baa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bac:	637a      	str	r2, [r7, #52]	; 0x34
 8002bae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bb4:	e841 2300 	strex	r3, r2, [r1]
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1e5      	bne.n	8002b8c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	3314      	adds	r3, #20
 8002bc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	e853 3f00 	ldrex	r3, [r3]
 8002bce:	613b      	str	r3, [r7, #16]
   return(result);
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f023 0301 	bic.w	r3, r3, #1
 8002bd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3314      	adds	r3, #20
 8002bde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002be0:	623a      	str	r2, [r7, #32]
 8002be2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be4:	69f9      	ldr	r1, [r7, #28]
 8002be6:	6a3a      	ldr	r2, [r7, #32]
 8002be8:	e841 2300 	strex	r3, r2, [r1]
 8002bec:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1e5      	bne.n	8002bc0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e00f      	b.n	8002c30 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d09f      	beq.n	8002b6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3740      	adds	r7, #64	; 0x40
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	4613      	mov	r3, r2
 8002c44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	88fa      	ldrh	r2, [r7, #6]
 8002c50:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	88fa      	ldrh	r2, [r7, #6]
 8002c56:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2222      	movs	r2, #34	; 0x22
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d007      	beq.n	8002c86 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c84:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0201 	orr.w	r2, r2, #1
 8002c94:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0220 	orr.w	r2, r2, #32
 8002ca4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b095      	sub	sp, #84	; 0x54
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	330c      	adds	r3, #12
 8002cc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc6:	e853 3f00 	ldrex	r3, [r3]
 8002cca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	330c      	adds	r3, #12
 8002cda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cdc:	643a      	str	r2, [r7, #64]	; 0x40
 8002cde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ce2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ce4:	e841 2300 	strex	r3, r2, [r1]
 8002ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1e5      	bne.n	8002cbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	3314      	adds	r3, #20
 8002cf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	e853 3f00 	ldrex	r3, [r3]
 8002cfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f023 0301 	bic.w	r3, r3, #1
 8002d06:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3314      	adds	r3, #20
 8002d0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d18:	e841 2300 	strex	r3, r2, [r1]
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1e5      	bne.n	8002cf0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d119      	bne.n	8002d60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	330c      	adds	r3, #12
 8002d32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	e853 3f00 	ldrex	r3, [r3]
 8002d3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f023 0310 	bic.w	r3, r3, #16
 8002d42:	647b      	str	r3, [r7, #68]	; 0x44
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d4c:	61ba      	str	r2, [r7, #24]
 8002d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d50:	6979      	ldr	r1, [r7, #20]
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	e841 2300 	strex	r3, r2, [r1]
 8002d58:	613b      	str	r3, [r7, #16]
   return(result);
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1e5      	bne.n	8002d2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d6e:	bf00      	nop
 8002d70:	3754      	adds	r7, #84	; 0x54
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f7ff fead 	bl	8002af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b085      	sub	sp, #20
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b21      	cmp	r3, #33	; 0x21
 8002db4:	d13e      	bne.n	8002e34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dbe:	d114      	bne.n	8002dea <UART_Transmit_IT+0x48>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d110      	bne.n	8002dea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ddc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	1c9a      	adds	r2, r3, #2
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	621a      	str	r2, [r3, #32]
 8002de8:	e008      	b.n	8002dfc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	1c59      	adds	r1, r3, #1
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6211      	str	r1, [r2, #32]
 8002df4:	781a      	ldrb	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10f      	bne.n	8002e30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e000      	b.n	8002e36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e34:	2302      	movs	r3, #2
  }
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff fe32 	bl	8002acc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b08c      	sub	sp, #48	; 0x30
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b22      	cmp	r3, #34	; 0x22
 8002e84:	f040 80ab 	bne.w	8002fde <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e90:	d117      	bne.n	8002ec2 <UART_Receive_IT+0x50>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d113      	bne.n	8002ec2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	1c9a      	adds	r2, r3, #2
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28
 8002ec0:	e026      	b.n	8002f10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed4:	d007      	beq.n	8002ee6 <UART_Receive_IT+0x74>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10a      	bne.n	8002ef4 <UART_Receive_IT+0x82>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d106      	bne.n	8002ef4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	e008      	b.n	8002f06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d15a      	bne.n	8002fda <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0220 	bic.w	r2, r2, #32
 8002f32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0201 	bic.w	r2, r2, #1
 8002f52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d135      	bne.n	8002fd0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	330c      	adds	r3, #12
 8002f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	e853 3f00 	ldrex	r3, [r3]
 8002f78:	613b      	str	r3, [r7, #16]
   return(result);
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f023 0310 	bic.w	r3, r3, #16
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	330c      	adds	r3, #12
 8002f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8a:	623a      	str	r2, [r7, #32]
 8002f8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8e:	69f9      	ldr	r1, [r7, #28]
 8002f90:	6a3a      	ldr	r2, [r7, #32]
 8002f92:	e841 2300 	strex	r3, r2, [r1]
 8002f96:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1e5      	bne.n	8002f6a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	2b10      	cmp	r3, #16
 8002faa:	d10a      	bne.n	8002fc2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fac:	2300      	movs	r3, #0
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff fd9d 	bl	8002b08 <HAL_UARTEx_RxEventCallback>
 8002fce:	e002      	b.n	8002fd6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff fd85 	bl	8002ae0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	e002      	b.n	8002fe0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e000      	b.n	8002fe0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002fde:	2302      	movs	r3, #2
  }
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3730      	adds	r7, #48	; 0x30
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fec:	b0c0      	sub	sp, #256	; 0x100
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003004:	68d9      	ldr	r1, [r3, #12]
 8003006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	ea40 0301 	orr.w	r3, r0, r1
 8003010:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	431a      	orrs	r2, r3
 8003020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	431a      	orrs	r2, r3
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003040:	f021 010c 	bic.w	r1, r1, #12
 8003044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800304e:	430b      	orrs	r3, r1
 8003050:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800305e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003062:	6999      	ldr	r1, [r3, #24]
 8003064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	ea40 0301 	orr.w	r3, r0, r1
 800306e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	4b8f      	ldr	r3, [pc, #572]	; (80032b4 <UART_SetConfig+0x2cc>)
 8003078:	429a      	cmp	r2, r3
 800307a:	d005      	beq.n	8003088 <UART_SetConfig+0xa0>
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	4b8d      	ldr	r3, [pc, #564]	; (80032b8 <UART_SetConfig+0x2d0>)
 8003084:	429a      	cmp	r2, r3
 8003086:	d104      	bne.n	8003092 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003088:	f7fe febc 	bl	8001e04 <HAL_RCC_GetPCLK2Freq>
 800308c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003090:	e003      	b.n	800309a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003092:	f7fe fea3 	bl	8001ddc <HAL_RCC_GetPCLK1Freq>
 8003096:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800309a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a4:	f040 810c 	bne.w	80032c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030ac:	2200      	movs	r2, #0
 80030ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030ba:	4622      	mov	r2, r4
 80030bc:	462b      	mov	r3, r5
 80030be:	1891      	adds	r1, r2, r2
 80030c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80030c2:	415b      	adcs	r3, r3
 80030c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030ca:	4621      	mov	r1, r4
 80030cc:	eb12 0801 	adds.w	r8, r2, r1
 80030d0:	4629      	mov	r1, r5
 80030d2:	eb43 0901 	adc.w	r9, r3, r1
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030ea:	4690      	mov	r8, r2
 80030ec:	4699      	mov	r9, r3
 80030ee:	4623      	mov	r3, r4
 80030f0:	eb18 0303 	adds.w	r3, r8, r3
 80030f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030f8:	462b      	mov	r3, r5
 80030fa:	eb49 0303 	adc.w	r3, r9, r3
 80030fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800310e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003112:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003116:	460b      	mov	r3, r1
 8003118:	18db      	adds	r3, r3, r3
 800311a:	653b      	str	r3, [r7, #80]	; 0x50
 800311c:	4613      	mov	r3, r2
 800311e:	eb42 0303 	adc.w	r3, r2, r3
 8003122:	657b      	str	r3, [r7, #84]	; 0x54
 8003124:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003128:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800312c:	f7fd f858 	bl	80001e0 <__aeabi_uldivmod>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4b61      	ldr	r3, [pc, #388]	; (80032bc <UART_SetConfig+0x2d4>)
 8003136:	fba3 2302 	umull	r2, r3, r3, r2
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	011c      	lsls	r4, r3, #4
 800313e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003142:	2200      	movs	r2, #0
 8003144:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003148:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800314c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003150:	4642      	mov	r2, r8
 8003152:	464b      	mov	r3, r9
 8003154:	1891      	adds	r1, r2, r2
 8003156:	64b9      	str	r1, [r7, #72]	; 0x48
 8003158:	415b      	adcs	r3, r3
 800315a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800315c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003160:	4641      	mov	r1, r8
 8003162:	eb12 0a01 	adds.w	sl, r2, r1
 8003166:	4649      	mov	r1, r9
 8003168:	eb43 0b01 	adc.w	fp, r3, r1
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003178:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800317c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003180:	4692      	mov	sl, r2
 8003182:	469b      	mov	fp, r3
 8003184:	4643      	mov	r3, r8
 8003186:	eb1a 0303 	adds.w	r3, sl, r3
 800318a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800318e:	464b      	mov	r3, r9
 8003190:	eb4b 0303 	adc.w	r3, fp, r3
 8003194:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031ac:	460b      	mov	r3, r1
 80031ae:	18db      	adds	r3, r3, r3
 80031b0:	643b      	str	r3, [r7, #64]	; 0x40
 80031b2:	4613      	mov	r3, r2
 80031b4:	eb42 0303 	adc.w	r3, r2, r3
 80031b8:	647b      	str	r3, [r7, #68]	; 0x44
 80031ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80031c2:	f7fd f80d 	bl	80001e0 <__aeabi_uldivmod>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4611      	mov	r1, r2
 80031cc:	4b3b      	ldr	r3, [pc, #236]	; (80032bc <UART_SetConfig+0x2d4>)
 80031ce:	fba3 2301 	umull	r2, r3, r3, r1
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	2264      	movs	r2, #100	; 0x64
 80031d6:	fb02 f303 	mul.w	r3, r2, r3
 80031da:	1acb      	subs	r3, r1, r3
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031e2:	4b36      	ldr	r3, [pc, #216]	; (80032bc <UART_SetConfig+0x2d4>)
 80031e4:	fba3 2302 	umull	r2, r3, r3, r2
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031f0:	441c      	add	r4, r3
 80031f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031f6:	2200      	movs	r2, #0
 80031f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003200:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003204:	4642      	mov	r2, r8
 8003206:	464b      	mov	r3, r9
 8003208:	1891      	adds	r1, r2, r2
 800320a:	63b9      	str	r1, [r7, #56]	; 0x38
 800320c:	415b      	adcs	r3, r3
 800320e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003210:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003214:	4641      	mov	r1, r8
 8003216:	1851      	adds	r1, r2, r1
 8003218:	6339      	str	r1, [r7, #48]	; 0x30
 800321a:	4649      	mov	r1, r9
 800321c:	414b      	adcs	r3, r1
 800321e:	637b      	str	r3, [r7, #52]	; 0x34
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800322c:	4659      	mov	r1, fp
 800322e:	00cb      	lsls	r3, r1, #3
 8003230:	4651      	mov	r1, sl
 8003232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003236:	4651      	mov	r1, sl
 8003238:	00ca      	lsls	r2, r1, #3
 800323a:	4610      	mov	r0, r2
 800323c:	4619      	mov	r1, r3
 800323e:	4603      	mov	r3, r0
 8003240:	4642      	mov	r2, r8
 8003242:	189b      	adds	r3, r3, r2
 8003244:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003248:	464b      	mov	r3, r9
 800324a:	460a      	mov	r2, r1
 800324c:	eb42 0303 	adc.w	r3, r2, r3
 8003250:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003260:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003264:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003268:	460b      	mov	r3, r1
 800326a:	18db      	adds	r3, r3, r3
 800326c:	62bb      	str	r3, [r7, #40]	; 0x28
 800326e:	4613      	mov	r3, r2
 8003270:	eb42 0303 	adc.w	r3, r2, r3
 8003274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003276:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800327a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800327e:	f7fc ffaf 	bl	80001e0 <__aeabi_uldivmod>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <UART_SetConfig+0x2d4>)
 8003288:	fba3 1302 	umull	r1, r3, r3, r2
 800328c:	095b      	lsrs	r3, r3, #5
 800328e:	2164      	movs	r1, #100	; 0x64
 8003290:	fb01 f303 	mul.w	r3, r1, r3
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	3332      	adds	r3, #50	; 0x32
 800329a:	4a08      	ldr	r2, [pc, #32]	; (80032bc <UART_SetConfig+0x2d4>)
 800329c:	fba2 2303 	umull	r2, r3, r2, r3
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	f003 0207 	and.w	r2, r3, #7
 80032a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4422      	add	r2, r4
 80032ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032b0:	e105      	b.n	80034be <UART_SetConfig+0x4d6>
 80032b2:	bf00      	nop
 80032b4:	40011000 	.word	0x40011000
 80032b8:	40011400 	.word	0x40011400
 80032bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032c4:	2200      	movs	r2, #0
 80032c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80032d2:	4642      	mov	r2, r8
 80032d4:	464b      	mov	r3, r9
 80032d6:	1891      	adds	r1, r2, r2
 80032d8:	6239      	str	r1, [r7, #32]
 80032da:	415b      	adcs	r3, r3
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
 80032de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032e2:	4641      	mov	r1, r8
 80032e4:	1854      	adds	r4, r2, r1
 80032e6:	4649      	mov	r1, r9
 80032e8:	eb43 0501 	adc.w	r5, r3, r1
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	00eb      	lsls	r3, r5, #3
 80032f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032fa:	00e2      	lsls	r2, r4, #3
 80032fc:	4614      	mov	r4, r2
 80032fe:	461d      	mov	r5, r3
 8003300:	4643      	mov	r3, r8
 8003302:	18e3      	adds	r3, r4, r3
 8003304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003308:	464b      	mov	r3, r9
 800330a:	eb45 0303 	adc.w	r3, r5, r3
 800330e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800331e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800332e:	4629      	mov	r1, r5
 8003330:	008b      	lsls	r3, r1, #2
 8003332:	4621      	mov	r1, r4
 8003334:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003338:	4621      	mov	r1, r4
 800333a:	008a      	lsls	r2, r1, #2
 800333c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003340:	f7fc ff4e 	bl	80001e0 <__aeabi_uldivmod>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4b60      	ldr	r3, [pc, #384]	; (80034cc <UART_SetConfig+0x4e4>)
 800334a:	fba3 2302 	umull	r2, r3, r3, r2
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	011c      	lsls	r4, r3, #4
 8003352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003356:	2200      	movs	r2, #0
 8003358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800335c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003360:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003364:	4642      	mov	r2, r8
 8003366:	464b      	mov	r3, r9
 8003368:	1891      	adds	r1, r2, r2
 800336a:	61b9      	str	r1, [r7, #24]
 800336c:	415b      	adcs	r3, r3
 800336e:	61fb      	str	r3, [r7, #28]
 8003370:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003374:	4641      	mov	r1, r8
 8003376:	1851      	adds	r1, r2, r1
 8003378:	6139      	str	r1, [r7, #16]
 800337a:	4649      	mov	r1, r9
 800337c:	414b      	adcs	r3, r1
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800338c:	4659      	mov	r1, fp
 800338e:	00cb      	lsls	r3, r1, #3
 8003390:	4651      	mov	r1, sl
 8003392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003396:	4651      	mov	r1, sl
 8003398:	00ca      	lsls	r2, r1, #3
 800339a:	4610      	mov	r0, r2
 800339c:	4619      	mov	r1, r3
 800339e:	4603      	mov	r3, r0
 80033a0:	4642      	mov	r2, r8
 80033a2:	189b      	adds	r3, r3, r2
 80033a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033a8:	464b      	mov	r3, r9
 80033aa:	460a      	mov	r2, r1
 80033ac:	eb42 0303 	adc.w	r3, r2, r3
 80033b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80033be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80033cc:	4649      	mov	r1, r9
 80033ce:	008b      	lsls	r3, r1, #2
 80033d0:	4641      	mov	r1, r8
 80033d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033d6:	4641      	mov	r1, r8
 80033d8:	008a      	lsls	r2, r1, #2
 80033da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80033de:	f7fc feff 	bl	80001e0 <__aeabi_uldivmod>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4b39      	ldr	r3, [pc, #228]	; (80034cc <UART_SetConfig+0x4e4>)
 80033e8:	fba3 1302 	umull	r1, r3, r3, r2
 80033ec:	095b      	lsrs	r3, r3, #5
 80033ee:	2164      	movs	r1, #100	; 0x64
 80033f0:	fb01 f303 	mul.w	r3, r1, r3
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	3332      	adds	r3, #50	; 0x32
 80033fa:	4a34      	ldr	r2, [pc, #208]	; (80034cc <UART_SetConfig+0x4e4>)
 80033fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003400:	095b      	lsrs	r3, r3, #5
 8003402:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003406:	441c      	add	r4, r3
 8003408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800340c:	2200      	movs	r2, #0
 800340e:	673b      	str	r3, [r7, #112]	; 0x70
 8003410:	677a      	str	r2, [r7, #116]	; 0x74
 8003412:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003416:	4642      	mov	r2, r8
 8003418:	464b      	mov	r3, r9
 800341a:	1891      	adds	r1, r2, r2
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	415b      	adcs	r3, r3
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003426:	4641      	mov	r1, r8
 8003428:	1851      	adds	r1, r2, r1
 800342a:	6039      	str	r1, [r7, #0]
 800342c:	4649      	mov	r1, r9
 800342e:	414b      	adcs	r3, r1
 8003430:	607b      	str	r3, [r7, #4]
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800343e:	4659      	mov	r1, fp
 8003440:	00cb      	lsls	r3, r1, #3
 8003442:	4651      	mov	r1, sl
 8003444:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003448:	4651      	mov	r1, sl
 800344a:	00ca      	lsls	r2, r1, #3
 800344c:	4610      	mov	r0, r2
 800344e:	4619      	mov	r1, r3
 8003450:	4603      	mov	r3, r0
 8003452:	4642      	mov	r2, r8
 8003454:	189b      	adds	r3, r3, r2
 8003456:	66bb      	str	r3, [r7, #104]	; 0x68
 8003458:	464b      	mov	r3, r9
 800345a:	460a      	mov	r2, r1
 800345c:	eb42 0303 	adc.w	r3, r2, r3
 8003460:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	663b      	str	r3, [r7, #96]	; 0x60
 800346c:	667a      	str	r2, [r7, #100]	; 0x64
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800347a:	4649      	mov	r1, r9
 800347c:	008b      	lsls	r3, r1, #2
 800347e:	4641      	mov	r1, r8
 8003480:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003484:	4641      	mov	r1, r8
 8003486:	008a      	lsls	r2, r1, #2
 8003488:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800348c:	f7fc fea8 	bl	80001e0 <__aeabi_uldivmod>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <UART_SetConfig+0x4e4>)
 8003496:	fba3 1302 	umull	r1, r3, r3, r2
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	2164      	movs	r1, #100	; 0x64
 800349e:	fb01 f303 	mul.w	r3, r1, r3
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	3332      	adds	r3, #50	; 0x32
 80034a8:	4a08      	ldr	r2, [pc, #32]	; (80034cc <UART_SetConfig+0x4e4>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	f003 020f 	and.w	r2, r3, #15
 80034b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4422      	add	r2, r4
 80034bc:	609a      	str	r2, [r3, #8]
}
 80034be:	bf00      	nop
 80034c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034c4:	46bd      	mov	sp, r7
 80034c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ca:	bf00      	nop
 80034cc:	51eb851f 	.word	0x51eb851f

080034d0 <__NVIC_SetPriority>:
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	6039      	str	r1, [r7, #0]
 80034da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	db0a      	blt.n	80034fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	490c      	ldr	r1, [pc, #48]	; (800351c <__NVIC_SetPriority+0x4c>)
 80034ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ee:	0112      	lsls	r2, r2, #4
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	440b      	add	r3, r1
 80034f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034f8:	e00a      	b.n	8003510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	4908      	ldr	r1, [pc, #32]	; (8003520 <__NVIC_SetPriority+0x50>)
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	3b04      	subs	r3, #4
 8003508:	0112      	lsls	r2, r2, #4
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	440b      	add	r3, r1
 800350e:	761a      	strb	r2, [r3, #24]
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	e000e100 	.word	0xe000e100
 8003520:	e000ed00 	.word	0xe000ed00

08003524 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003528:	4b05      	ldr	r3, [pc, #20]	; (8003540 <SysTick_Handler+0x1c>)
 800352a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800352c:	f001 ffa8 	bl	8005480 <xTaskGetSchedulerState>
 8003530:	4603      	mov	r3, r0
 8003532:	2b01      	cmp	r3, #1
 8003534:	d001      	beq.n	800353a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003536:	f002 fe8f 	bl	8006258 <xPortSysTickHandler>
  }
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	e000e010 	.word	0xe000e010

08003544 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003548:	2100      	movs	r1, #0
 800354a:	f06f 0004 	mvn.w	r0, #4
 800354e:	f7ff ffbf 	bl	80034d0 <__NVIC_SetPriority>
#endif
}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800355e:	f3ef 8305 	mrs	r3, IPSR
 8003562:	603b      	str	r3, [r7, #0]
  return(result);
 8003564:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800356a:	f06f 0305 	mvn.w	r3, #5
 800356e:	607b      	str	r3, [r7, #4]
 8003570:	e00c      	b.n	800358c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <osKernelInitialize+0x44>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d105      	bne.n	8003586 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800357a:	4b08      	ldr	r3, [pc, #32]	; (800359c <osKernelInitialize+0x44>)
 800357c:	2201      	movs	r2, #1
 800357e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003580:	2300      	movs	r3, #0
 8003582:	607b      	str	r3, [r7, #4]
 8003584:	e002      	b.n	800358c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003586:	f04f 33ff 	mov.w	r3, #4294967295
 800358a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800358c:	687b      	ldr	r3, [r7, #4]
}
 800358e:	4618      	mov	r0, r3
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	200001b4 	.word	0x200001b4

080035a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035a6:	f3ef 8305 	mrs	r3, IPSR
 80035aa:	603b      	str	r3, [r7, #0]
  return(result);
 80035ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80035b2:	f06f 0305 	mvn.w	r3, #5
 80035b6:	607b      	str	r3, [r7, #4]
 80035b8:	e010      	b.n	80035dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80035ba:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <osKernelStart+0x48>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d109      	bne.n	80035d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80035c2:	f7ff ffbf 	bl	8003544 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80035c6:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <osKernelStart+0x48>)
 80035c8:	2202      	movs	r2, #2
 80035ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80035cc:	f001 fafc 	bl	8004bc8 <vTaskStartScheduler>
      stat = osOK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	607b      	str	r3, [r7, #4]
 80035d4:	e002      	b.n	80035dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80035d6:	f04f 33ff 	mov.w	r3, #4294967295
 80035da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80035dc:	687b      	ldr	r3, [r7, #4]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	200001b4 	.word	0x200001b4

080035ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08e      	sub	sp, #56	; 0x38
 80035f0:	af04      	add	r7, sp, #16
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035fc:	f3ef 8305 	mrs	r3, IPSR
 8003600:	617b      	str	r3, [r7, #20]
  return(result);
 8003602:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003604:	2b00      	cmp	r3, #0
 8003606:	d17e      	bne.n	8003706 <osThreadNew+0x11a>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d07b      	beq.n	8003706 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800360e:	2380      	movs	r3, #128	; 0x80
 8003610:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003612:	2318      	movs	r3, #24
 8003614:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003616:	2300      	movs	r3, #0
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800361a:	f04f 33ff 	mov.w	r3, #4294967295
 800361e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d045      	beq.n	80036b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <osThreadNew+0x48>
        name = attr->name;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <osThreadNew+0x6e>
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	2b38      	cmp	r3, #56	; 0x38
 800364c:	d805      	bhi.n	800365a <osThreadNew+0x6e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <osThreadNew+0x72>
        return (NULL);
 800365a:	2300      	movs	r3, #0
 800365c:	e054      	b.n	8003708 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	089b      	lsrs	r3, r3, #2
 800366c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00e      	beq.n	8003694 <osThreadNew+0xa8>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2bbb      	cmp	r3, #187	; 0xbb
 800367c:	d90a      	bls.n	8003694 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003682:	2b00      	cmp	r3, #0
 8003684:	d006      	beq.n	8003694 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <osThreadNew+0xa8>
        mem = 1;
 800368e:	2301      	movs	r3, #1
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	e010      	b.n	80036b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10c      	bne.n	80036b6 <osThreadNew+0xca>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d108      	bne.n	80036b6 <osThreadNew+0xca>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d104      	bne.n	80036b6 <osThreadNew+0xca>
          mem = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	61bb      	str	r3, [r7, #24]
 80036b0:	e001      	b.n	80036b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d110      	bne.n	80036de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036c4:	9202      	str	r2, [sp, #8]
 80036c6:	9301      	str	r3, [sp, #4]
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	6a3a      	ldr	r2, [r7, #32]
 80036d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f001 f80e 	bl	80046f4 <xTaskCreateStatic>
 80036d8:	4603      	mov	r3, r0
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	e013      	b.n	8003706 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d110      	bne.n	8003706 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	f107 0310 	add.w	r3, r7, #16
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f001 f859 	bl	80047ae <xTaskCreate>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d001      	beq.n	8003706 <osThreadNew+0x11a>
            hTask = NULL;
 8003702:	2300      	movs	r3, #0
 8003704:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003706:	693b      	ldr	r3, [r7, #16]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3728      	adds	r7, #40	; 0x28
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003718:	f3ef 8305 	mrs	r3, IPSR
 800371c:	60bb      	str	r3, [r7, #8]
  return(result);
 800371e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <osDelay+0x1c>
    stat = osErrorISR;
 8003724:	f06f 0305 	mvn.w	r3, #5
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	e007      	b.n	800373c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800372c:	2300      	movs	r3, #0
 800372e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f001 fa12 	bl	8004b60 <vTaskDelay>
    }
  }

  return (stat);
 800373c:	68fb      	ldr	r3, [r7, #12]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003746:	b580      	push	{r7, lr}
 8003748:	b08a      	sub	sp, #40	; 0x28
 800374a:	af02      	add	r7, sp, #8
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003756:	f3ef 8305 	mrs	r3, IPSR
 800375a:	613b      	str	r3, [r7, #16]
  return(result);
 800375c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800375e:	2b00      	cmp	r3, #0
 8003760:	d15f      	bne.n	8003822 <osMessageQueueNew+0xdc>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d05c      	beq.n	8003822 <osMessageQueueNew+0xdc>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d059      	beq.n	8003822 <osMessageQueueNew+0xdc>
    mem = -1;
 800376e:	f04f 33ff 	mov.w	r3, #4294967295
 8003772:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d029      	beq.n	80037ce <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d012      	beq.n	80037a8 <osMessageQueueNew+0x62>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	2b4f      	cmp	r3, #79	; 0x4f
 8003788:	d90e      	bls.n	80037a8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695a      	ldr	r2, [r3, #20]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	fb01 f303 	mul.w	r3, r1, r3
 800379e:	429a      	cmp	r2, r3
 80037a0:	d302      	bcc.n	80037a8 <osMessageQueueNew+0x62>
        mem = 1;
 80037a2:	2301      	movs	r3, #1
 80037a4:	61bb      	str	r3, [r7, #24]
 80037a6:	e014      	b.n	80037d2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d110      	bne.n	80037d2 <osMessageQueueNew+0x8c>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10c      	bne.n	80037d2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d108      	bne.n	80037d2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d104      	bne.n	80037d2 <osMessageQueueNew+0x8c>
          mem = 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61bb      	str	r3, [r7, #24]
 80037cc:	e001      	b.n	80037d2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80037ce:	2300      	movs	r3, #0
 80037d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d10b      	bne.n	80037f0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2100      	movs	r1, #0
 80037e2:	9100      	str	r1, [sp, #0]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f970 	bl	8003acc <xQueueGenericCreateStatic>
 80037ec:	61f8      	str	r0, [r7, #28]
 80037ee:	e008      	b.n	8003802 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d105      	bne.n	8003802 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80037f6:	2200      	movs	r2, #0
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 f9de 	bl	8003bbc <xQueueGenericCreate>
 8003800:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00c      	beq.n	8003822 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <osMessageQueueNew+0xd0>
        name = attr->name;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	e001      	b.n	800381a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800381a:	6979      	ldr	r1, [r7, #20]
 800381c:	69f8      	ldr	r0, [r7, #28]
 800381e:	f000 ff0b 	bl	8004638 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003822:	69fb      	ldr	r3, [r7, #28]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3720      	adds	r7, #32
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4a07      	ldr	r2, [pc, #28]	; (8003858 <vApplicationGetIdleTaskMemory+0x2c>)
 800383c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4a06      	ldr	r2, [pc, #24]	; (800385c <vApplicationGetIdleTaskMemory+0x30>)
 8003842:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2280      	movs	r2, #128	; 0x80
 8003848:	601a      	str	r2, [r3, #0]
}
 800384a:	bf00      	nop
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	200001b8 	.word	0x200001b8
 800385c:	20000274 	.word	0x20000274

08003860 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4a07      	ldr	r2, [pc, #28]	; (800388c <vApplicationGetTimerTaskMemory+0x2c>)
 8003870:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4a06      	ldr	r2, [pc, #24]	; (8003890 <vApplicationGetTimerTaskMemory+0x30>)
 8003876:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800387e:	601a      	str	r2, [r3, #0]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	20000474 	.word	0x20000474
 8003890:	20000530 	.word	0x20000530

08003894 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f103 0208 	add.w	r2, r3, #8
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f103 0208 	add.w	r2, r3, #8
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f103 0208 	add.w	r2, r3, #8
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038ee:	b480      	push	{r7}
 80038f0:	b085      	sub	sp, #20
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	601a      	str	r2, [r3, #0]
}
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003936:	b480      	push	{r7}
 8003938:	b085      	sub	sp, #20
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d103      	bne.n	8003956 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	e00c      	b.n	8003970 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3308      	adds	r3, #8
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	e002      	b.n	8003964 <vListInsert+0x2e>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	429a      	cmp	r2, r3
 800396e:	d2f6      	bcs.n	800395e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	601a      	str	r2, [r3, #0]
}
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6892      	ldr	r2, [r2, #8]
 80039be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6852      	ldr	r2, [r2, #4]
 80039c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d103      	bne.n	80039dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	1e5a      	subs	r2, r3, #1
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10a      	bne.n	8003a26 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a14:	f383 8811 	msr	BASEPRI, r3
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a22:	bf00      	nop
 8003a24:	e7fe      	b.n	8003a24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003a26:	f002 fb85 	bl	8006134 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a32:	68f9      	ldr	r1, [r7, #12]
 8003a34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a36:	fb01 f303 	mul.w	r3, r1, r3
 8003a3a:	441a      	add	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	3b01      	subs	r3, #1
 8003a58:	68f9      	ldr	r1, [r7, #12]
 8003a5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	441a      	add	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	22ff      	movs	r2, #255	; 0xff
 8003a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	22ff      	movs	r2, #255	; 0xff
 8003a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d114      	bne.n	8003aa6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d01a      	beq.n	8003aba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3310      	adds	r3, #16
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f001 fb37 	bl	80050fc <xTaskRemoveFromEventList>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d012      	beq.n	8003aba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a94:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <xQueueGenericReset+0xcc>)
 8003a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	e009      	b.n	8003aba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	3310      	adds	r3, #16
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff fef2 	bl	8003894 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3324      	adds	r3, #36	; 0x24
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff feed 	bl	8003894 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003aba:	f002 fb6b 	bl	8006194 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003abe:	2301      	movs	r3, #1
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	e000ed04 	.word	0xe000ed04

08003acc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08e      	sub	sp, #56	; 0x38
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10a      	bne.n	8003af6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003af2:	bf00      	nop
 8003af4:	e7fe      	b.n	8003af4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b0e:	bf00      	nop
 8003b10:	e7fe      	b.n	8003b10 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <xQueueGenericCreateStatic+0x52>
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <xQueueGenericCreateStatic+0x56>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <xQueueGenericCreateStatic+0x58>
 8003b22:	2300      	movs	r3, #0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	623b      	str	r3, [r7, #32]
}
 8003b3a:	bf00      	nop
 8003b3c:	e7fe      	b.n	8003b3c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d102      	bne.n	8003b4a <xQueueGenericCreateStatic+0x7e>
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <xQueueGenericCreateStatic+0x82>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <xQueueGenericCreateStatic+0x84>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	61fb      	str	r3, [r7, #28]
}
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003b6a:	2350      	movs	r3, #80	; 0x50
 8003b6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b50      	cmp	r3, #80	; 0x50
 8003b72:	d00a      	beq.n	8003b8a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	61bb      	str	r3, [r7, #24]
}
 8003b86:	bf00      	nop
 8003b88:	e7fe      	b.n	8003b88 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003b8a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b9e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f83f 	bl	8003c30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3730      	adds	r7, #48	; 0x30
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08a      	sub	sp, #40	; 0x28
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10a      	bne.n	8003be6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	613b      	str	r3, [r7, #16]
}
 8003be2:	bf00      	nop
 8003be4:	e7fe      	b.n	8003be4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	3350      	adds	r3, #80	; 0x50
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f002 fbbf 	bl	8006378 <pvPortMalloc>
 8003bfa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d011      	beq.n	8003c26 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	3350      	adds	r3, #80	; 0x50
 8003c0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c14:	79fa      	ldrb	r2, [r7, #7]
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	68b9      	ldr	r1, [r7, #8]
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 f805 	bl	8003c30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003c26:	69bb      	ldr	r3, [r7, #24]
	}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3720      	adds	r7, #32
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d103      	bne.n	8003c4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	e002      	b.n	8003c52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c5e:	2101      	movs	r1, #1
 8003c60:	69b8      	ldr	r0, [r7, #24]
 8003c62:	f7ff fecb 	bl	80039fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	78fa      	ldrb	r2, [r7, #3]
 8003c6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c6e:	bf00      	nop
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00e      	beq.n	8003ca2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003c96:	2300      	movs	r3, #0
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f81d 	bl	8003cdc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b086      	sub	sp, #24
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	2300      	movs	r3, #0
 8003cba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	6939      	ldr	r1, [r7, #16]
 8003cc2:	6978      	ldr	r0, [r7, #20]
 8003cc4:	f7ff ff7a 	bl	8003bbc <xQueueGenericCreate>
 8003cc8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f7ff ffd3 	bl	8003c76 <prvInitialiseMutex>

		return xNewQueue;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
	}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08e      	sub	sp, #56	; 0x38
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003cea:	2300      	movs	r3, #0
 8003cec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10a      	bne.n	8003d0e <xQueueGenericSend+0x32>
	__asm volatile
 8003cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfc:	f383 8811 	msr	BASEPRI, r3
 8003d00:	f3bf 8f6f 	isb	sy
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d0a:	bf00      	nop
 8003d0c:	e7fe      	b.n	8003d0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d103      	bne.n	8003d1c <xQueueGenericSend+0x40>
 8003d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <xQueueGenericSend+0x44>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <xQueueGenericSend+0x46>
 8003d20:	2300      	movs	r3, #0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <xQueueGenericSend+0x60>
	__asm volatile
 8003d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2a:	f383 8811 	msr	BASEPRI, r3
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d38:	bf00      	nop
 8003d3a:	e7fe      	b.n	8003d3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d103      	bne.n	8003d4a <xQueueGenericSend+0x6e>
 8003d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d101      	bne.n	8003d4e <xQueueGenericSend+0x72>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <xQueueGenericSend+0x74>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <xQueueGenericSend+0x8e>
	__asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	623b      	str	r3, [r7, #32]
}
 8003d66:	bf00      	nop
 8003d68:	e7fe      	b.n	8003d68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d6a:	f001 fb89 	bl	8005480 <xTaskGetSchedulerState>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d102      	bne.n	8003d7a <xQueueGenericSend+0x9e>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <xQueueGenericSend+0xa2>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <xQueueGenericSend+0xa4>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10a      	bne.n	8003d9a <xQueueGenericSend+0xbe>
	__asm volatile
 8003d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	61fb      	str	r3, [r7, #28]
}
 8003d96:	bf00      	nop
 8003d98:	e7fe      	b.n	8003d98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d9a:	f002 f9cb 	bl	8006134 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d302      	bcc.n	8003db0 <xQueueGenericSend+0xd4>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d129      	bne.n	8003e04 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	68b9      	ldr	r1, [r7, #8]
 8003db4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003db6:	f000 fb2f 	bl	8004418 <prvCopyDataToQueue>
 8003dba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d010      	beq.n	8003de6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc6:	3324      	adds	r3, #36	; 0x24
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 f997 	bl	80050fc <xTaskRemoveFromEventList>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d013      	beq.n	8003dfc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003dd4:	4b3f      	ldr	r3, [pc, #252]	; (8003ed4 <xQueueGenericSend+0x1f8>)
 8003dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	e00a      	b.n	8003dfc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003dec:	4b39      	ldr	r3, [pc, #228]	; (8003ed4 <xQueueGenericSend+0x1f8>)
 8003dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003dfc:	f002 f9ca 	bl	8006194 <vPortExitCritical>
				return pdPASS;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e063      	b.n	8003ecc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d103      	bne.n	8003e12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e0a:	f002 f9c3 	bl	8006194 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e05c      	b.n	8003ecc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d106      	bne.n	8003e26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e18:	f107 0314 	add.w	r3, r7, #20
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f001 f9d1 	bl	80051c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e22:	2301      	movs	r3, #1
 8003e24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e26:	f002 f9b5 	bl	8006194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e2a:	f000 ff3d 	bl	8004ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e2e:	f002 f981 	bl	8006134 <vPortEnterCritical>
 8003e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e38:	b25b      	sxtb	r3, r3
 8003e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3e:	d103      	bne.n	8003e48 <xQueueGenericSend+0x16c>
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e4e:	b25b      	sxtb	r3, r3
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e54:	d103      	bne.n	8003e5e <xQueueGenericSend+0x182>
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e5e:	f002 f999 	bl	8006194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e62:	1d3a      	adds	r2, r7, #4
 8003e64:	f107 0314 	add.w	r3, r7, #20
 8003e68:	4611      	mov	r1, r2
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f001 f9c0 	bl	80051f0 <xTaskCheckForTimeOut>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d124      	bne.n	8003ec0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e78:	f000 fbc6 	bl	8004608 <prvIsQueueFull>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d018      	beq.n	8003eb4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	3310      	adds	r3, #16
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	4611      	mov	r1, r2
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f001 f8e6 	bl	800505c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e92:	f000 fb51 	bl	8004538 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e96:	f000 ff15 	bl	8004cc4 <xTaskResumeAll>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f47f af7c 	bne.w	8003d9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <xQueueGenericSend+0x1f8>)
 8003ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	e772      	b.n	8003d9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003eb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eb6:	f000 fb3f 	bl	8004538 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003eba:	f000 ff03 	bl	8004cc4 <xTaskResumeAll>
 8003ebe:	e76c      	b.n	8003d9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ec2:	f000 fb39 	bl	8004538 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ec6:	f000 fefd 	bl	8004cc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003eca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3738      	adds	r7, #56	; 0x38
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	e000ed04 	.word	0xe000ed04

08003ed8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b090      	sub	sp, #64	; 0x40
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f02:	bf00      	nop
 8003f04:	e7fe      	b.n	8003f04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d103      	bne.n	8003f14 <xQueueGenericSendFromISR+0x3c>
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <xQueueGenericSendFromISR+0x40>
 8003f14:	2301      	movs	r3, #1
 8003f16:	e000      	b.n	8003f1a <xQueueGenericSendFromISR+0x42>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10a      	bne.n	8003f34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f30:	bf00      	nop
 8003f32:	e7fe      	b.n	8003f32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d103      	bne.n	8003f42 <xQueueGenericSendFromISR+0x6a>
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <xQueueGenericSendFromISR+0x6e>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <xQueueGenericSendFromISR+0x70>
 8003f46:	2300      	movs	r3, #0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10a      	bne.n	8003f62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	623b      	str	r3, [r7, #32]
}
 8003f5e:	bf00      	nop
 8003f60:	e7fe      	b.n	8003f60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f62:	f002 f9c9 	bl	80062f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003f66:	f3ef 8211 	mrs	r2, BASEPRI
 8003f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	61fa      	str	r2, [r7, #28]
 8003f7c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f80:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d302      	bcc.n	8003f94 <xQueueGenericSendFromISR+0xbc>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d12f      	bne.n	8003ff4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003faa:	f000 fa35 	bl	8004418 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003fae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb6:	d112      	bne.n	8003fde <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d016      	beq.n	8003fee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc2:	3324      	adds	r3, #36	; 0x24
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f001 f899 	bl	80050fc <xTaskRemoveFromEventList>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00e      	beq.n	8003fee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00b      	beq.n	8003fee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	e007      	b.n	8003fee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003fde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	b25a      	sxtb	r2, r3
 8003fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003ff2:	e001      	b.n	8003ff8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004002:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004006:	4618      	mov	r0, r3
 8004008:	3740      	adds	r7, #64	; 0x40
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08c      	sub	sp, #48	; 0x30
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800401c:	2300      	movs	r3, #0
 800401e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10a      	bne.n	8004040 <xQueueReceive+0x30>
	__asm volatile
 800402a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402e:	f383 8811 	msr	BASEPRI, r3
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	623b      	str	r3, [r7, #32]
}
 800403c:	bf00      	nop
 800403e:	e7fe      	b.n	800403e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d103      	bne.n	800404e <xQueueReceive+0x3e>
 8004046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <xQueueReceive+0x42>
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <xQueueReceive+0x44>
 8004052:	2300      	movs	r3, #0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10a      	bne.n	800406e <xQueueReceive+0x5e>
	__asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	61fb      	str	r3, [r7, #28]
}
 800406a:	bf00      	nop
 800406c:	e7fe      	b.n	800406c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800406e:	f001 fa07 	bl	8005480 <xTaskGetSchedulerState>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d102      	bne.n	800407e <xQueueReceive+0x6e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <xQueueReceive+0x72>
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <xQueueReceive+0x74>
 8004082:	2300      	movs	r3, #0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10a      	bne.n	800409e <xQueueReceive+0x8e>
	__asm volatile
 8004088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	61bb      	str	r3, [r7, #24]
}
 800409a:	bf00      	nop
 800409c:	e7fe      	b.n	800409c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800409e:	f002 f849 	bl	8006134 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01f      	beq.n	80040ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040ae:	68b9      	ldr	r1, [r7, #8]
 80040b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040b2:	f000 fa1b 	bl	80044ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	1e5a      	subs	r2, r3, #1
 80040ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00f      	beq.n	80040e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	3310      	adds	r3, #16
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 f816 	bl	80050fc <xTaskRemoveFromEventList>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d007      	beq.n	80040e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80040d6:	4b3d      	ldr	r3, [pc, #244]	; (80041cc <xQueueReceive+0x1bc>)
 80040d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80040e6:	f002 f855 	bl	8006194 <vPortExitCritical>
				return pdPASS;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e069      	b.n	80041c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d103      	bne.n	80040fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040f4:	f002 f84e 	bl	8006194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80040f8:	2300      	movs	r3, #0
 80040fa:	e062      	b.n	80041c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004102:	f107 0310 	add.w	r3, r7, #16
 8004106:	4618      	mov	r0, r3
 8004108:	f001 f85c 	bl	80051c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800410c:	2301      	movs	r3, #1
 800410e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004110:	f002 f840 	bl	8006194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004114:	f000 fdc8 	bl	8004ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004118:	f002 f80c 	bl	8006134 <vPortEnterCritical>
 800411c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004122:	b25b      	sxtb	r3, r3
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004128:	d103      	bne.n	8004132 <xQueueReceive+0x122>
 800412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004134:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004138:	b25b      	sxtb	r3, r3
 800413a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413e:	d103      	bne.n	8004148 <xQueueReceive+0x138>
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004148:	f002 f824 	bl	8006194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800414c:	1d3a      	adds	r2, r7, #4
 800414e:	f107 0310 	add.w	r3, r7, #16
 8004152:	4611      	mov	r1, r2
 8004154:	4618      	mov	r0, r3
 8004156:	f001 f84b 	bl	80051f0 <xTaskCheckForTimeOut>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d123      	bne.n	80041a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004162:	f000 fa3b 	bl	80045dc <prvIsQueueEmpty>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d017      	beq.n	800419c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800416c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416e:	3324      	adds	r3, #36	; 0x24
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	4611      	mov	r1, r2
 8004174:	4618      	mov	r0, r3
 8004176:	f000 ff71 	bl	800505c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800417a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800417c:	f000 f9dc 	bl	8004538 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004180:	f000 fda0 	bl	8004cc4 <xTaskResumeAll>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d189      	bne.n	800409e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800418a:	4b10      	ldr	r3, [pc, #64]	; (80041cc <xQueueReceive+0x1bc>)
 800418c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	e780      	b.n	800409e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800419c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800419e:	f000 f9cb 	bl	8004538 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041a2:	f000 fd8f 	bl	8004cc4 <xTaskResumeAll>
 80041a6:	e77a      	b.n	800409e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80041a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041aa:	f000 f9c5 	bl	8004538 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041ae:	f000 fd89 	bl	8004cc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041b4:	f000 fa12 	bl	80045dc <prvIsQueueEmpty>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f43f af6f 	beq.w	800409e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80041c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3730      	adds	r7, #48	; 0x30
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	e000ed04 	.word	0xe000ed04

080041d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08e      	sub	sp, #56	; 0x38
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80041da:	2300      	movs	r3, #0
 80041dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80041e2:	2300      	movs	r3, #0
 80041e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80041e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10a      	bne.n	8004202 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	623b      	str	r3, [r7, #32]
}
 80041fe:	bf00      	nop
 8004200:	e7fe      	b.n	8004200 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	61fb      	str	r3, [r7, #28]
}
 800421c:	bf00      	nop
 800421e:	e7fe      	b.n	800421e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004220:	f001 f92e 	bl	8005480 <xTaskGetSchedulerState>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d102      	bne.n	8004230 <xQueueSemaphoreTake+0x60>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <xQueueSemaphoreTake+0x64>
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <xQueueSemaphoreTake+0x66>
 8004234:	2300      	movs	r3, #0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10a      	bne.n	8004250 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	61bb      	str	r3, [r7, #24]
}
 800424c:	bf00      	nop
 800424e:	e7fe      	b.n	800424e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004250:	f001 ff70 	bl	8006134 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	2b00      	cmp	r3, #0
 800425e:	d024      	beq.n	80042aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004262:	1e5a      	subs	r2, r3, #1
 8004264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004266:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d104      	bne.n	800427a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004270:	f001 fa7c 	bl	800576c <pvTaskIncrementMutexHeldCount>
 8004274:	4602      	mov	r2, r0
 8004276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004278:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00f      	beq.n	80042a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004284:	3310      	adds	r3, #16
 8004286:	4618      	mov	r0, r3
 8004288:	f000 ff38 	bl	80050fc <xTaskRemoveFromEventList>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d007      	beq.n	80042a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004292:	4b54      	ldr	r3, [pc, #336]	; (80043e4 <xQueueSemaphoreTake+0x214>)
 8004294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042a2:	f001 ff77 	bl	8006194 <vPortExitCritical>
				return pdPASS;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e097      	b.n	80043da <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d111      	bne.n	80042d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80042b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	617b      	str	r3, [r7, #20]
}
 80042c8:	bf00      	nop
 80042ca:	e7fe      	b.n	80042ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80042cc:	f001 ff62 	bl	8006194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e082      	b.n	80043da <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042da:	f107 030c 	add.w	r3, r7, #12
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 ff70 	bl	80051c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042e4:	2301      	movs	r3, #1
 80042e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042e8:	f001 ff54 	bl	8006194 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042ec:	f000 fcdc 	bl	8004ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042f0:	f001 ff20 	bl	8006134 <vPortEnterCritical>
 80042f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042fa:	b25b      	sxtb	r3, r3
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d103      	bne.n	800430a <xQueueSemaphoreTake+0x13a>
 8004302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004310:	b25b      	sxtb	r3, r3
 8004312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004316:	d103      	bne.n	8004320 <xQueueSemaphoreTake+0x150>
 8004318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004320:	f001 ff38 	bl	8006194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004324:	463a      	mov	r2, r7
 8004326:	f107 030c 	add.w	r3, r7, #12
 800432a:	4611      	mov	r1, r2
 800432c:	4618      	mov	r0, r3
 800432e:	f000 ff5f 	bl	80051f0 <xTaskCheckForTimeOut>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d132      	bne.n	800439e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004338:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800433a:	f000 f94f 	bl	80045dc <prvIsQueueEmpty>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d026      	beq.n	8004392 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d109      	bne.n	8004360 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800434c:	f001 fef2 	bl	8006134 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4618      	mov	r0, r3
 8004356:	f001 f8b1 	bl	80054bc <xTaskPriorityInherit>
 800435a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800435c:	f001 ff1a 	bl	8006194 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004362:	3324      	adds	r3, #36	; 0x24
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	4611      	mov	r1, r2
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fe77 	bl	800505c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800436e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004370:	f000 f8e2 	bl	8004538 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004374:	f000 fca6 	bl	8004cc4 <xTaskResumeAll>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	f47f af68 	bne.w	8004250 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004380:	4b18      	ldr	r3, [pc, #96]	; (80043e4 <xQueueSemaphoreTake+0x214>)
 8004382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	e75e      	b.n	8004250 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004392:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004394:	f000 f8d0 	bl	8004538 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004398:	f000 fc94 	bl	8004cc4 <xTaskResumeAll>
 800439c:	e758      	b.n	8004250 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800439e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043a0:	f000 f8ca 	bl	8004538 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043a4:	f000 fc8e 	bl	8004cc4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043aa:	f000 f917 	bl	80045dc <prvIsQueueEmpty>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f43f af4d 	beq.w	8004250 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80043b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00d      	beq.n	80043d8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80043bc:	f001 feba 	bl	8006134 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80043c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043c2:	f000 f811 	bl	80043e8 <prvGetDisinheritPriorityAfterTimeout>
 80043c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80043c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 f94a 	bl	8005668 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80043d4:	f001 fede 	bl	8006194 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80043d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3738      	adds	r7, #56	; 0x38
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	e000ed04 	.word	0xe000ed04

080043e8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d006      	beq.n	8004406 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	e001      	b.n	800440a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800440a:	68fb      	ldr	r3, [r7, #12]
	}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10d      	bne.n	8004452 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d14d      	bne.n	80044da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	4618      	mov	r0, r3
 8004444:	f001 f8a2 	bl	800558c <xTaskPriorityDisinherit>
 8004448:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	609a      	str	r2, [r3, #8]
 8004450:	e043      	b.n	80044da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d119      	bne.n	800448c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6858      	ldr	r0, [r3, #4]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	461a      	mov	r2, r3
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	f002 f998 	bl	8006798 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	441a      	add	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	429a      	cmp	r2, r3
 8004480:	d32b      	bcc.n	80044da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	e026      	b.n	80044da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	68d8      	ldr	r0, [r3, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	461a      	mov	r2, r3
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	f002 f97e 	bl	8006798 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	425b      	negs	r3, r3
 80044a6:	441a      	add	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d207      	bcs.n	80044c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	425b      	negs	r3, r3
 80044c2:	441a      	add	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d105      	bne.n	80044da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80044e2:	697b      	ldr	r3, [r7, #20]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d018      	beq.n	8004530 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	441a      	add	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	429a      	cmp	r2, r3
 8004516:	d303      	bcc.n	8004520 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68d9      	ldr	r1, [r3, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	461a      	mov	r2, r3
 800452a:	6838      	ldr	r0, [r7, #0]
 800452c:	f002 f934 	bl	8006798 <memcpy>
	}
}
 8004530:	bf00      	nop
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004540:	f001 fdf8 	bl	8006134 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800454a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800454c:	e011      	b.n	8004572 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	2b00      	cmp	r3, #0
 8004554:	d012      	beq.n	800457c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3324      	adds	r3, #36	; 0x24
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fdce 	bl	80050fc <xTaskRemoveFromEventList>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004566:	f000 fea5 	bl	80052b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	3b01      	subs	r3, #1
 800456e:	b2db      	uxtb	r3, r3
 8004570:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004576:	2b00      	cmp	r3, #0
 8004578:	dce9      	bgt.n	800454e <prvUnlockQueue+0x16>
 800457a:	e000      	b.n	800457e <prvUnlockQueue+0x46>
					break;
 800457c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	22ff      	movs	r2, #255	; 0xff
 8004582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004586:	f001 fe05 	bl	8006194 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800458a:	f001 fdd3 	bl	8006134 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004594:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004596:	e011      	b.n	80045bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d012      	beq.n	80045c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3310      	adds	r3, #16
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fda9 	bl	80050fc <xTaskRemoveFromEventList>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80045b0:	f000 fe80 	bl	80052b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80045b4:	7bbb      	ldrb	r3, [r7, #14]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	dce9      	bgt.n	8004598 <prvUnlockQueue+0x60>
 80045c4:	e000      	b.n	80045c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	22ff      	movs	r2, #255	; 0xff
 80045cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80045d0:	f001 fde0 	bl	8006194 <vPortExitCritical>
}
 80045d4:	bf00      	nop
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045e4:	f001 fda6 	bl	8006134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d102      	bne.n	80045f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80045f0:	2301      	movs	r3, #1
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	e001      	b.n	80045fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045fa:	f001 fdcb 	bl	8006194 <vPortExitCritical>

	return xReturn;
 80045fe:	68fb      	ldr	r3, [r7, #12]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004610:	f001 fd90 	bl	8006134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461c:	429a      	cmp	r2, r3
 800461e:	d102      	bne.n	8004626 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004620:	2301      	movs	r3, #1
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	e001      	b.n	800462a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800462a:	f001 fdb3 	bl	8006194 <vPortExitCritical>

	return xReturn;
 800462e:	68fb      	ldr	r3, [r7, #12]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004642:	2300      	movs	r3, #0
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	e014      	b.n	8004672 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004648:	4a0f      	ldr	r2, [pc, #60]	; (8004688 <vQueueAddToRegistry+0x50>)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10b      	bne.n	800466c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004654:	490c      	ldr	r1, [pc, #48]	; (8004688 <vQueueAddToRegistry+0x50>)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800465e:	4a0a      	ldr	r2, [pc, #40]	; (8004688 <vQueueAddToRegistry+0x50>)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4413      	add	r3, r2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800466a:	e006      	b.n	800467a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3301      	adds	r3, #1
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b07      	cmp	r3, #7
 8004676:	d9e7      	bls.n	8004648 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20000930 	.word	0x20000930

0800468c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800469c:	f001 fd4a 	bl	8006134 <vPortEnterCritical>
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046a6:	b25b      	sxtb	r3, r3
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ac:	d103      	bne.n	80046b6 <vQueueWaitForMessageRestricted+0x2a>
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046bc:	b25b      	sxtb	r3, r3
 80046be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c2:	d103      	bne.n	80046cc <vQueueWaitForMessageRestricted+0x40>
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046cc:	f001 fd62 	bl	8006194 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d106      	bne.n	80046e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	3324      	adds	r3, #36	; 0x24
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fcdf 	bl	80050a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80046e6:	6978      	ldr	r0, [r7, #20]
 80046e8:	f7ff ff26 	bl	8004538 <prvUnlockQueue>
	}
 80046ec:	bf00      	nop
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08e      	sub	sp, #56	; 0x38
 80046f8:	af04      	add	r7, sp, #16
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
 8004700:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10a      	bne.n	800471e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	623b      	str	r3, [r7, #32]
}
 800471a:	bf00      	nop
 800471c:	e7fe      	b.n	800471c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800471e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10a      	bne.n	800473a <xTaskCreateStatic+0x46>
	__asm volatile
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	61fb      	str	r3, [r7, #28]
}
 8004736:	bf00      	nop
 8004738:	e7fe      	b.n	8004738 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800473a:	23bc      	movs	r3, #188	; 0xbc
 800473c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	2bbc      	cmp	r3, #188	; 0xbc
 8004742:	d00a      	beq.n	800475a <xTaskCreateStatic+0x66>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	61bb      	str	r3, [r7, #24]
}
 8004756:	bf00      	nop
 8004758:	e7fe      	b.n	8004758 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800475a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800475c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475e:	2b00      	cmp	r3, #0
 8004760:	d01e      	beq.n	80047a0 <xTaskCreateStatic+0xac>
 8004762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004764:	2b00      	cmp	r3, #0
 8004766:	d01b      	beq.n	80047a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004770:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	2202      	movs	r2, #2
 8004776:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800477a:	2300      	movs	r3, #0
 800477c:	9303      	str	r3, [sp, #12]
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	9302      	str	r3, [sp, #8]
 8004782:	f107 0314 	add.w	r3, r7, #20
 8004786:	9301      	str	r3, [sp, #4]
 8004788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	68b9      	ldr	r1, [r7, #8]
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 f850 	bl	8004838 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800479a:	f000 f8f3 	bl	8004984 <prvAddNewTaskToReadyList>
 800479e:	e001      	b.n	80047a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80047a4:	697b      	ldr	r3, [r7, #20]
	}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3728      	adds	r7, #40	; 0x28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b08c      	sub	sp, #48	; 0x30
 80047b2:	af04      	add	r7, sp, #16
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	603b      	str	r3, [r7, #0]
 80047ba:	4613      	mov	r3, r2
 80047bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f001 fdd8 	bl	8006378 <pvPortMalloc>
 80047c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00e      	beq.n	80047ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047d0:	20bc      	movs	r0, #188	; 0xbc
 80047d2:	f001 fdd1 	bl	8006378 <pvPortMalloc>
 80047d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30
 80047e4:	e005      	b.n	80047f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047e6:	6978      	ldr	r0, [r7, #20]
 80047e8:	f001 fe92 	bl	8006510 <vPortFree>
 80047ec:	e001      	b.n	80047f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d017      	beq.n	8004828 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004800:	88fa      	ldrh	r2, [r7, #6]
 8004802:	2300      	movs	r3, #0
 8004804:	9303      	str	r3, [sp, #12]
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	9302      	str	r3, [sp, #8]
 800480a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480c:	9301      	str	r3, [sp, #4]
 800480e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 f80e 	bl	8004838 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800481c:	69f8      	ldr	r0, [r7, #28]
 800481e:	f000 f8b1 	bl	8004984 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004822:	2301      	movs	r3, #1
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	e002      	b.n	800482e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004828:	f04f 33ff 	mov.w	r3, #4294967295
 800482c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800482e:	69bb      	ldr	r3, [r7, #24]
	}
 8004830:	4618      	mov	r0, r3
 8004832:	3720      	adds	r7, #32
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004848:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	461a      	mov	r2, r3
 8004850:	21a5      	movs	r1, #165	; 0xa5
 8004852:	f001 ffaf 	bl	80067b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004860:	3b01      	subs	r3, #1
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	f023 0307 	bic.w	r3, r3, #7
 800486e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <prvInitialiseNewTask+0x58>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	617b      	str	r3, [r7, #20]
}
 800488c:	bf00      	nop
 800488e:	e7fe      	b.n	800488e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d01f      	beq.n	80048d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004896:	2300      	movs	r3, #0
 8004898:	61fb      	str	r3, [r7, #28]
 800489a:	e012      	b.n	80048c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	4413      	add	r3, r2
 80048a2:	7819      	ldrb	r1, [r3, #0]
 80048a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	4413      	add	r3, r2
 80048aa:	3334      	adds	r3, #52	; 0x34
 80048ac:	460a      	mov	r2, r1
 80048ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	4413      	add	r3, r2
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d006      	beq.n	80048ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	3301      	adds	r3, #1
 80048c0:	61fb      	str	r3, [r7, #28]
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	2b0f      	cmp	r3, #15
 80048c6:	d9e9      	bls.n	800489c <prvInitialiseNewTask+0x64>
 80048c8:	e000      	b.n	80048cc <prvInitialiseNewTask+0x94>
			{
				break;
 80048ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048d4:	e003      	b.n	80048de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e0:	2b37      	cmp	r3, #55	; 0x37
 80048e2:	d901      	bls.n	80048e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048e4:	2337      	movs	r3, #55	; 0x37
 80048e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80048f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f6:	2200      	movs	r2, #0
 80048f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fc:	3304      	adds	r3, #4
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fe ffe8 	bl	80038d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	3318      	adds	r3, #24
 8004908:	4618      	mov	r0, r3
 800490a:	f7fe ffe3 	bl	80038d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004912:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004916:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004922:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	2200      	movs	r2, #0
 8004928:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492e:	2200      	movs	r2, #0
 8004930:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004936:	3354      	adds	r3, #84	; 0x54
 8004938:	2260      	movs	r2, #96	; 0x60
 800493a:	2100      	movs	r1, #0
 800493c:	4618      	mov	r0, r3
 800493e:	f001 ff39 	bl	80067b4 <memset>
 8004942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004944:	4a0c      	ldr	r2, [pc, #48]	; (8004978 <prvInitialiseNewTask+0x140>)
 8004946:	659a      	str	r2, [r3, #88]	; 0x58
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	4a0c      	ldr	r2, [pc, #48]	; (800497c <prvInitialiseNewTask+0x144>)
 800494c:	65da      	str	r2, [r3, #92]	; 0x5c
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	4a0b      	ldr	r2, [pc, #44]	; (8004980 <prvInitialiseNewTask+0x148>)
 8004952:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	68f9      	ldr	r1, [r7, #12]
 8004958:	69b8      	ldr	r0, [r7, #24]
 800495a:	f001 fabd 	bl	8005ed8 <pxPortInitialiseStack>
 800495e:	4602      	mov	r2, r0
 8004960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004962:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800496a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800496e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004970:	bf00      	nop
 8004972:	3720      	adds	r7, #32
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	08006a90 	.word	0x08006a90
 800497c:	08006ab0 	.word	0x08006ab0
 8004980:	08006a70 	.word	0x08006a70

08004984 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800498c:	f001 fbd2 	bl	8006134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004990:	4b2d      	ldr	r3, [pc, #180]	; (8004a48 <prvAddNewTaskToReadyList+0xc4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3301      	adds	r3, #1
 8004996:	4a2c      	ldr	r2, [pc, #176]	; (8004a48 <prvAddNewTaskToReadyList+0xc4>)
 8004998:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800499a:	4b2c      	ldr	r3, [pc, #176]	; (8004a4c <prvAddNewTaskToReadyList+0xc8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80049a2:	4a2a      	ldr	r2, [pc, #168]	; (8004a4c <prvAddNewTaskToReadyList+0xc8>)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80049a8:	4b27      	ldr	r3, [pc, #156]	; (8004a48 <prvAddNewTaskToReadyList+0xc4>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d110      	bne.n	80049d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80049b0:	f000 fca4 	bl	80052fc <prvInitialiseTaskLists>
 80049b4:	e00d      	b.n	80049d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049b6:	4b26      	ldr	r3, [pc, #152]	; (8004a50 <prvAddNewTaskToReadyList+0xcc>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d109      	bne.n	80049d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049be:	4b23      	ldr	r3, [pc, #140]	; (8004a4c <prvAddNewTaskToReadyList+0xc8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d802      	bhi.n	80049d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049cc:	4a1f      	ldr	r2, [pc, #124]	; (8004a4c <prvAddNewTaskToReadyList+0xc8>)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049d2:	4b20      	ldr	r3, [pc, #128]	; (8004a54 <prvAddNewTaskToReadyList+0xd0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3301      	adds	r3, #1
 80049d8:	4a1e      	ldr	r2, [pc, #120]	; (8004a54 <prvAddNewTaskToReadyList+0xd0>)
 80049da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049dc:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <prvAddNewTaskToReadyList+0xd0>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e8:	4b1b      	ldr	r3, [pc, #108]	; (8004a58 <prvAddNewTaskToReadyList+0xd4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d903      	bls.n	80049f8 <prvAddNewTaskToReadyList+0x74>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	4a18      	ldr	r2, [pc, #96]	; (8004a58 <prvAddNewTaskToReadyList+0xd4>)
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4a15      	ldr	r2, [pc, #84]	; (8004a5c <prvAddNewTaskToReadyList+0xd8>)
 8004a06:	441a      	add	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4610      	mov	r0, r2
 8004a10:	f7fe ff6d 	bl	80038ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a14:	f001 fbbe 	bl	8006194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a18:	4b0d      	ldr	r3, [pc, #52]	; (8004a50 <prvAddNewTaskToReadyList+0xcc>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00e      	beq.n	8004a3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a20:	4b0a      	ldr	r3, [pc, #40]	; (8004a4c <prvAddNewTaskToReadyList+0xc8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d207      	bcs.n	8004a3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a2e:	4b0c      	ldr	r3, [pc, #48]	; (8004a60 <prvAddNewTaskToReadyList+0xdc>)
 8004a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20000e44 	.word	0x20000e44
 8004a4c:	20000970 	.word	0x20000970
 8004a50:	20000e50 	.word	0x20000e50
 8004a54:	20000e60 	.word	0x20000e60
 8004a58:	20000e4c 	.word	0x20000e4c
 8004a5c:	20000974 	.word	0x20000974
 8004a60:	e000ed04 	.word	0xe000ed04

08004a64 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08a      	sub	sp, #40	; 0x28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10a      	bne.n	8004a8e <vTaskDelayUntil+0x2a>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	617b      	str	r3, [r7, #20]
}
 8004a8a:	bf00      	nop
 8004a8c:	e7fe      	b.n	8004a8c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10a      	bne.n	8004aaa <vTaskDelayUntil+0x46>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	613b      	str	r3, [r7, #16]
}
 8004aa6:	bf00      	nop
 8004aa8:	e7fe      	b.n	8004aa8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8004aaa:	4b2a      	ldr	r3, [pc, #168]	; (8004b54 <vTaskDelayUntil+0xf0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <vTaskDelayUntil+0x64>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	60fb      	str	r3, [r7, #12]
}
 8004ac4:	bf00      	nop
 8004ac6:	e7fe      	b.n	8004ac6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004ac8:	f000 f8ee 	bl	8004ca8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004acc:	4b22      	ldr	r3, [pc, #136]	; (8004b58 <vTaskDelayUntil+0xf4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	4413      	add	r3, r2
 8004ada:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6a3a      	ldr	r2, [r7, #32]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d20b      	bcs.n	8004afe <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d211      	bcs.n	8004b14 <vTaskDelayUntil+0xb0>
 8004af0:	69fa      	ldr	r2, [r7, #28]
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d90d      	bls.n	8004b14 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004af8:	2301      	movs	r3, #1
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
 8004afc:	e00a      	b.n	8004b14 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69fa      	ldr	r2, [r7, #28]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d303      	bcc.n	8004b10 <vTaskDelayUntil+0xac>
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d901      	bls.n	8004b14 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004b10:	2301      	movs	r3, #1
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	69fa      	ldr	r2, [r7, #28]
 8004b18:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d006      	beq.n	8004b2e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004b20:	69fa      	ldr	r2, [r7, #28]
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2100      	movs	r1, #0
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fe33 	bl	8005794 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004b2e:	f000 f8c9 	bl	8004cc4 <xTaskResumeAll>
 8004b32:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d107      	bne.n	8004b4a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8004b3a:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <vTaskDelayUntil+0xf8>)
 8004b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b4a:	bf00      	nop
 8004b4c:	3728      	adds	r7, #40	; 0x28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20000e6c 	.word	0x20000e6c
 8004b58:	20000e48 	.word	0x20000e48
 8004b5c:	e000ed04 	.word	0xe000ed04

08004b60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d017      	beq.n	8004ba2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b72:	4b13      	ldr	r3, [pc, #76]	; (8004bc0 <vTaskDelay+0x60>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <vTaskDelay+0x30>
	__asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	60bb      	str	r3, [r7, #8]
}
 8004b8c:	bf00      	nop
 8004b8e:	e7fe      	b.n	8004b8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b90:	f000 f88a 	bl	8004ca8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b94:	2100      	movs	r1, #0
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fdfc 	bl	8005794 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b9c:	f000 f892 	bl	8004cc4 <xTaskResumeAll>
 8004ba0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d107      	bne.n	8004bb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004ba8:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <vTaskDelay+0x64>)
 8004baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004bb8:	bf00      	nop
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20000e6c 	.word	0x20000e6c
 8004bc4:	e000ed04 	.word	0xe000ed04

08004bc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08a      	sub	sp, #40	; 0x28
 8004bcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004bd6:	463a      	mov	r2, r7
 8004bd8:	1d39      	adds	r1, r7, #4
 8004bda:	f107 0308 	add.w	r3, r7, #8
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fe fe24 	bl	800382c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004be4:	6839      	ldr	r1, [r7, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	9202      	str	r2, [sp, #8]
 8004bec:	9301      	str	r3, [sp, #4]
 8004bee:	2300      	movs	r3, #0
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	460a      	mov	r2, r1
 8004bf6:	4924      	ldr	r1, [pc, #144]	; (8004c88 <vTaskStartScheduler+0xc0>)
 8004bf8:	4824      	ldr	r0, [pc, #144]	; (8004c8c <vTaskStartScheduler+0xc4>)
 8004bfa:	f7ff fd7b 	bl	80046f4 <xTaskCreateStatic>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	4a23      	ldr	r2, [pc, #140]	; (8004c90 <vTaskStartScheduler+0xc8>)
 8004c02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c04:	4b22      	ldr	r3, [pc, #136]	; (8004c90 <vTaskStartScheduler+0xc8>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	e001      	b.n	8004c16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d102      	bne.n	8004c22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004c1c:	f000 fe0e 	bl	800583c <xTimerCreateTimerTask>
 8004c20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d11b      	bne.n	8004c60 <vTaskStartScheduler+0x98>
	__asm volatile
 8004c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2c:	f383 8811 	msr	BASEPRI, r3
 8004c30:	f3bf 8f6f 	isb	sy
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	613b      	str	r3, [r7, #16]
}
 8004c3a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c3c:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <vTaskStartScheduler+0xcc>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3354      	adds	r3, #84	; 0x54
 8004c42:	4a15      	ldr	r2, [pc, #84]	; (8004c98 <vTaskStartScheduler+0xd0>)
 8004c44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c46:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <vTaskStartScheduler+0xd4>)
 8004c48:	f04f 32ff 	mov.w	r2, #4294967295
 8004c4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c4e:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <vTaskStartScheduler+0xd8>)
 8004c50:	2201      	movs	r2, #1
 8004c52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c54:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <vTaskStartScheduler+0xdc>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c5a:	f001 f9c9 	bl	8005ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c5e:	e00e      	b.n	8004c7e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c66:	d10a      	bne.n	8004c7e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	60fb      	str	r3, [r7, #12]
}
 8004c7a:	bf00      	nop
 8004c7c:	e7fe      	b.n	8004c7c <vTaskStartScheduler+0xb4>
}
 8004c7e:	bf00      	nop
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	08006a04 	.word	0x08006a04
 8004c8c:	080052cd 	.word	0x080052cd
 8004c90:	20000e68 	.word	0x20000e68
 8004c94:	20000970 	.word	0x20000970
 8004c98:	20000010 	.word	0x20000010
 8004c9c:	20000e64 	.word	0x20000e64
 8004ca0:	20000e50 	.word	0x20000e50
 8004ca4:	20000e48 	.word	0x20000e48

08004ca8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004cac:	4b04      	ldr	r3, [pc, #16]	; (8004cc0 <vTaskSuspendAll+0x18>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	4a03      	ldr	r2, [pc, #12]	; (8004cc0 <vTaskSuspendAll+0x18>)
 8004cb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004cb6:	bf00      	nop
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	20000e6c 	.word	0x20000e6c

08004cc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cd2:	4b42      	ldr	r3, [pc, #264]	; (8004ddc <xTaskResumeAll+0x118>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10a      	bne.n	8004cf0 <xTaskResumeAll+0x2c>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	603b      	str	r3, [r7, #0]
}
 8004cec:	bf00      	nop
 8004cee:	e7fe      	b.n	8004cee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004cf0:	f001 fa20 	bl	8006134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cf4:	4b39      	ldr	r3, [pc, #228]	; (8004ddc <xTaskResumeAll+0x118>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	4a38      	ldr	r2, [pc, #224]	; (8004ddc <xTaskResumeAll+0x118>)
 8004cfc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cfe:	4b37      	ldr	r3, [pc, #220]	; (8004ddc <xTaskResumeAll+0x118>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d162      	bne.n	8004dcc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d06:	4b36      	ldr	r3, [pc, #216]	; (8004de0 <xTaskResumeAll+0x11c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d05e      	beq.n	8004dcc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d0e:	e02f      	b.n	8004d70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d10:	4b34      	ldr	r3, [pc, #208]	; (8004de4 <xTaskResumeAll+0x120>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3318      	adds	r3, #24
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fe fe43 	bl	80039a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3304      	adds	r3, #4
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fe fe3e 	bl	80039a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d30:	4b2d      	ldr	r3, [pc, #180]	; (8004de8 <xTaskResumeAll+0x124>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d903      	bls.n	8004d40 <xTaskResumeAll+0x7c>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	4a2a      	ldr	r2, [pc, #168]	; (8004de8 <xTaskResumeAll+0x124>)
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4a27      	ldr	r2, [pc, #156]	; (8004dec <xTaskResumeAll+0x128>)
 8004d4e:	441a      	add	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	3304      	adds	r3, #4
 8004d54:	4619      	mov	r1, r3
 8004d56:	4610      	mov	r0, r2
 8004d58:	f7fe fdc9 	bl	80038ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d60:	4b23      	ldr	r3, [pc, #140]	; (8004df0 <xTaskResumeAll+0x12c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d302      	bcc.n	8004d70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004d6a:	4b22      	ldr	r3, [pc, #136]	; (8004df4 <xTaskResumeAll+0x130>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d70:	4b1c      	ldr	r3, [pc, #112]	; (8004de4 <xTaskResumeAll+0x120>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1cb      	bne.n	8004d10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d7e:	f000 fb5f 	bl	8005440 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d82:	4b1d      	ldr	r3, [pc, #116]	; (8004df8 <xTaskResumeAll+0x134>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d010      	beq.n	8004db0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d8e:	f000 f847 	bl	8004e20 <xTaskIncrementTick>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004d98:	4b16      	ldr	r3, [pc, #88]	; (8004df4 <xTaskResumeAll+0x130>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1f1      	bne.n	8004d8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004daa:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <xTaskResumeAll+0x134>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004db0:	4b10      	ldr	r3, [pc, #64]	; (8004df4 <xTaskResumeAll+0x130>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d009      	beq.n	8004dcc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004db8:	2301      	movs	r3, #1
 8004dba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004dbc:	4b0f      	ldr	r3, [pc, #60]	; (8004dfc <xTaskResumeAll+0x138>)
 8004dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dcc:	f001 f9e2 	bl	8006194 <vPortExitCritical>

	return xAlreadyYielded;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20000e6c 	.word	0x20000e6c
 8004de0:	20000e44 	.word	0x20000e44
 8004de4:	20000e04 	.word	0x20000e04
 8004de8:	20000e4c 	.word	0x20000e4c
 8004dec:	20000974 	.word	0x20000974
 8004df0:	20000970 	.word	0x20000970
 8004df4:	20000e58 	.word	0x20000e58
 8004df8:	20000e54 	.word	0x20000e54
 8004dfc:	e000ed04 	.word	0xe000ed04

08004e00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e06:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <xTaskGetTickCount+0x1c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e0c:	687b      	ldr	r3, [r7, #4]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20000e48 	.word	0x20000e48

08004e20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e2a:	4b4f      	ldr	r3, [pc, #316]	; (8004f68 <xTaskIncrementTick+0x148>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f040 808f 	bne.w	8004f52 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e34:	4b4d      	ldr	r3, [pc, #308]	; (8004f6c <xTaskIncrementTick+0x14c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e3c:	4a4b      	ldr	r2, [pc, #300]	; (8004f6c <xTaskIncrementTick+0x14c>)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d120      	bne.n	8004e8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e48:	4b49      	ldr	r3, [pc, #292]	; (8004f70 <xTaskIncrementTick+0x150>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <xTaskIncrementTick+0x48>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	603b      	str	r3, [r7, #0]
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <xTaskIncrementTick+0x46>
 8004e68:	4b41      	ldr	r3, [pc, #260]	; (8004f70 <xTaskIncrementTick+0x150>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	4b41      	ldr	r3, [pc, #260]	; (8004f74 <xTaskIncrementTick+0x154>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a3f      	ldr	r2, [pc, #252]	; (8004f70 <xTaskIncrementTick+0x150>)
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	4a3f      	ldr	r2, [pc, #252]	; (8004f74 <xTaskIncrementTick+0x154>)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6013      	str	r3, [r2, #0]
 8004e7c:	4b3e      	ldr	r3, [pc, #248]	; (8004f78 <xTaskIncrementTick+0x158>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3301      	adds	r3, #1
 8004e82:	4a3d      	ldr	r2, [pc, #244]	; (8004f78 <xTaskIncrementTick+0x158>)
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	f000 fadb 	bl	8005440 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e8a:	4b3c      	ldr	r3, [pc, #240]	; (8004f7c <xTaskIncrementTick+0x15c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d349      	bcc.n	8004f28 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e94:	4b36      	ldr	r3, [pc, #216]	; (8004f70 <xTaskIncrementTick+0x150>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d104      	bne.n	8004ea8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e9e:	4b37      	ldr	r3, [pc, #220]	; (8004f7c <xTaskIncrementTick+0x15c>)
 8004ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea4:	601a      	str	r2, [r3, #0]
					break;
 8004ea6:	e03f      	b.n	8004f28 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ea8:	4b31      	ldr	r3, [pc, #196]	; (8004f70 <xTaskIncrementTick+0x150>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d203      	bcs.n	8004ec8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ec0:	4a2e      	ldr	r2, [pc, #184]	; (8004f7c <xTaskIncrementTick+0x15c>)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ec6:	e02f      	b.n	8004f28 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fe fd6b 	bl	80039a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d004      	beq.n	8004ee4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	3318      	adds	r3, #24
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fe fd62 	bl	80039a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee8:	4b25      	ldr	r3, [pc, #148]	; (8004f80 <xTaskIncrementTick+0x160>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d903      	bls.n	8004ef8 <xTaskIncrementTick+0xd8>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	4a22      	ldr	r2, [pc, #136]	; (8004f80 <xTaskIncrementTick+0x160>)
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4a1f      	ldr	r2, [pc, #124]	; (8004f84 <xTaskIncrementTick+0x164>)
 8004f06:	441a      	add	r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4610      	mov	r0, r2
 8004f10:	f7fe fced 	bl	80038ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f18:	4b1b      	ldr	r3, [pc, #108]	; (8004f88 <xTaskIncrementTick+0x168>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d3b8      	bcc.n	8004e94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f22:	2301      	movs	r3, #1
 8004f24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f26:	e7b5      	b.n	8004e94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f28:	4b17      	ldr	r3, [pc, #92]	; (8004f88 <xTaskIncrementTick+0x168>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2e:	4915      	ldr	r1, [pc, #84]	; (8004f84 <xTaskIncrementTick+0x164>)
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	440b      	add	r3, r1
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d901      	bls.n	8004f44 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004f40:	2301      	movs	r3, #1
 8004f42:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f44:	4b11      	ldr	r3, [pc, #68]	; (8004f8c <xTaskIncrementTick+0x16c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d007      	beq.n	8004f5c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	e004      	b.n	8004f5c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f52:	4b0f      	ldr	r3, [pc, #60]	; (8004f90 <xTaskIncrementTick+0x170>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3301      	adds	r3, #1
 8004f58:	4a0d      	ldr	r2, [pc, #52]	; (8004f90 <xTaskIncrementTick+0x170>)
 8004f5a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f5c:	697b      	ldr	r3, [r7, #20]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20000e6c 	.word	0x20000e6c
 8004f6c:	20000e48 	.word	0x20000e48
 8004f70:	20000dfc 	.word	0x20000dfc
 8004f74:	20000e00 	.word	0x20000e00
 8004f78:	20000e5c 	.word	0x20000e5c
 8004f7c:	20000e64 	.word	0x20000e64
 8004f80:	20000e4c 	.word	0x20000e4c
 8004f84:	20000974 	.word	0x20000974
 8004f88:	20000970 	.word	0x20000970
 8004f8c:	20000e58 	.word	0x20000e58
 8004f90:	20000e54 	.word	0x20000e54

08004f94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f9a:	4b2a      	ldr	r3, [pc, #168]	; (8005044 <vTaskSwitchContext+0xb0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004fa2:	4b29      	ldr	r3, [pc, #164]	; (8005048 <vTaskSwitchContext+0xb4>)
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004fa8:	e046      	b.n	8005038 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004faa:	4b27      	ldr	r3, [pc, #156]	; (8005048 <vTaskSwitchContext+0xb4>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fb0:	4b26      	ldr	r3, [pc, #152]	; (800504c <vTaskSwitchContext+0xb8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	e010      	b.n	8004fda <vTaskSwitchContext+0x46>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10a      	bne.n	8004fd4 <vTaskSwitchContext+0x40>
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	607b      	str	r3, [r7, #4]
}
 8004fd0:	bf00      	nop
 8004fd2:	e7fe      	b.n	8004fd2 <vTaskSwitchContext+0x3e>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	491d      	ldr	r1, [pc, #116]	; (8005050 <vTaskSwitchContext+0xbc>)
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0e4      	beq.n	8004fb8 <vTaskSwitchContext+0x24>
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4a15      	ldr	r2, [pc, #84]	; (8005050 <vTaskSwitchContext+0xbc>)
 8004ffa:	4413      	add	r3, r2
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	605a      	str	r2, [r3, #4]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	3308      	adds	r3, #8
 8005010:	429a      	cmp	r2, r3
 8005012:	d104      	bne.n	800501e <vTaskSwitchContext+0x8a>
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	605a      	str	r2, [r3, #4]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4a0b      	ldr	r2, [pc, #44]	; (8005054 <vTaskSwitchContext+0xc0>)
 8005026:	6013      	str	r3, [r2, #0]
 8005028:	4a08      	ldr	r2, [pc, #32]	; (800504c <vTaskSwitchContext+0xb8>)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800502e:	4b09      	ldr	r3, [pc, #36]	; (8005054 <vTaskSwitchContext+0xc0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3354      	adds	r3, #84	; 0x54
 8005034:	4a08      	ldr	r2, [pc, #32]	; (8005058 <vTaskSwitchContext+0xc4>)
 8005036:	6013      	str	r3, [r2, #0]
}
 8005038:	bf00      	nop
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	20000e6c 	.word	0x20000e6c
 8005048:	20000e58 	.word	0x20000e58
 800504c:	20000e4c 	.word	0x20000e4c
 8005050:	20000974 	.word	0x20000974
 8005054:	20000970 	.word	0x20000970
 8005058:	20000010 	.word	0x20000010

0800505c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10a      	bne.n	8005082 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	60fb      	str	r3, [r7, #12]
}
 800507e:	bf00      	nop
 8005080:	e7fe      	b.n	8005080 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005082:	4b07      	ldr	r3, [pc, #28]	; (80050a0 <vTaskPlaceOnEventList+0x44>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3318      	adds	r3, #24
 8005088:	4619      	mov	r1, r3
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fe fc53 	bl	8003936 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005090:	2101      	movs	r1, #1
 8005092:	6838      	ldr	r0, [r7, #0]
 8005094:	f000 fb7e 	bl	8005794 <prvAddCurrentTaskToDelayedList>
}
 8005098:	bf00      	nop
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20000970 	.word	0x20000970

080050a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10a      	bne.n	80050cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	617b      	str	r3, [r7, #20]
}
 80050c8:	bf00      	nop
 80050ca:	e7fe      	b.n	80050ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050cc:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3318      	adds	r3, #24
 80050d2:	4619      	mov	r1, r3
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f7fe fc0a 	bl	80038ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80050e0:	f04f 33ff 	mov.w	r3, #4294967295
 80050e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	68b8      	ldr	r0, [r7, #8]
 80050ea:	f000 fb53 	bl	8005794 <prvAddCurrentTaskToDelayedList>
	}
 80050ee:	bf00      	nop
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20000970 	.word	0x20000970

080050fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10a      	bne.n	8005128 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	60fb      	str	r3, [r7, #12]
}
 8005124:	bf00      	nop
 8005126:	e7fe      	b.n	8005126 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	3318      	adds	r3, #24
 800512c:	4618      	mov	r0, r3
 800512e:	f7fe fc3b 	bl	80039a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005132:	4b1e      	ldr	r3, [pc, #120]	; (80051ac <xTaskRemoveFromEventList+0xb0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d11d      	bne.n	8005176 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	3304      	adds	r3, #4
 800513e:	4618      	mov	r0, r3
 8005140:	f7fe fc32 	bl	80039a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005148:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <xTaskRemoveFromEventList+0xb4>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d903      	bls.n	8005158 <xTaskRemoveFromEventList+0x5c>
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	4a16      	ldr	r2, [pc, #88]	; (80051b0 <xTaskRemoveFromEventList+0xb4>)
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515c:	4613      	mov	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4a13      	ldr	r2, [pc, #76]	; (80051b4 <xTaskRemoveFromEventList+0xb8>)
 8005166:	441a      	add	r2, r3
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	3304      	adds	r3, #4
 800516c:	4619      	mov	r1, r3
 800516e:	4610      	mov	r0, r2
 8005170:	f7fe fbbd 	bl	80038ee <vListInsertEnd>
 8005174:	e005      	b.n	8005182 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	3318      	adds	r3, #24
 800517a:	4619      	mov	r1, r3
 800517c:	480e      	ldr	r0, [pc, #56]	; (80051b8 <xTaskRemoveFromEventList+0xbc>)
 800517e:	f7fe fbb6 	bl	80038ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005186:	4b0d      	ldr	r3, [pc, #52]	; (80051bc <xTaskRemoveFromEventList+0xc0>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	429a      	cmp	r2, r3
 800518e:	d905      	bls.n	800519c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005190:	2301      	movs	r3, #1
 8005192:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005194:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <xTaskRemoveFromEventList+0xc4>)
 8005196:	2201      	movs	r2, #1
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	e001      	b.n	80051a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800519c:	2300      	movs	r3, #0
 800519e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80051a0:	697b      	ldr	r3, [r7, #20]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000e6c 	.word	0x20000e6c
 80051b0:	20000e4c 	.word	0x20000e4c
 80051b4:	20000974 	.word	0x20000974
 80051b8:	20000e04 	.word	0x20000e04
 80051bc:	20000970 	.word	0x20000970
 80051c0:	20000e58 	.word	0x20000e58

080051c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051cc:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <vTaskInternalSetTimeOutState+0x24>)
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051d4:	4b05      	ldr	r3, [pc, #20]	; (80051ec <vTaskInternalSetTimeOutState+0x28>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	605a      	str	r2, [r3, #4]
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	20000e5c 	.word	0x20000e5c
 80051ec:	20000e48 	.word	0x20000e48

080051f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b088      	sub	sp, #32
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10a      	bne.n	8005216 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	613b      	str	r3, [r7, #16]
}
 8005212:	bf00      	nop
 8005214:	e7fe      	b.n	8005214 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10a      	bne.n	8005232 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	60fb      	str	r3, [r7, #12]
}
 800522e:	bf00      	nop
 8005230:	e7fe      	b.n	8005230 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005232:	f000 ff7f 	bl	8006134 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005236:	4b1d      	ldr	r3, [pc, #116]	; (80052ac <xTaskCheckForTimeOut+0xbc>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524e:	d102      	bne.n	8005256 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005250:	2300      	movs	r3, #0
 8005252:	61fb      	str	r3, [r7, #28]
 8005254:	e023      	b.n	800529e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	4b15      	ldr	r3, [pc, #84]	; (80052b0 <xTaskCheckForTimeOut+0xc0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d007      	beq.n	8005272 <xTaskCheckForTimeOut+0x82>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	429a      	cmp	r2, r3
 800526a:	d302      	bcc.n	8005272 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800526c:	2301      	movs	r3, #1
 800526e:	61fb      	str	r3, [r7, #28]
 8005270:	e015      	b.n	800529e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	429a      	cmp	r2, r3
 800527a:	d20b      	bcs.n	8005294 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	1ad2      	subs	r2, r2, r3
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff ff9b 	bl	80051c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800528e:	2300      	movs	r3, #0
 8005290:	61fb      	str	r3, [r7, #28]
 8005292:	e004      	b.n	800529e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800529a:	2301      	movs	r3, #1
 800529c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800529e:	f000 ff79 	bl	8006194 <vPortExitCritical>

	return xReturn;
 80052a2:	69fb      	ldr	r3, [r7, #28]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3720      	adds	r7, #32
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20000e48 	.word	0x20000e48
 80052b0:	20000e5c 	.word	0x20000e5c

080052b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052b8:	4b03      	ldr	r3, [pc, #12]	; (80052c8 <vTaskMissedYield+0x14>)
 80052ba:	2201      	movs	r2, #1
 80052bc:	601a      	str	r2, [r3, #0]
}
 80052be:	bf00      	nop
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	20000e58 	.word	0x20000e58

080052cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052d4:	f000 f852 	bl	800537c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052d8:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <prvIdleTask+0x28>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d9f9      	bls.n	80052d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052e0:	4b05      	ldr	r3, [pc, #20]	; (80052f8 <prvIdleTask+0x2c>)
 80052e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052f0:	e7f0      	b.n	80052d4 <prvIdleTask+0x8>
 80052f2:	bf00      	nop
 80052f4:	20000974 	.word	0x20000974
 80052f8:	e000ed04 	.word	0xe000ed04

080052fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005302:	2300      	movs	r3, #0
 8005304:	607b      	str	r3, [r7, #4]
 8005306:	e00c      	b.n	8005322 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	4613      	mov	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4a12      	ldr	r2, [pc, #72]	; (800535c <prvInitialiseTaskLists+0x60>)
 8005314:	4413      	add	r3, r2
 8005316:	4618      	mov	r0, r3
 8005318:	f7fe fabc 	bl	8003894 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3301      	adds	r3, #1
 8005320:	607b      	str	r3, [r7, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b37      	cmp	r3, #55	; 0x37
 8005326:	d9ef      	bls.n	8005308 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005328:	480d      	ldr	r0, [pc, #52]	; (8005360 <prvInitialiseTaskLists+0x64>)
 800532a:	f7fe fab3 	bl	8003894 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800532e:	480d      	ldr	r0, [pc, #52]	; (8005364 <prvInitialiseTaskLists+0x68>)
 8005330:	f7fe fab0 	bl	8003894 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005334:	480c      	ldr	r0, [pc, #48]	; (8005368 <prvInitialiseTaskLists+0x6c>)
 8005336:	f7fe faad 	bl	8003894 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800533a:	480c      	ldr	r0, [pc, #48]	; (800536c <prvInitialiseTaskLists+0x70>)
 800533c:	f7fe faaa 	bl	8003894 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005340:	480b      	ldr	r0, [pc, #44]	; (8005370 <prvInitialiseTaskLists+0x74>)
 8005342:	f7fe faa7 	bl	8003894 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005346:	4b0b      	ldr	r3, [pc, #44]	; (8005374 <prvInitialiseTaskLists+0x78>)
 8005348:	4a05      	ldr	r2, [pc, #20]	; (8005360 <prvInitialiseTaskLists+0x64>)
 800534a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800534c:	4b0a      	ldr	r3, [pc, #40]	; (8005378 <prvInitialiseTaskLists+0x7c>)
 800534e:	4a05      	ldr	r2, [pc, #20]	; (8005364 <prvInitialiseTaskLists+0x68>)
 8005350:	601a      	str	r2, [r3, #0]
}
 8005352:	bf00      	nop
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	20000974 	.word	0x20000974
 8005360:	20000dd4 	.word	0x20000dd4
 8005364:	20000de8 	.word	0x20000de8
 8005368:	20000e04 	.word	0x20000e04
 800536c:	20000e18 	.word	0x20000e18
 8005370:	20000e30 	.word	0x20000e30
 8005374:	20000dfc 	.word	0x20000dfc
 8005378:	20000e00 	.word	0x20000e00

0800537c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005382:	e019      	b.n	80053b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005384:	f000 fed6 	bl	8006134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005388:	4b10      	ldr	r3, [pc, #64]	; (80053cc <prvCheckTasksWaitingTermination+0x50>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	3304      	adds	r3, #4
 8005394:	4618      	mov	r0, r3
 8005396:	f7fe fb07 	bl	80039a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800539a:	4b0d      	ldr	r3, [pc, #52]	; (80053d0 <prvCheckTasksWaitingTermination+0x54>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3b01      	subs	r3, #1
 80053a0:	4a0b      	ldr	r2, [pc, #44]	; (80053d0 <prvCheckTasksWaitingTermination+0x54>)
 80053a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80053a4:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <prvCheckTasksWaitingTermination+0x58>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3b01      	subs	r3, #1
 80053aa:	4a0a      	ldr	r2, [pc, #40]	; (80053d4 <prvCheckTasksWaitingTermination+0x58>)
 80053ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80053ae:	f000 fef1 	bl	8006194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f810 	bl	80053d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053b8:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <prvCheckTasksWaitingTermination+0x58>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e1      	bne.n	8005384 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20000e18 	.word	0x20000e18
 80053d0:	20000e44 	.word	0x20000e44
 80053d4:	20000e2c 	.word	0x20000e2c

080053d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3354      	adds	r3, #84	; 0x54
 80053e4:	4618      	mov	r0, r3
 80053e6:	f001 f9fb 	bl	80067e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d108      	bne.n	8005406 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f8:	4618      	mov	r0, r3
 80053fa:	f001 f889 	bl	8006510 <vPortFree>
				vPortFree( pxTCB );
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f001 f886 	bl	8006510 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005404:	e018      	b.n	8005438 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800540c:	2b01      	cmp	r3, #1
 800540e:	d103      	bne.n	8005418 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f001 f87d 	bl	8006510 <vPortFree>
	}
 8005416:	e00f      	b.n	8005438 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800541e:	2b02      	cmp	r3, #2
 8005420:	d00a      	beq.n	8005438 <prvDeleteTCB+0x60>
	__asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	60fb      	str	r3, [r7, #12]
}
 8005434:	bf00      	nop
 8005436:	e7fe      	b.n	8005436 <prvDeleteTCB+0x5e>
	}
 8005438:	bf00      	nop
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005446:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <prvResetNextTaskUnblockTime+0x38>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d104      	bne.n	800545a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005450:	4b0a      	ldr	r3, [pc, #40]	; (800547c <prvResetNextTaskUnblockTime+0x3c>)
 8005452:	f04f 32ff 	mov.w	r2, #4294967295
 8005456:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005458:	e008      	b.n	800546c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800545a:	4b07      	ldr	r3, [pc, #28]	; (8005478 <prvResetNextTaskUnblockTime+0x38>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	4a04      	ldr	r2, [pc, #16]	; (800547c <prvResetNextTaskUnblockTime+0x3c>)
 800546a:	6013      	str	r3, [r2, #0]
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	20000dfc 	.word	0x20000dfc
 800547c:	20000e64 	.word	0x20000e64

08005480 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005486:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <xTaskGetSchedulerState+0x34>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d102      	bne.n	8005494 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800548e:	2301      	movs	r3, #1
 8005490:	607b      	str	r3, [r7, #4]
 8005492:	e008      	b.n	80054a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005494:	4b08      	ldr	r3, [pc, #32]	; (80054b8 <xTaskGetSchedulerState+0x38>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d102      	bne.n	80054a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800549c:	2302      	movs	r3, #2
 800549e:	607b      	str	r3, [r7, #4]
 80054a0:	e001      	b.n	80054a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80054a2:	2300      	movs	r3, #0
 80054a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80054a6:	687b      	ldr	r3, [r7, #4]
	}
 80054a8:	4618      	mov	r0, r3
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	20000e50 	.word	0x20000e50
 80054b8:	20000e6c 	.word	0x20000e6c

080054bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80054c8:	2300      	movs	r3, #0
 80054ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d051      	beq.n	8005576 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d6:	4b2a      	ldr	r3, [pc, #168]	; (8005580 <xTaskPriorityInherit+0xc4>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	429a      	cmp	r2, r3
 80054de:	d241      	bcs.n	8005564 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	db06      	blt.n	80054f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054e8:	4b25      	ldr	r3, [pc, #148]	; (8005580 <xTaskPriorityInherit+0xc4>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	6959      	ldr	r1, [r3, #20]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fe:	4613      	mov	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4a1f      	ldr	r2, [pc, #124]	; (8005584 <xTaskPriorityInherit+0xc8>)
 8005508:	4413      	add	r3, r2
 800550a:	4299      	cmp	r1, r3
 800550c:	d122      	bne.n	8005554 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	3304      	adds	r3, #4
 8005512:	4618      	mov	r0, r3
 8005514:	f7fe fa48 	bl	80039a8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005518:	4b19      	ldr	r3, [pc, #100]	; (8005580 <xTaskPriorityInherit+0xc4>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005526:	4b18      	ldr	r3, [pc, #96]	; (8005588 <xTaskPriorityInherit+0xcc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d903      	bls.n	8005536 <xTaskPriorityInherit+0x7a>
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	4a15      	ldr	r2, [pc, #84]	; (8005588 <xTaskPriorityInherit+0xcc>)
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553a:	4613      	mov	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4a10      	ldr	r2, [pc, #64]	; (8005584 <xTaskPriorityInherit+0xc8>)
 8005544:	441a      	add	r2, r3
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	3304      	adds	r3, #4
 800554a:	4619      	mov	r1, r3
 800554c:	4610      	mov	r0, r2
 800554e:	f7fe f9ce 	bl	80038ee <vListInsertEnd>
 8005552:	e004      	b.n	800555e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005554:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <xTaskPriorityInherit+0xc4>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800555e:	2301      	movs	r3, #1
 8005560:	60fb      	str	r3, [r7, #12]
 8005562:	e008      	b.n	8005576 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <xTaskPriorityInherit+0xc4>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556e:	429a      	cmp	r2, r3
 8005570:	d201      	bcs.n	8005576 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005572:	2301      	movs	r3, #1
 8005574:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005576:	68fb      	ldr	r3, [r7, #12]
	}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20000970 	.word	0x20000970
 8005584:	20000974 	.word	0x20000974
 8005588:	20000e4c 	.word	0x20000e4c

0800558c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005598:	2300      	movs	r3, #0
 800559a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d056      	beq.n	8005650 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055a2:	4b2e      	ldr	r3, [pc, #184]	; (800565c <xTaskPriorityDisinherit+0xd0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d00a      	beq.n	80055c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	60fb      	str	r3, [r7, #12]
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10a      	bne.n	80055e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	60bb      	str	r3, [r7, #8]
}
 80055dc:	bf00      	nop
 80055de:	e7fe      	b.n	80055de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e4:	1e5a      	subs	r2, r3, #1
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d02c      	beq.n	8005650 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d128      	bne.n	8005650 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	3304      	adds	r3, #4
 8005602:	4618      	mov	r0, r3
 8005604:	f7fe f9d0 	bl	80039a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005620:	4b0f      	ldr	r3, [pc, #60]	; (8005660 <xTaskPriorityDisinherit+0xd4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	429a      	cmp	r2, r3
 8005626:	d903      	bls.n	8005630 <xTaskPriorityDisinherit+0xa4>
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	4a0c      	ldr	r2, [pc, #48]	; (8005660 <xTaskPriorityDisinherit+0xd4>)
 800562e:	6013      	str	r3, [r2, #0]
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005634:	4613      	mov	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4a09      	ldr	r2, [pc, #36]	; (8005664 <xTaskPriorityDisinherit+0xd8>)
 800563e:	441a      	add	r2, r3
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	3304      	adds	r3, #4
 8005644:	4619      	mov	r1, r3
 8005646:	4610      	mov	r0, r2
 8005648:	f7fe f951 	bl	80038ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800564c:	2301      	movs	r3, #1
 800564e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005650:	697b      	ldr	r3, [r7, #20]
	}
 8005652:	4618      	mov	r0, r3
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20000970 	.word	0x20000970
 8005660:	20000e4c 	.word	0x20000e4c
 8005664:	20000974 	.word	0x20000974

08005668 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005676:	2301      	movs	r3, #1
 8005678:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d06a      	beq.n	8005756 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10a      	bne.n	800569e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	60fb      	str	r3, [r7, #12]
}
 800569a:	bf00      	nop
 800569c:	e7fe      	b.n	800569c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d902      	bls.n	80056ae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	61fb      	str	r3, [r7, #28]
 80056ac:	e002      	b.n	80056b4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b8:	69fa      	ldr	r2, [r7, #28]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d04b      	beq.n	8005756 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d146      	bne.n	8005756 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80056c8:	4b25      	ldr	r3, [pc, #148]	; (8005760 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d10a      	bne.n	80056e8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	60bb      	str	r3, [r7, #8]
}
 80056e4:	bf00      	nop
 80056e6:	e7fe      	b.n	80056e6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	db04      	blt.n	8005706 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	6959      	ldr	r1, [r3, #20]
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4a13      	ldr	r2, [pc, #76]	; (8005764 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005716:	4413      	add	r3, r2
 8005718:	4299      	cmp	r1, r3
 800571a:	d11c      	bne.n	8005756 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	3304      	adds	r3, #4
 8005720:	4618      	mov	r0, r3
 8005722:	f7fe f941 	bl	80039a8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572a:	4b0f      	ldr	r3, [pc, #60]	; (8005768 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	429a      	cmp	r2, r3
 8005730:	d903      	bls.n	800573a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005736:	4a0c      	ldr	r2, [pc, #48]	; (8005768 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573e:	4613      	mov	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4a07      	ldr	r2, [pc, #28]	; (8005764 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005748:	441a      	add	r2, r3
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	3304      	adds	r3, #4
 800574e:	4619      	mov	r1, r3
 8005750:	4610      	mov	r0, r2
 8005752:	f7fe f8cc 	bl	80038ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005756:	bf00      	nop
 8005758:	3720      	adds	r7, #32
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000970 	.word	0x20000970
 8005764:	20000974 	.word	0x20000974
 8005768:	20000e4c 	.word	0x20000e4c

0800576c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005770:	4b07      	ldr	r3, [pc, #28]	; (8005790 <pvTaskIncrementMutexHeldCount+0x24>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d004      	beq.n	8005782 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005778:	4b05      	ldr	r3, [pc, #20]	; (8005790 <pvTaskIncrementMutexHeldCount+0x24>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800577e:	3201      	adds	r2, #1
 8005780:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005782:	4b03      	ldr	r3, [pc, #12]	; (8005790 <pvTaskIncrementMutexHeldCount+0x24>)
 8005784:	681b      	ldr	r3, [r3, #0]
	}
 8005786:	4618      	mov	r0, r3
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	20000970 	.word	0x20000970

08005794 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800579e:	4b21      	ldr	r3, [pc, #132]	; (8005824 <prvAddCurrentTaskToDelayedList+0x90>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057a4:	4b20      	ldr	r3, [pc, #128]	; (8005828 <prvAddCurrentTaskToDelayedList+0x94>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3304      	adds	r3, #4
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fe f8fc 	bl	80039a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b6:	d10a      	bne.n	80057ce <prvAddCurrentTaskToDelayedList+0x3a>
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057be:	4b1a      	ldr	r3, [pc, #104]	; (8005828 <prvAddCurrentTaskToDelayedList+0x94>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3304      	adds	r3, #4
 80057c4:	4619      	mov	r1, r3
 80057c6:	4819      	ldr	r0, [pc, #100]	; (800582c <prvAddCurrentTaskToDelayedList+0x98>)
 80057c8:	f7fe f891 	bl	80038ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057cc:	e026      	b.n	800581c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4413      	add	r3, r2
 80057d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057d6:	4b14      	ldr	r3, [pc, #80]	; (8005828 <prvAddCurrentTaskToDelayedList+0x94>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d209      	bcs.n	80057fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057e6:	4b12      	ldr	r3, [pc, #72]	; (8005830 <prvAddCurrentTaskToDelayedList+0x9c>)
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	4b0f      	ldr	r3, [pc, #60]	; (8005828 <prvAddCurrentTaskToDelayedList+0x94>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3304      	adds	r3, #4
 80057f0:	4619      	mov	r1, r3
 80057f2:	4610      	mov	r0, r2
 80057f4:	f7fe f89f 	bl	8003936 <vListInsert>
}
 80057f8:	e010      	b.n	800581c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057fa:	4b0e      	ldr	r3, [pc, #56]	; (8005834 <prvAddCurrentTaskToDelayedList+0xa0>)
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <prvAddCurrentTaskToDelayedList+0x94>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3304      	adds	r3, #4
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f7fe f895 	bl	8003936 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800580c:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <prvAddCurrentTaskToDelayedList+0xa4>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	429a      	cmp	r2, r3
 8005814:	d202      	bcs.n	800581c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005816:	4a08      	ldr	r2, [pc, #32]	; (8005838 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	6013      	str	r3, [r2, #0]
}
 800581c:	bf00      	nop
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	20000e48 	.word	0x20000e48
 8005828:	20000970 	.word	0x20000970
 800582c:	20000e30 	.word	0x20000e30
 8005830:	20000e00 	.word	0x20000e00
 8005834:	20000dfc 	.word	0x20000dfc
 8005838:	20000e64 	.word	0x20000e64

0800583c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08a      	sub	sp, #40	; 0x28
 8005840:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005842:	2300      	movs	r3, #0
 8005844:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005846:	f000 fb07 	bl	8005e58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800584a:	4b1c      	ldr	r3, [pc, #112]	; (80058bc <xTimerCreateTimerTask+0x80>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d021      	beq.n	8005896 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005856:	2300      	movs	r3, #0
 8005858:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800585a:	1d3a      	adds	r2, r7, #4
 800585c:	f107 0108 	add.w	r1, r7, #8
 8005860:	f107 030c 	add.w	r3, r7, #12
 8005864:	4618      	mov	r0, r3
 8005866:	f7fd fffb 	bl	8003860 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	9202      	str	r2, [sp, #8]
 8005872:	9301      	str	r3, [sp, #4]
 8005874:	2302      	movs	r3, #2
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	2300      	movs	r3, #0
 800587a:	460a      	mov	r2, r1
 800587c:	4910      	ldr	r1, [pc, #64]	; (80058c0 <xTimerCreateTimerTask+0x84>)
 800587e:	4811      	ldr	r0, [pc, #68]	; (80058c4 <xTimerCreateTimerTask+0x88>)
 8005880:	f7fe ff38 	bl	80046f4 <xTaskCreateStatic>
 8005884:	4603      	mov	r3, r0
 8005886:	4a10      	ldr	r2, [pc, #64]	; (80058c8 <xTimerCreateTimerTask+0x8c>)
 8005888:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800588a:	4b0f      	ldr	r3, [pc, #60]	; (80058c8 <xTimerCreateTimerTask+0x8c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005892:	2301      	movs	r3, #1
 8005894:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10a      	bne.n	80058b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	613b      	str	r3, [r7, #16]
}
 80058ae:	bf00      	nop
 80058b0:	e7fe      	b.n	80058b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80058b2:	697b      	ldr	r3, [r7, #20]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	20000ea0 	.word	0x20000ea0
 80058c0:	08006a0c 	.word	0x08006a0c
 80058c4:	08005a01 	.word	0x08005a01
 80058c8:	20000ea4 	.word	0x20000ea4

080058cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08a      	sub	sp, #40	; 0x28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
 80058d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80058da:	2300      	movs	r3, #0
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10a      	bne.n	80058fa <xTimerGenericCommand+0x2e>
	__asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	623b      	str	r3, [r7, #32]
}
 80058f6:	bf00      	nop
 80058f8:	e7fe      	b.n	80058f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80058fa:	4b1a      	ldr	r3, [pc, #104]	; (8005964 <xTimerGenericCommand+0x98>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d02a      	beq.n	8005958 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2b05      	cmp	r3, #5
 8005912:	dc18      	bgt.n	8005946 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005914:	f7ff fdb4 	bl	8005480 <xTaskGetSchedulerState>
 8005918:	4603      	mov	r3, r0
 800591a:	2b02      	cmp	r3, #2
 800591c:	d109      	bne.n	8005932 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800591e:	4b11      	ldr	r3, [pc, #68]	; (8005964 <xTimerGenericCommand+0x98>)
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	f107 0110 	add.w	r1, r7, #16
 8005926:	2300      	movs	r3, #0
 8005928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800592a:	f7fe f9d7 	bl	8003cdc <xQueueGenericSend>
 800592e:	6278      	str	r0, [r7, #36]	; 0x24
 8005930:	e012      	b.n	8005958 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005932:	4b0c      	ldr	r3, [pc, #48]	; (8005964 <xTimerGenericCommand+0x98>)
 8005934:	6818      	ldr	r0, [r3, #0]
 8005936:	f107 0110 	add.w	r1, r7, #16
 800593a:	2300      	movs	r3, #0
 800593c:	2200      	movs	r2, #0
 800593e:	f7fe f9cd 	bl	8003cdc <xQueueGenericSend>
 8005942:	6278      	str	r0, [r7, #36]	; 0x24
 8005944:	e008      	b.n	8005958 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005946:	4b07      	ldr	r3, [pc, #28]	; (8005964 <xTimerGenericCommand+0x98>)
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	f107 0110 	add.w	r1, r7, #16
 800594e:	2300      	movs	r3, #0
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	f7fe fac1 	bl	8003ed8 <xQueueGenericSendFromISR>
 8005956:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800595a:	4618      	mov	r0, r3
 800595c:	3728      	adds	r7, #40	; 0x28
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	20000ea0 	.word	0x20000ea0

08005968 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b088      	sub	sp, #32
 800596c:	af02      	add	r7, sp, #8
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005972:	4b22      	ldr	r3, [pc, #136]	; (80059fc <prvProcessExpiredTimer+0x94>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	3304      	adds	r3, #4
 8005980:	4618      	mov	r0, r3
 8005982:	f7fe f811 	bl	80039a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d022      	beq.n	80059da <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	699a      	ldr	r2, [r3, #24]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	18d1      	adds	r1, r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	6978      	ldr	r0, [r7, #20]
 80059a2:	f000 f8d1 	bl	8005b48 <prvInsertTimerInActiveList>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01f      	beq.n	80059ec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059ac:	2300      	movs	r3, #0
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	2300      	movs	r3, #0
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	2100      	movs	r1, #0
 80059b6:	6978      	ldr	r0, [r7, #20]
 80059b8:	f7ff ff88 	bl	80058cc <xTimerGenericCommand>
 80059bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d113      	bne.n	80059ec <prvProcessExpiredTimer+0x84>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	60fb      	str	r3, [r7, #12]
}
 80059d6:	bf00      	nop
 80059d8:	e7fe      	b.n	80059d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059e0:	f023 0301 	bic.w	r3, r3, #1
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	6978      	ldr	r0, [r7, #20]
 80059f2:	4798      	blx	r3
}
 80059f4:	bf00      	nop
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	20000e98 	.word	0x20000e98

08005a00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a08:	f107 0308 	add.w	r3, r7, #8
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 f857 	bl	8005ac0 <prvGetNextExpireTime>
 8005a12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4619      	mov	r1, r3
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 f803 	bl	8005a24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005a1e:	f000 f8d5 	bl	8005bcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a22:	e7f1      	b.n	8005a08 <prvTimerTask+0x8>

08005a24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005a2e:	f7ff f93b 	bl	8004ca8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a32:	f107 0308 	add.w	r3, r7, #8
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 f866 	bl	8005b08 <prvSampleTimeNow>
 8005a3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d130      	bne.n	8005aa6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <prvProcessTimerOrBlockTask+0x3c>
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d806      	bhi.n	8005a60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a52:	f7ff f937 	bl	8004cc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a56:	68f9      	ldr	r1, [r7, #12]
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7ff ff85 	bl	8005968 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a5e:	e024      	b.n	8005aaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d008      	beq.n	8005a78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a66:	4b13      	ldr	r3, [pc, #76]	; (8005ab4 <prvProcessTimerOrBlockTask+0x90>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <prvProcessTimerOrBlockTask+0x50>
 8005a70:	2301      	movs	r3, #1
 8005a72:	e000      	b.n	8005a76 <prvProcessTimerOrBlockTask+0x52>
 8005a74:	2300      	movs	r3, #0
 8005a76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a78:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <prvProcessTimerOrBlockTask+0x94>)
 8005a7a:	6818      	ldr	r0, [r3, #0]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	4619      	mov	r1, r3
 8005a86:	f7fe fe01 	bl	800468c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a8a:	f7ff f91b 	bl	8004cc4 <xTaskResumeAll>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10a      	bne.n	8005aaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a94:	4b09      	ldr	r3, [pc, #36]	; (8005abc <prvProcessTimerOrBlockTask+0x98>)
 8005a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	f3bf 8f6f 	isb	sy
}
 8005aa4:	e001      	b.n	8005aaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005aa6:	f7ff f90d 	bl	8004cc4 <xTaskResumeAll>
}
 8005aaa:	bf00      	nop
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000e9c 	.word	0x20000e9c
 8005ab8:	20000ea0 	.word	0x20000ea0
 8005abc:	e000ed04 	.word	0xe000ed04

08005ac0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ac8:	4b0e      	ldr	r3, [pc, #56]	; (8005b04 <prvGetNextExpireTime+0x44>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <prvGetNextExpireTime+0x16>
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	e000      	b.n	8005ad8 <prvGetNextExpireTime+0x18>
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d105      	bne.n	8005af0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ae4:	4b07      	ldr	r3, [pc, #28]	; (8005b04 <prvGetNextExpireTime+0x44>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	e001      	b.n	8005af4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005af4:	68fb      	ldr	r3, [r7, #12]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	20000e98 	.word	0x20000e98

08005b08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005b10:	f7ff f976 	bl	8004e00 <xTaskGetTickCount>
 8005b14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005b16:	4b0b      	ldr	r3, [pc, #44]	; (8005b44 <prvSampleTimeNow+0x3c>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d205      	bcs.n	8005b2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005b20:	f000 f936 	bl	8005d90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	e002      	b.n	8005b32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005b32:	4a04      	ldr	r2, [pc, #16]	; (8005b44 <prvSampleTimeNow+0x3c>)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005b38:	68fb      	ldr	r3, [r7, #12]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20000ea8 	.word	0x20000ea8

08005b48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b56:	2300      	movs	r3, #0
 8005b58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d812      	bhi.n	8005b94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	1ad2      	subs	r2, r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d302      	bcc.n	8005b82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	e01b      	b.n	8005bba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b82:	4b10      	ldr	r3, [pc, #64]	; (8005bc4 <prvInsertTimerInActiveList+0x7c>)
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	f7fd fed2 	bl	8003936 <vListInsert>
 8005b92:	e012      	b.n	8005bba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d206      	bcs.n	8005baa <prvInsertTimerInActiveList+0x62>
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d302      	bcc.n	8005baa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	e007      	b.n	8005bba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005baa:	4b07      	ldr	r3, [pc, #28]	; (8005bc8 <prvInsertTimerInActiveList+0x80>)
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	f7fd febe 	bl	8003936 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005bba:	697b      	ldr	r3, [r7, #20]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	20000e9c 	.word	0x20000e9c
 8005bc8:	20000e98 	.word	0x20000e98

08005bcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08e      	sub	sp, #56	; 0x38
 8005bd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005bd2:	e0ca      	b.n	8005d6a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	da18      	bge.n	8005c0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005bda:	1d3b      	adds	r3, r7, #4
 8005bdc:	3304      	adds	r3, #4
 8005bde:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10a      	bne.n	8005bfc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	61fb      	str	r3, [r7, #28]
}
 8005bf8:	bf00      	nop
 8005bfa:	e7fe      	b.n	8005bfa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c02:	6850      	ldr	r0, [r2, #4]
 8005c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c06:	6892      	ldr	r2, [r2, #8]
 8005c08:	4611      	mov	r1, r2
 8005c0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f2c0 80aa 	blt.w	8005d68 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d004      	beq.n	8005c2a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	3304      	adds	r3, #4
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fd febf 	bl	80039a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff ff6b 	bl	8005b08 <prvSampleTimeNow>
 8005c32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b09      	cmp	r3, #9
 8005c38:	f200 8097 	bhi.w	8005d6a <prvProcessReceivedCommands+0x19e>
 8005c3c:	a201      	add	r2, pc, #4	; (adr r2, 8005c44 <prvProcessReceivedCommands+0x78>)
 8005c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c42:	bf00      	nop
 8005c44:	08005c6d 	.word	0x08005c6d
 8005c48:	08005c6d 	.word	0x08005c6d
 8005c4c:	08005c6d 	.word	0x08005c6d
 8005c50:	08005ce1 	.word	0x08005ce1
 8005c54:	08005cf5 	.word	0x08005cf5
 8005c58:	08005d3f 	.word	0x08005d3f
 8005c5c:	08005c6d 	.word	0x08005c6d
 8005c60:	08005c6d 	.word	0x08005c6d
 8005c64:	08005ce1 	.word	0x08005ce1
 8005c68:	08005cf5 	.word	0x08005cf5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c72:	f043 0301 	orr.w	r3, r3, #1
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	18d1      	adds	r1, r2, r3
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c8c:	f7ff ff5c 	bl	8005b48 <prvInsertTimerInActiveList>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d069      	beq.n	8005d6a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d05e      	beq.n	8005d6a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	441a      	add	r2, r3
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	2300      	movs	r3, #0
 8005cba:	2100      	movs	r1, #0
 8005cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cbe:	f7ff fe05 	bl	80058cc <xTimerGenericCommand>
 8005cc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d14f      	bne.n	8005d6a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	61bb      	str	r3, [r7, #24]
}
 8005cdc:	bf00      	nop
 8005cde:	e7fe      	b.n	8005cde <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ce6:	f023 0301 	bic.w	r3, r3, #1
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005cf2:	e03a      	b.n	8005d6a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cfa:	f043 0301 	orr.w	r3, r3, #1
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	617b      	str	r3, [r7, #20]
}
 8005d26:	bf00      	nop
 8005d28:	e7fe      	b.n	8005d28 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2c:	699a      	ldr	r2, [r3, #24]
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	18d1      	adds	r1, r2, r3
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d38:	f7ff ff06 	bl	8005b48 <prvInsertTimerInActiveList>
					break;
 8005d3c:	e015      	b.n	8005d6a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d103      	bne.n	8005d54 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d4e:	f000 fbdf 	bl	8006510 <vPortFree>
 8005d52:	e00a      	b.n	8005d6a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d5a:	f023 0301 	bic.w	r3, r3, #1
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d66:	e000      	b.n	8005d6a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005d68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d6a:	4b08      	ldr	r3, [pc, #32]	; (8005d8c <prvProcessReceivedCommands+0x1c0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	1d39      	adds	r1, r7, #4
 8005d70:	2200      	movs	r2, #0
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fe f94c 	bl	8004010 <xQueueReceive>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f47f af2a 	bne.w	8005bd4 <prvProcessReceivedCommands+0x8>
	}
}
 8005d80:	bf00      	nop
 8005d82:	bf00      	nop
 8005d84:	3730      	adds	r7, #48	; 0x30
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20000ea0 	.word	0x20000ea0

08005d90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d96:	e048      	b.n	8005e2a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d98:	4b2d      	ldr	r3, [pc, #180]	; (8005e50 <prvSwitchTimerLists+0xc0>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005da2:	4b2b      	ldr	r3, [pc, #172]	; (8005e50 <prvSwitchTimerLists+0xc0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	3304      	adds	r3, #4
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7fd fdf9 	bl	80039a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d02e      	beq.n	8005e2a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d90e      	bls.n	8005dfc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dea:	4b19      	ldr	r3, [pc, #100]	; (8005e50 <prvSwitchTimerLists+0xc0>)
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3304      	adds	r3, #4
 8005df2:	4619      	mov	r1, r3
 8005df4:	4610      	mov	r0, r2
 8005df6:	f7fd fd9e 	bl	8003936 <vListInsert>
 8005dfa:	e016      	b.n	8005e2a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	2300      	movs	r3, #0
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	2100      	movs	r1, #0
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f7ff fd60 	bl	80058cc <xTimerGenericCommand>
 8005e0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	603b      	str	r3, [r7, #0]
}
 8005e26:	bf00      	nop
 8005e28:	e7fe      	b.n	8005e28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e2a:	4b09      	ldr	r3, [pc, #36]	; (8005e50 <prvSwitchTimerLists+0xc0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1b1      	bne.n	8005d98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e34:	4b06      	ldr	r3, [pc, #24]	; (8005e50 <prvSwitchTimerLists+0xc0>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e3a:	4b06      	ldr	r3, [pc, #24]	; (8005e54 <prvSwitchTimerLists+0xc4>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a04      	ldr	r2, [pc, #16]	; (8005e50 <prvSwitchTimerLists+0xc0>)
 8005e40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e42:	4a04      	ldr	r2, [pc, #16]	; (8005e54 <prvSwitchTimerLists+0xc4>)
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	6013      	str	r3, [r2, #0]
}
 8005e48:	bf00      	nop
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	20000e98 	.word	0x20000e98
 8005e54:	20000e9c 	.word	0x20000e9c

08005e58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e5e:	f000 f969 	bl	8006134 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e62:	4b15      	ldr	r3, [pc, #84]	; (8005eb8 <prvCheckForValidListAndQueue+0x60>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d120      	bne.n	8005eac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e6a:	4814      	ldr	r0, [pc, #80]	; (8005ebc <prvCheckForValidListAndQueue+0x64>)
 8005e6c:	f7fd fd12 	bl	8003894 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e70:	4813      	ldr	r0, [pc, #76]	; (8005ec0 <prvCheckForValidListAndQueue+0x68>)
 8005e72:	f7fd fd0f 	bl	8003894 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e76:	4b13      	ldr	r3, [pc, #76]	; (8005ec4 <prvCheckForValidListAndQueue+0x6c>)
 8005e78:	4a10      	ldr	r2, [pc, #64]	; (8005ebc <prvCheckForValidListAndQueue+0x64>)
 8005e7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e7c:	4b12      	ldr	r3, [pc, #72]	; (8005ec8 <prvCheckForValidListAndQueue+0x70>)
 8005e7e:	4a10      	ldr	r2, [pc, #64]	; (8005ec0 <prvCheckForValidListAndQueue+0x68>)
 8005e80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e82:	2300      	movs	r3, #0
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	4b11      	ldr	r3, [pc, #68]	; (8005ecc <prvCheckForValidListAndQueue+0x74>)
 8005e88:	4a11      	ldr	r2, [pc, #68]	; (8005ed0 <prvCheckForValidListAndQueue+0x78>)
 8005e8a:	2110      	movs	r1, #16
 8005e8c:	200a      	movs	r0, #10
 8005e8e:	f7fd fe1d 	bl	8003acc <xQueueGenericCreateStatic>
 8005e92:	4603      	mov	r3, r0
 8005e94:	4a08      	ldr	r2, [pc, #32]	; (8005eb8 <prvCheckForValidListAndQueue+0x60>)
 8005e96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e98:	4b07      	ldr	r3, [pc, #28]	; (8005eb8 <prvCheckForValidListAndQueue+0x60>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d005      	beq.n	8005eac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ea0:	4b05      	ldr	r3, [pc, #20]	; (8005eb8 <prvCheckForValidListAndQueue+0x60>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	490b      	ldr	r1, [pc, #44]	; (8005ed4 <prvCheckForValidListAndQueue+0x7c>)
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fe fbc6 	bl	8004638 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005eac:	f000 f972 	bl	8006194 <vPortExitCritical>
}
 8005eb0:	bf00      	nop
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20000ea0 	.word	0x20000ea0
 8005ebc:	20000e70 	.word	0x20000e70
 8005ec0:	20000e84 	.word	0x20000e84
 8005ec4:	20000e98 	.word	0x20000e98
 8005ec8:	20000e9c 	.word	0x20000e9c
 8005ecc:	20000f4c 	.word	0x20000f4c
 8005ed0:	20000eac 	.word	0x20000eac
 8005ed4:	08006a14 	.word	0x08006a14

08005ed8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	3b04      	subs	r3, #4
 8005ee8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3b04      	subs	r3, #4
 8005ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f023 0201 	bic.w	r2, r3, #1
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	3b04      	subs	r3, #4
 8005f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f08:	4a0c      	ldr	r2, [pc, #48]	; (8005f3c <pxPortInitialiseStack+0x64>)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	3b14      	subs	r3, #20
 8005f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3b04      	subs	r3, #4
 8005f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f06f 0202 	mvn.w	r2, #2
 8005f26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3b20      	subs	r3, #32
 8005f2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	08005f41 	.word	0x08005f41

08005f40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f4a:	4b12      	ldr	r3, [pc, #72]	; (8005f94 <prvTaskExitError+0x54>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f52:	d00a      	beq.n	8005f6a <prvTaskExitError+0x2a>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	60fb      	str	r3, [r7, #12]
}
 8005f66:	bf00      	nop
 8005f68:	e7fe      	b.n	8005f68 <prvTaskExitError+0x28>
	__asm volatile
 8005f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	60bb      	str	r3, [r7, #8]
}
 8005f7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f7e:	bf00      	nop
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0fc      	beq.n	8005f80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f86:	bf00      	nop
 8005f88:	bf00      	nop
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	2000000c 	.word	0x2000000c
	...

08005fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005fa0:	4b07      	ldr	r3, [pc, #28]	; (8005fc0 <pxCurrentTCBConst2>)
 8005fa2:	6819      	ldr	r1, [r3, #0]
 8005fa4:	6808      	ldr	r0, [r1, #0]
 8005fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005faa:	f380 8809 	msr	PSP, r0
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f04f 0000 	mov.w	r0, #0
 8005fb6:	f380 8811 	msr	BASEPRI, r0
 8005fba:	4770      	bx	lr
 8005fbc:	f3af 8000 	nop.w

08005fc0 <pxCurrentTCBConst2>:
 8005fc0:	20000970 	.word	0x20000970
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop

08005fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005fc8:	4808      	ldr	r0, [pc, #32]	; (8005fec <prvPortStartFirstTask+0x24>)
 8005fca:	6800      	ldr	r0, [r0, #0]
 8005fcc:	6800      	ldr	r0, [r0, #0]
 8005fce:	f380 8808 	msr	MSP, r0
 8005fd2:	f04f 0000 	mov.w	r0, #0
 8005fd6:	f380 8814 	msr	CONTROL, r0
 8005fda:	b662      	cpsie	i
 8005fdc:	b661      	cpsie	f
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	df00      	svc	0
 8005fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005fea:	bf00      	nop
 8005fec:	e000ed08 	.word	0xe000ed08

08005ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ff6:	4b46      	ldr	r3, [pc, #280]	; (8006110 <xPortStartScheduler+0x120>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a46      	ldr	r2, [pc, #280]	; (8006114 <xPortStartScheduler+0x124>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d10a      	bne.n	8006016 <xPortStartScheduler+0x26>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	613b      	str	r3, [r7, #16]
}
 8006012:	bf00      	nop
 8006014:	e7fe      	b.n	8006014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006016:	4b3e      	ldr	r3, [pc, #248]	; (8006110 <xPortStartScheduler+0x120>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a3f      	ldr	r2, [pc, #252]	; (8006118 <xPortStartScheduler+0x128>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d10a      	bne.n	8006036 <xPortStartScheduler+0x46>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	60fb      	str	r3, [r7, #12]
}
 8006032:	bf00      	nop
 8006034:	e7fe      	b.n	8006034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006036:	4b39      	ldr	r3, [pc, #228]	; (800611c <xPortStartScheduler+0x12c>)
 8006038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	b2db      	uxtb	r3, r3
 8006040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	22ff      	movs	r2, #255	; 0xff
 8006046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	b2db      	uxtb	r3, r3
 800604e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006058:	b2da      	uxtb	r2, r3
 800605a:	4b31      	ldr	r3, [pc, #196]	; (8006120 <xPortStartScheduler+0x130>)
 800605c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800605e:	4b31      	ldr	r3, [pc, #196]	; (8006124 <xPortStartScheduler+0x134>)
 8006060:	2207      	movs	r2, #7
 8006062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006064:	e009      	b.n	800607a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006066:	4b2f      	ldr	r3, [pc, #188]	; (8006124 <xPortStartScheduler+0x134>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3b01      	subs	r3, #1
 800606c:	4a2d      	ldr	r2, [pc, #180]	; (8006124 <xPortStartScheduler+0x134>)
 800606e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	b2db      	uxtb	r3, r3
 8006078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800607a:	78fb      	ldrb	r3, [r7, #3]
 800607c:	b2db      	uxtb	r3, r3
 800607e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006082:	2b80      	cmp	r3, #128	; 0x80
 8006084:	d0ef      	beq.n	8006066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006086:	4b27      	ldr	r3, [pc, #156]	; (8006124 <xPortStartScheduler+0x134>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f1c3 0307 	rsb	r3, r3, #7
 800608e:	2b04      	cmp	r3, #4
 8006090:	d00a      	beq.n	80060a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	60bb      	str	r3, [r7, #8]
}
 80060a4:	bf00      	nop
 80060a6:	e7fe      	b.n	80060a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060a8:	4b1e      	ldr	r3, [pc, #120]	; (8006124 <xPortStartScheduler+0x134>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	021b      	lsls	r3, r3, #8
 80060ae:	4a1d      	ldr	r2, [pc, #116]	; (8006124 <xPortStartScheduler+0x134>)
 80060b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060b2:	4b1c      	ldr	r3, [pc, #112]	; (8006124 <xPortStartScheduler+0x134>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060ba:	4a1a      	ldr	r2, [pc, #104]	; (8006124 <xPortStartScheduler+0x134>)
 80060bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060c6:	4b18      	ldr	r3, [pc, #96]	; (8006128 <xPortStartScheduler+0x138>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a17      	ldr	r2, [pc, #92]	; (8006128 <xPortStartScheduler+0x138>)
 80060cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060d2:	4b15      	ldr	r3, [pc, #84]	; (8006128 <xPortStartScheduler+0x138>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a14      	ldr	r2, [pc, #80]	; (8006128 <xPortStartScheduler+0x138>)
 80060d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80060dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060de:	f000 f8dd 	bl	800629c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060e2:	4b12      	ldr	r3, [pc, #72]	; (800612c <xPortStartScheduler+0x13c>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060e8:	f000 f8fc 	bl	80062e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060ec:	4b10      	ldr	r3, [pc, #64]	; (8006130 <xPortStartScheduler+0x140>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a0f      	ldr	r2, [pc, #60]	; (8006130 <xPortStartScheduler+0x140>)
 80060f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80060f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060f8:	f7ff ff66 	bl	8005fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060fc:	f7fe ff4a 	bl	8004f94 <vTaskSwitchContext>
	prvTaskExitError();
 8006100:	f7ff ff1e 	bl	8005f40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	e000ed00 	.word	0xe000ed00
 8006114:	410fc271 	.word	0x410fc271
 8006118:	410fc270 	.word	0x410fc270
 800611c:	e000e400 	.word	0xe000e400
 8006120:	20000f9c 	.word	0x20000f9c
 8006124:	20000fa0 	.word	0x20000fa0
 8006128:	e000ed20 	.word	0xe000ed20
 800612c:	2000000c 	.word	0x2000000c
 8006130:	e000ef34 	.word	0xe000ef34

08006134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	607b      	str	r3, [r7, #4]
}
 800614c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800614e:	4b0f      	ldr	r3, [pc, #60]	; (800618c <vPortEnterCritical+0x58>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3301      	adds	r3, #1
 8006154:	4a0d      	ldr	r2, [pc, #52]	; (800618c <vPortEnterCritical+0x58>)
 8006156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006158:	4b0c      	ldr	r3, [pc, #48]	; (800618c <vPortEnterCritical+0x58>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d10f      	bne.n	8006180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006160:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <vPortEnterCritical+0x5c>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <vPortEnterCritical+0x4c>
	__asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	603b      	str	r3, [r7, #0]
}
 800617c:	bf00      	nop
 800617e:	e7fe      	b.n	800617e <vPortEnterCritical+0x4a>
	}
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	2000000c 	.word	0x2000000c
 8006190:	e000ed04 	.word	0xe000ed04

08006194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800619a:	4b12      	ldr	r3, [pc, #72]	; (80061e4 <vPortExitCritical+0x50>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10a      	bne.n	80061b8 <vPortExitCritical+0x24>
	__asm volatile
 80061a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	607b      	str	r3, [r7, #4]
}
 80061b4:	bf00      	nop
 80061b6:	e7fe      	b.n	80061b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80061b8:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <vPortExitCritical+0x50>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3b01      	subs	r3, #1
 80061be:	4a09      	ldr	r2, [pc, #36]	; (80061e4 <vPortExitCritical+0x50>)
 80061c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061c2:	4b08      	ldr	r3, [pc, #32]	; (80061e4 <vPortExitCritical+0x50>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d105      	bne.n	80061d6 <vPortExitCritical+0x42>
 80061ca:	2300      	movs	r3, #0
 80061cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	f383 8811 	msr	BASEPRI, r3
}
 80061d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	2000000c 	.word	0x2000000c
	...

080061f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061f0:	f3ef 8009 	mrs	r0, PSP
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	4b15      	ldr	r3, [pc, #84]	; (8006250 <pxCurrentTCBConst>)
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	f01e 0f10 	tst.w	lr, #16
 8006200:	bf08      	it	eq
 8006202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620a:	6010      	str	r0, [r2, #0]
 800620c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006214:	f380 8811 	msr	BASEPRI, r0
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f7fe feb8 	bl	8004f94 <vTaskSwitchContext>
 8006224:	f04f 0000 	mov.w	r0, #0
 8006228:	f380 8811 	msr	BASEPRI, r0
 800622c:	bc09      	pop	{r0, r3}
 800622e:	6819      	ldr	r1, [r3, #0]
 8006230:	6808      	ldr	r0, [r1, #0]
 8006232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006236:	f01e 0f10 	tst.w	lr, #16
 800623a:	bf08      	it	eq
 800623c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006240:	f380 8809 	msr	PSP, r0
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	f3af 8000 	nop.w

08006250 <pxCurrentTCBConst>:
 8006250:	20000970 	.word	0x20000970
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop

08006258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	607b      	str	r3, [r7, #4]
}
 8006270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006272:	f7fe fdd5 	bl	8004e20 <xTaskIncrementTick>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800627c:	4b06      	ldr	r3, [pc, #24]	; (8006298 <xPortSysTickHandler+0x40>)
 800627e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	2300      	movs	r3, #0
 8006286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	f383 8811 	msr	BASEPRI, r3
}
 800628e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006290:	bf00      	nop
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	e000ed04 	.word	0xe000ed04

0800629c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80062a0:	4b0b      	ldr	r3, [pc, #44]	; (80062d0 <vPortSetupTimerInterrupt+0x34>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80062a6:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <vPortSetupTimerInterrupt+0x38>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80062ac:	4b0a      	ldr	r3, [pc, #40]	; (80062d8 <vPortSetupTimerInterrupt+0x3c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a0a      	ldr	r2, [pc, #40]	; (80062dc <vPortSetupTimerInterrupt+0x40>)
 80062b2:	fba2 2303 	umull	r2, r3, r2, r3
 80062b6:	099b      	lsrs	r3, r3, #6
 80062b8:	4a09      	ldr	r2, [pc, #36]	; (80062e0 <vPortSetupTimerInterrupt+0x44>)
 80062ba:	3b01      	subs	r3, #1
 80062bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062be:	4b04      	ldr	r3, [pc, #16]	; (80062d0 <vPortSetupTimerInterrupt+0x34>)
 80062c0:	2207      	movs	r2, #7
 80062c2:	601a      	str	r2, [r3, #0]
}
 80062c4:	bf00      	nop
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	e000e010 	.word	0xe000e010
 80062d4:	e000e018 	.word	0xe000e018
 80062d8:	20000000 	.word	0x20000000
 80062dc:	10624dd3 	.word	0x10624dd3
 80062e0:	e000e014 	.word	0xe000e014

080062e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80062f4 <vPortEnableVFP+0x10>
 80062e8:	6801      	ldr	r1, [r0, #0]
 80062ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80062ee:	6001      	str	r1, [r0, #0]
 80062f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062f2:	bf00      	nop
 80062f4:	e000ed88 	.word	0xe000ed88

080062f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80062fe:	f3ef 8305 	mrs	r3, IPSR
 8006302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2b0f      	cmp	r3, #15
 8006308:	d914      	bls.n	8006334 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800630a:	4a17      	ldr	r2, [pc, #92]	; (8006368 <vPortValidateInterruptPriority+0x70>)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006314:	4b15      	ldr	r3, [pc, #84]	; (800636c <vPortValidateInterruptPriority+0x74>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	7afa      	ldrb	r2, [r7, #11]
 800631a:	429a      	cmp	r2, r3
 800631c:	d20a      	bcs.n	8006334 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	607b      	str	r3, [r7, #4]
}
 8006330:	bf00      	nop
 8006332:	e7fe      	b.n	8006332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006334:	4b0e      	ldr	r3, [pc, #56]	; (8006370 <vPortValidateInterruptPriority+0x78>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800633c:	4b0d      	ldr	r3, [pc, #52]	; (8006374 <vPortValidateInterruptPriority+0x7c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	429a      	cmp	r2, r3
 8006342:	d90a      	bls.n	800635a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	603b      	str	r3, [r7, #0]
}
 8006356:	bf00      	nop
 8006358:	e7fe      	b.n	8006358 <vPortValidateInterruptPriority+0x60>
	}
 800635a:	bf00      	nop
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	e000e3f0 	.word	0xe000e3f0
 800636c:	20000f9c 	.word	0x20000f9c
 8006370:	e000ed0c 	.word	0xe000ed0c
 8006374:	20000fa0 	.word	0x20000fa0

08006378 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08a      	sub	sp, #40	; 0x28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006380:	2300      	movs	r3, #0
 8006382:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006384:	f7fe fc90 	bl	8004ca8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006388:	4b5b      	ldr	r3, [pc, #364]	; (80064f8 <pvPortMalloc+0x180>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006390:	f000 f920 	bl	80065d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006394:	4b59      	ldr	r3, [pc, #356]	; (80064fc <pvPortMalloc+0x184>)
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4013      	ands	r3, r2
 800639c:	2b00      	cmp	r3, #0
 800639e:	f040 8093 	bne.w	80064c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d01d      	beq.n	80063e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80063a8:	2208      	movs	r2, #8
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4413      	add	r3, r2
 80063ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d014      	beq.n	80063e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f023 0307 	bic.w	r3, r3, #7
 80063c0:	3308      	adds	r3, #8
 80063c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f003 0307 	and.w	r3, r3, #7
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <pvPortMalloc+0x6c>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	617b      	str	r3, [r7, #20]
}
 80063e0:	bf00      	nop
 80063e2:	e7fe      	b.n	80063e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d06e      	beq.n	80064c8 <pvPortMalloc+0x150>
 80063ea:	4b45      	ldr	r3, [pc, #276]	; (8006500 <pvPortMalloc+0x188>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d869      	bhi.n	80064c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063f4:	4b43      	ldr	r3, [pc, #268]	; (8006504 <pvPortMalloc+0x18c>)
 80063f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063f8:	4b42      	ldr	r3, [pc, #264]	; (8006504 <pvPortMalloc+0x18c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063fe:	e004      	b.n	800640a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	429a      	cmp	r2, r3
 8006412:	d903      	bls.n	800641c <pvPortMalloc+0xa4>
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1f1      	bne.n	8006400 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800641c:	4b36      	ldr	r3, [pc, #216]	; (80064f8 <pvPortMalloc+0x180>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006422:	429a      	cmp	r2, r3
 8006424:	d050      	beq.n	80064c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2208      	movs	r2, #8
 800642c:	4413      	add	r3, r2
 800642e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	1ad2      	subs	r2, r2, r3
 8006440:	2308      	movs	r3, #8
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	429a      	cmp	r2, r3
 8006446:	d91f      	bls.n	8006488 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4413      	add	r3, r2
 800644e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	f003 0307 	and.w	r3, r3, #7
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <pvPortMalloc+0xf8>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	613b      	str	r3, [r7, #16]
}
 800646c:	bf00      	nop
 800646e:	e7fe      	b.n	800646e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	1ad2      	subs	r2, r2, r3
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006482:	69b8      	ldr	r0, [r7, #24]
 8006484:	f000 f908 	bl	8006698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006488:	4b1d      	ldr	r3, [pc, #116]	; (8006500 <pvPortMalloc+0x188>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	4a1b      	ldr	r2, [pc, #108]	; (8006500 <pvPortMalloc+0x188>)
 8006494:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006496:	4b1a      	ldr	r3, [pc, #104]	; (8006500 <pvPortMalloc+0x188>)
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	4b1b      	ldr	r3, [pc, #108]	; (8006508 <pvPortMalloc+0x190>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d203      	bcs.n	80064aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064a2:	4b17      	ldr	r3, [pc, #92]	; (8006500 <pvPortMalloc+0x188>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a18      	ldr	r2, [pc, #96]	; (8006508 <pvPortMalloc+0x190>)
 80064a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	4b13      	ldr	r3, [pc, #76]	; (80064fc <pvPortMalloc+0x184>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	431a      	orrs	r2, r3
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80064be:	4b13      	ldr	r3, [pc, #76]	; (800650c <pvPortMalloc+0x194>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3301      	adds	r3, #1
 80064c4:	4a11      	ldr	r2, [pc, #68]	; (800650c <pvPortMalloc+0x194>)
 80064c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064c8:	f7fe fbfc 	bl	8004cc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <pvPortMalloc+0x174>
	__asm volatile
 80064d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	60fb      	str	r3, [r7, #12]
}
 80064e8:	bf00      	nop
 80064ea:	e7fe      	b.n	80064ea <pvPortMalloc+0x172>
	return pvReturn;
 80064ec:	69fb      	ldr	r3, [r7, #28]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3728      	adds	r7, #40	; 0x28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20004bac 	.word	0x20004bac
 80064fc:	20004bc0 	.word	0x20004bc0
 8006500:	20004bb0 	.word	0x20004bb0
 8006504:	20004ba4 	.word	0x20004ba4
 8006508:	20004bb4 	.word	0x20004bb4
 800650c:	20004bb8 	.word	0x20004bb8

08006510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d04d      	beq.n	80065be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006522:	2308      	movs	r3, #8
 8006524:	425b      	negs	r3, r3
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4413      	add	r3, r2
 800652a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	4b24      	ldr	r3, [pc, #144]	; (80065c8 <vPortFree+0xb8>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4013      	ands	r3, r2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10a      	bne.n	8006554 <vPortFree+0x44>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	60fb      	str	r3, [r7, #12]
}
 8006550:	bf00      	nop
 8006552:	e7fe      	b.n	8006552 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00a      	beq.n	8006572 <vPortFree+0x62>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	60bb      	str	r3, [r7, #8]
}
 800656e:	bf00      	nop
 8006570:	e7fe      	b.n	8006570 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	4b14      	ldr	r3, [pc, #80]	; (80065c8 <vPortFree+0xb8>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4013      	ands	r3, r2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d01e      	beq.n	80065be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d11a      	bne.n	80065be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	4b0e      	ldr	r3, [pc, #56]	; (80065c8 <vPortFree+0xb8>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	43db      	mvns	r3, r3
 8006592:	401a      	ands	r2, r3
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006598:	f7fe fb86 	bl	8004ca8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	4b0a      	ldr	r3, [pc, #40]	; (80065cc <vPortFree+0xbc>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4413      	add	r3, r2
 80065a6:	4a09      	ldr	r2, [pc, #36]	; (80065cc <vPortFree+0xbc>)
 80065a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065aa:	6938      	ldr	r0, [r7, #16]
 80065ac:	f000 f874 	bl	8006698 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80065b0:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <vPortFree+0xc0>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3301      	adds	r3, #1
 80065b6:	4a06      	ldr	r2, [pc, #24]	; (80065d0 <vPortFree+0xc0>)
 80065b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80065ba:	f7fe fb83 	bl	8004cc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065be:	bf00      	nop
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	20004bc0 	.word	0x20004bc0
 80065cc:	20004bb0 	.word	0x20004bb0
 80065d0:	20004bbc 	.word	0x20004bbc

080065d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80065de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065e0:	4b27      	ldr	r3, [pc, #156]	; (8006680 <prvHeapInit+0xac>)
 80065e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f003 0307 	and.w	r3, r3, #7
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00c      	beq.n	8006608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3307      	adds	r3, #7
 80065f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0307 	bic.w	r3, r3, #7
 80065fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	4a1f      	ldr	r2, [pc, #124]	; (8006680 <prvHeapInit+0xac>)
 8006604:	4413      	add	r3, r2
 8006606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800660c:	4a1d      	ldr	r2, [pc, #116]	; (8006684 <prvHeapInit+0xb0>)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006612:	4b1c      	ldr	r3, [pc, #112]	; (8006684 <prvHeapInit+0xb0>)
 8006614:	2200      	movs	r2, #0
 8006616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	4413      	add	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006620:	2208      	movs	r2, #8
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	1a9b      	subs	r3, r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0307 	bic.w	r3, r3, #7
 800662e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4a15      	ldr	r2, [pc, #84]	; (8006688 <prvHeapInit+0xb4>)
 8006634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006636:	4b14      	ldr	r3, [pc, #80]	; (8006688 <prvHeapInit+0xb4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2200      	movs	r2, #0
 800663c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800663e:	4b12      	ldr	r3, [pc, #72]	; (8006688 <prvHeapInit+0xb4>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	1ad2      	subs	r2, r2, r3
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006654:	4b0c      	ldr	r3, [pc, #48]	; (8006688 <prvHeapInit+0xb4>)
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	4a0a      	ldr	r2, [pc, #40]	; (800668c <prvHeapInit+0xb8>)
 8006662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	4a09      	ldr	r2, [pc, #36]	; (8006690 <prvHeapInit+0xbc>)
 800666a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800666c:	4b09      	ldr	r3, [pc, #36]	; (8006694 <prvHeapInit+0xc0>)
 800666e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006672:	601a      	str	r2, [r3, #0]
}
 8006674:	bf00      	nop
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	20000fa4 	.word	0x20000fa4
 8006684:	20004ba4 	.word	0x20004ba4
 8006688:	20004bac 	.word	0x20004bac
 800668c:	20004bb4 	.word	0x20004bb4
 8006690:	20004bb0 	.word	0x20004bb0
 8006694:	20004bc0 	.word	0x20004bc0

08006698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066a0:	4b28      	ldr	r3, [pc, #160]	; (8006744 <prvInsertBlockIntoFreeList+0xac>)
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	e002      	b.n	80066ac <prvInsertBlockIntoFreeList+0x14>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d8f7      	bhi.n	80066a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	4413      	add	r3, r2
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d108      	bne.n	80066da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	441a      	add	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	441a      	add	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d118      	bne.n	8006720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	4b15      	ldr	r3, [pc, #84]	; (8006748 <prvInsertBlockIntoFreeList+0xb0>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d00d      	beq.n	8006716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	441a      	add	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	e008      	b.n	8006728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006716:	4b0c      	ldr	r3, [pc, #48]	; (8006748 <prvInsertBlockIntoFreeList+0xb0>)
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	e003      	b.n	8006728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	429a      	cmp	r2, r3
 800672e:	d002      	beq.n	8006736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006736:	bf00      	nop
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	20004ba4 	.word	0x20004ba4
 8006748:	20004bac 	.word	0x20004bac

0800674c <__libc_init_array>:
 800674c:	b570      	push	{r4, r5, r6, lr}
 800674e:	4d0d      	ldr	r5, [pc, #52]	; (8006784 <__libc_init_array+0x38>)
 8006750:	4c0d      	ldr	r4, [pc, #52]	; (8006788 <__libc_init_array+0x3c>)
 8006752:	1b64      	subs	r4, r4, r5
 8006754:	10a4      	asrs	r4, r4, #2
 8006756:	2600      	movs	r6, #0
 8006758:	42a6      	cmp	r6, r4
 800675a:	d109      	bne.n	8006770 <__libc_init_array+0x24>
 800675c:	4d0b      	ldr	r5, [pc, #44]	; (800678c <__libc_init_array+0x40>)
 800675e:	4c0c      	ldr	r4, [pc, #48]	; (8006790 <__libc_init_array+0x44>)
 8006760:	f000 f8f2 	bl	8006948 <_init>
 8006764:	1b64      	subs	r4, r4, r5
 8006766:	10a4      	asrs	r4, r4, #2
 8006768:	2600      	movs	r6, #0
 800676a:	42a6      	cmp	r6, r4
 800676c:	d105      	bne.n	800677a <__libc_init_array+0x2e>
 800676e:	bd70      	pop	{r4, r5, r6, pc}
 8006770:	f855 3b04 	ldr.w	r3, [r5], #4
 8006774:	4798      	blx	r3
 8006776:	3601      	adds	r6, #1
 8006778:	e7ee      	b.n	8006758 <__libc_init_array+0xc>
 800677a:	f855 3b04 	ldr.w	r3, [r5], #4
 800677e:	4798      	blx	r3
 8006780:	3601      	adds	r6, #1
 8006782:	e7f2      	b.n	800676a <__libc_init_array+0x1e>
 8006784:	08006ad8 	.word	0x08006ad8
 8006788:	08006ad8 	.word	0x08006ad8
 800678c:	08006ad8 	.word	0x08006ad8
 8006790:	08006adc 	.word	0x08006adc

08006794 <__retarget_lock_acquire_recursive>:
 8006794:	4770      	bx	lr

08006796 <__retarget_lock_release_recursive>:
 8006796:	4770      	bx	lr

08006798 <memcpy>:
 8006798:	440a      	add	r2, r1
 800679a:	4291      	cmp	r1, r2
 800679c:	f100 33ff 	add.w	r3, r0, #4294967295
 80067a0:	d100      	bne.n	80067a4 <memcpy+0xc>
 80067a2:	4770      	bx	lr
 80067a4:	b510      	push	{r4, lr}
 80067a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067ae:	4291      	cmp	r1, r2
 80067b0:	d1f9      	bne.n	80067a6 <memcpy+0xe>
 80067b2:	bd10      	pop	{r4, pc}

080067b4 <memset>:
 80067b4:	4402      	add	r2, r0
 80067b6:	4603      	mov	r3, r0
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d100      	bne.n	80067be <memset+0xa>
 80067bc:	4770      	bx	lr
 80067be:	f803 1b01 	strb.w	r1, [r3], #1
 80067c2:	e7f9      	b.n	80067b8 <memset+0x4>

080067c4 <cleanup_glue>:
 80067c4:	b538      	push	{r3, r4, r5, lr}
 80067c6:	460c      	mov	r4, r1
 80067c8:	6809      	ldr	r1, [r1, #0]
 80067ca:	4605      	mov	r5, r0
 80067cc:	b109      	cbz	r1, 80067d2 <cleanup_glue+0xe>
 80067ce:	f7ff fff9 	bl	80067c4 <cleanup_glue>
 80067d2:	4621      	mov	r1, r4
 80067d4:	4628      	mov	r0, r5
 80067d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067da:	f000 b869 	b.w	80068b0 <_free_r>
	...

080067e0 <_reclaim_reent>:
 80067e0:	4b2c      	ldr	r3, [pc, #176]	; (8006894 <_reclaim_reent+0xb4>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4283      	cmp	r3, r0
 80067e6:	b570      	push	{r4, r5, r6, lr}
 80067e8:	4604      	mov	r4, r0
 80067ea:	d051      	beq.n	8006890 <_reclaim_reent+0xb0>
 80067ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80067ee:	b143      	cbz	r3, 8006802 <_reclaim_reent+0x22>
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d14a      	bne.n	800688c <_reclaim_reent+0xac>
 80067f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067f8:	6819      	ldr	r1, [r3, #0]
 80067fa:	b111      	cbz	r1, 8006802 <_reclaim_reent+0x22>
 80067fc:	4620      	mov	r0, r4
 80067fe:	f000 f857 	bl	80068b0 <_free_r>
 8006802:	6961      	ldr	r1, [r4, #20]
 8006804:	b111      	cbz	r1, 800680c <_reclaim_reent+0x2c>
 8006806:	4620      	mov	r0, r4
 8006808:	f000 f852 	bl	80068b0 <_free_r>
 800680c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800680e:	b111      	cbz	r1, 8006816 <_reclaim_reent+0x36>
 8006810:	4620      	mov	r0, r4
 8006812:	f000 f84d 	bl	80068b0 <_free_r>
 8006816:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006818:	b111      	cbz	r1, 8006820 <_reclaim_reent+0x40>
 800681a:	4620      	mov	r0, r4
 800681c:	f000 f848 	bl	80068b0 <_free_r>
 8006820:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006822:	b111      	cbz	r1, 800682a <_reclaim_reent+0x4a>
 8006824:	4620      	mov	r0, r4
 8006826:	f000 f843 	bl	80068b0 <_free_r>
 800682a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800682c:	b111      	cbz	r1, 8006834 <_reclaim_reent+0x54>
 800682e:	4620      	mov	r0, r4
 8006830:	f000 f83e 	bl	80068b0 <_free_r>
 8006834:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006836:	b111      	cbz	r1, 800683e <_reclaim_reent+0x5e>
 8006838:	4620      	mov	r0, r4
 800683a:	f000 f839 	bl	80068b0 <_free_r>
 800683e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006840:	b111      	cbz	r1, 8006848 <_reclaim_reent+0x68>
 8006842:	4620      	mov	r0, r4
 8006844:	f000 f834 	bl	80068b0 <_free_r>
 8006848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800684a:	b111      	cbz	r1, 8006852 <_reclaim_reent+0x72>
 800684c:	4620      	mov	r0, r4
 800684e:	f000 f82f 	bl	80068b0 <_free_r>
 8006852:	69a3      	ldr	r3, [r4, #24]
 8006854:	b1e3      	cbz	r3, 8006890 <_reclaim_reent+0xb0>
 8006856:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006858:	4620      	mov	r0, r4
 800685a:	4798      	blx	r3
 800685c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800685e:	b1b9      	cbz	r1, 8006890 <_reclaim_reent+0xb0>
 8006860:	4620      	mov	r0, r4
 8006862:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006866:	f7ff bfad 	b.w	80067c4 <cleanup_glue>
 800686a:	5949      	ldr	r1, [r1, r5]
 800686c:	b941      	cbnz	r1, 8006880 <_reclaim_reent+0xa0>
 800686e:	3504      	adds	r5, #4
 8006870:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006872:	2d80      	cmp	r5, #128	; 0x80
 8006874:	68d9      	ldr	r1, [r3, #12]
 8006876:	d1f8      	bne.n	800686a <_reclaim_reent+0x8a>
 8006878:	4620      	mov	r0, r4
 800687a:	f000 f819 	bl	80068b0 <_free_r>
 800687e:	e7ba      	b.n	80067f6 <_reclaim_reent+0x16>
 8006880:	680e      	ldr	r6, [r1, #0]
 8006882:	4620      	mov	r0, r4
 8006884:	f000 f814 	bl	80068b0 <_free_r>
 8006888:	4631      	mov	r1, r6
 800688a:	e7ef      	b.n	800686c <_reclaim_reent+0x8c>
 800688c:	2500      	movs	r5, #0
 800688e:	e7ef      	b.n	8006870 <_reclaim_reent+0x90>
 8006890:	bd70      	pop	{r4, r5, r6, pc}
 8006892:	bf00      	nop
 8006894:	20000010 	.word	0x20000010

08006898 <__malloc_lock>:
 8006898:	4801      	ldr	r0, [pc, #4]	; (80068a0 <__malloc_lock+0x8>)
 800689a:	f7ff bf7b 	b.w	8006794 <__retarget_lock_acquire_recursive>
 800689e:	bf00      	nop
 80068a0:	20004bc4 	.word	0x20004bc4

080068a4 <__malloc_unlock>:
 80068a4:	4801      	ldr	r0, [pc, #4]	; (80068ac <__malloc_unlock+0x8>)
 80068a6:	f7ff bf76 	b.w	8006796 <__retarget_lock_release_recursive>
 80068aa:	bf00      	nop
 80068ac:	20004bc4 	.word	0x20004bc4

080068b0 <_free_r>:
 80068b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068b2:	2900      	cmp	r1, #0
 80068b4:	d044      	beq.n	8006940 <_free_r+0x90>
 80068b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ba:	9001      	str	r0, [sp, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f1a1 0404 	sub.w	r4, r1, #4
 80068c2:	bfb8      	it	lt
 80068c4:	18e4      	addlt	r4, r4, r3
 80068c6:	f7ff ffe7 	bl	8006898 <__malloc_lock>
 80068ca:	4a1e      	ldr	r2, [pc, #120]	; (8006944 <_free_r+0x94>)
 80068cc:	9801      	ldr	r0, [sp, #4]
 80068ce:	6813      	ldr	r3, [r2, #0]
 80068d0:	b933      	cbnz	r3, 80068e0 <_free_r+0x30>
 80068d2:	6063      	str	r3, [r4, #4]
 80068d4:	6014      	str	r4, [r2, #0]
 80068d6:	b003      	add	sp, #12
 80068d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068dc:	f7ff bfe2 	b.w	80068a4 <__malloc_unlock>
 80068e0:	42a3      	cmp	r3, r4
 80068e2:	d908      	bls.n	80068f6 <_free_r+0x46>
 80068e4:	6825      	ldr	r5, [r4, #0]
 80068e6:	1961      	adds	r1, r4, r5
 80068e8:	428b      	cmp	r3, r1
 80068ea:	bf01      	itttt	eq
 80068ec:	6819      	ldreq	r1, [r3, #0]
 80068ee:	685b      	ldreq	r3, [r3, #4]
 80068f0:	1949      	addeq	r1, r1, r5
 80068f2:	6021      	streq	r1, [r4, #0]
 80068f4:	e7ed      	b.n	80068d2 <_free_r+0x22>
 80068f6:	461a      	mov	r2, r3
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	b10b      	cbz	r3, 8006900 <_free_r+0x50>
 80068fc:	42a3      	cmp	r3, r4
 80068fe:	d9fa      	bls.n	80068f6 <_free_r+0x46>
 8006900:	6811      	ldr	r1, [r2, #0]
 8006902:	1855      	adds	r5, r2, r1
 8006904:	42a5      	cmp	r5, r4
 8006906:	d10b      	bne.n	8006920 <_free_r+0x70>
 8006908:	6824      	ldr	r4, [r4, #0]
 800690a:	4421      	add	r1, r4
 800690c:	1854      	adds	r4, r2, r1
 800690e:	42a3      	cmp	r3, r4
 8006910:	6011      	str	r1, [r2, #0]
 8006912:	d1e0      	bne.n	80068d6 <_free_r+0x26>
 8006914:	681c      	ldr	r4, [r3, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	6053      	str	r3, [r2, #4]
 800691a:	4421      	add	r1, r4
 800691c:	6011      	str	r1, [r2, #0]
 800691e:	e7da      	b.n	80068d6 <_free_r+0x26>
 8006920:	d902      	bls.n	8006928 <_free_r+0x78>
 8006922:	230c      	movs	r3, #12
 8006924:	6003      	str	r3, [r0, #0]
 8006926:	e7d6      	b.n	80068d6 <_free_r+0x26>
 8006928:	6825      	ldr	r5, [r4, #0]
 800692a:	1961      	adds	r1, r4, r5
 800692c:	428b      	cmp	r3, r1
 800692e:	bf04      	itt	eq
 8006930:	6819      	ldreq	r1, [r3, #0]
 8006932:	685b      	ldreq	r3, [r3, #4]
 8006934:	6063      	str	r3, [r4, #4]
 8006936:	bf04      	itt	eq
 8006938:	1949      	addeq	r1, r1, r5
 800693a:	6021      	streq	r1, [r4, #0]
 800693c:	6054      	str	r4, [r2, #4]
 800693e:	e7ca      	b.n	80068d6 <_free_r+0x26>
 8006940:	b003      	add	sp, #12
 8006942:	bd30      	pop	{r4, r5, pc}
 8006944:	20004bc8 	.word	0x20004bc8

08006948 <_init>:
 8006948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694a:	bf00      	nop
 800694c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800694e:	bc08      	pop	{r3}
 8006950:	469e      	mov	lr, r3
 8006952:	4770      	bx	lr

08006954 <_fini>:
 8006954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006956:	bf00      	nop
 8006958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800695a:	bc08      	pop	{r3}
 800695c:	469e      	mov	lr, r3
 800695e:	4770      	bx	lr
